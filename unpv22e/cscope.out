cscope 15 $HOME/documents/RepoHouse/Unix-Network-Programming-InterProcess-Communications/unpv22e               0001428817
	@bench/bw_door.c

2 
	~"u≈ùc.h
"

4 
ªadî
(, );

5 
wrôî
();

6 
£rvî
(*, *, 
size_t
, 
do‹_desc_t
 *, size_t);

8 *
	gbuf
;

9 
	gtŸÆnbyãs
, 
	gx„rsize
, 
	gc⁄çùe
[2];

12 
	$maö
(
¨gc
, **
¨gv
)

14 
i
, 
∆o›
, 
do‹fd
;

15 
c
;

16 
pid_t
 
chûdpid
;

17 
ssize_t
 
n
;

19 i‡(
¨gc
 != 5)

20 
	`îr_quô
("usage: bw_door <pathname> <#loops> <#mbytes> <#bytes/write>");

21 
∆o›
 = 
	`©oi
(
¨gv
[2]);

22 
tŸÆnbyãs
 = 
	`©oi
(
¨gv
[3]) * 1024 * 1024;

23 
x„rsize
 = 
	`©oi
(
¨gv
[4]);

25 
buf
 = 
	`VÆloc
(
x„rsize
);

26 
	`Touch
(
buf
, 
x„rsize
);

28 
	`u∆ök
(
¨gv
[1]);

29 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
));

30 
	`Pùe
(
c⁄çùe
);

32 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

34 i‡–(
n
 = 
	`Ród
(
c⁄çùe
[0], &
c
, 1)) != 1)

35 
	`îr_quô
("chûd:ÖùêªadÑëu∫ed %d", 
n
);

36 
do‹fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

38 
	`wrôî
(
do‹fd
);

39 
	`exô
(0);

42 
do‹fd
 = 
	`Do‹_¸óã
(
£rvî
, 
NULL
, 0);

43 
	`F©èch
(
do‹fd
, 
¨gv
[1]);

44 
	`Wrôe
(
c⁄çùe
[1], &
c
, 1);

46 
	`Sèπ_time
();

47 
i
 = 0; i < 
∆o›
; i++)

48 
	`ªadî
(
do‹fd
, 
tŸÆnbyãs
);

49 
	`¥ötf
("bandwidth: %.3f MB/sec\n",

50 
tŸÆnbyãs
 / 
	`St›_time
(Ë* 
∆o›
);

51 
	`kûl
(
chûdpid
, 
SIGTERM
);

52 
	`u∆ök
(
¨gv
[1]);

53 
	`exô
(0);

54 
	}
}

59 
	$wrôî
(
do‹fd
)

61 
¡owrôe
;

62 
do‹_¨g_t
 
¨g
;

64 
¨g
.
desc_±r
 = 
NULL
;

65 
¨g
.
desc_num
 = 0;

66 
¨g
.
rbuf
 = 
NULL
;

67 
¨g
.
rsize
 = 0;

70 
	`Ród
(
c⁄çùe
[0], &
¡owrôe
, (ntowrite));

72 
¡owrôe
 > 0) {

73 
¨g
.
d©a_±r
 = 
buf
;

74 
¨g
.
d©a_size
 = 
x„rsize
;

75 
	`Do‹_ˇŒ
(
do‹fd
, &
¨g
);

76 
¡owrôe
 -
x„rsize
;

79 
	}
}

81 
	g¡‹ód
, 
	gƒód
;

84 
	$£rvî
(*
cookõ
, *
¨gp
, 
size_t
 
¨g_size
,

85 
do‹_desc_t
 *
dp
, 
size_t
 
n_des¸ùt‹s
)

87 
c
;

89 
ƒód
 +
¨g_size
;

90 i‡(
ƒód
 >
¡‹ód
)

91 
	`Wrôe
(
c⁄çùe
[0], &
c
, 1);

93 
	`Do‹_ªtu∫
(
NULL
, 0, NULL, 0);

94 
	}
}

97 
	$ªadî
(
do‹fd
, 
nbyãs
)

99 
c
;

100 
ssize_t
 
n
;

102 
¡‹ód
 = 
nbyãs
;

103 
ƒód
 = 0;

105 
	`Wrôe
(
c⁄çùe
[1], &
nbyãs
, (nbytes));

107 i‡–(
n
 = 
	`Ród
(
c⁄çùe
[1], &
c
, 1)) != 1)

108 
	`îr_quô
("ªadî:ÖùêªadÑëu∫ed %d", 
n
);

109 
	}
}

	@bench/bw_pipe.c

2 
	~"u≈ùc.h
"

4 
ªadî
(, , );

5 
wrôî
(, );

7 *
	gbuf
;

8 
	gtŸÆnbyãs
, 
	gx„rsize
;

11 
	$maö
(
¨gc
, **
¨gv
)

13 
i
, 
∆o›
, 
c⁄çùe
[2], 
d©≠ùe
[2];

14 
pid_t
 
chûdpid
;

16 i‡(
¨gc
 != 4)

17 
	`îr_quô
("usage: bw_pipe <#loops> <#mbytes> <#bytes/write>");

18 
∆o›
 = 
	`©oi
(
¨gv
[1]);

19 
tŸÆnbyãs
 = 
	`©oi
(
¨gv
[2]) * 1024 * 1024;

20 
x„rsize
 = 
	`©oi
(
¨gv
[3]);

22 
buf
 = 
	`VÆloc
(
x„rsize
);

23 
	`Touch
(
buf
, 
x„rsize
);

25 
	`Pùe
(
c⁄çùe
);

26 
	`Pùe
(
d©≠ùe
);

28 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

29 
	`wrôî
(
c⁄çùe
[0], 
d©≠ùe
[1]);

30 
	`exô
(0);

33 
	`Sèπ_time
();

34 
i
 = 0; i < 
∆o›
; i++)

35 
	`ªadî
(
c⁄çùe
[1], 
d©≠ùe
[0], 
tŸÆnbyãs
);

36 
	`¥ötf
("bandwidth: %.3f MB/sec\n",

37 
tŸÆnbyãs
 / 
	`St›_time
(Ë* 
∆o›
);

38 
	`kûl
(
chûdpid
, 
SIGTERM
);

39 
	`exô
(0);

40 
	}
}

45 
	$wrôî
(
c⁄tfd
, 
d©afd
)

47 
¡owrôe
;

50 
	`Ród
(
c⁄tfd
, &
¡owrôe
, (ntowrite));

52 
¡owrôe
 > 0) {

53 
	`Wrôe
(
d©afd
, 
buf
, 
x„rsize
);

54 
¡owrôe
 -
x„rsize
;

57 
	}
}

60 
	$ªadî
(
c⁄tfd
, 
d©afd
, 
nbyãs
)

62 
ssize_t
 
n
;

64 
	`Wrôe
(
c⁄tfd
, &
nbyãs
, (nbytes));

66 (
nbyãs
 > 0) &&

67 –(
n
 = 
	`Ród
(
d©afd
, 
buf
, 
x„rsize
)) > 0)) {

68 
nbyãs
 -
n
;

70 
	}
}

	@bench/bw_pxmsg.c

2 
	~"u≈ùc.h
"

3 
	#NAME
 "bw_pxmsg"

	)

5 
ªadî
(, 
mqd_t
, );

6 
wrôî
(, 
mqd_t
);

8 *
	gbuf
;

9 
	gtŸÆnbyãs
, 
	gx„rsize
;

12 
	$maö
(
¨gc
, **
¨gv
)

14 
i
, 
∆o›
, 
c⁄çùe
[2];

15 
mqd_t
 
mq
;

16 
pid_t
 
chûdpid
;

17 
mq_©å
 
©å
;

19 i‡(
¨gc
 != 4)

20 
	`îr_quô
("usage: bw_pxmsg <#loops> <#mbytes> <#bytes/write>");

21 
∆o›
 = 
	`©oi
(
¨gv
[1]);

22 
tŸÆnbyãs
 = 
	`©oi
(
¨gv
[2]) * 1024 * 1024;

23 
x„rsize
 = 
	`©oi
(
¨gv
[3]);

25 
buf
 = 
	`VÆloc
(
x„rsize
);

26 
	`Touch
(
buf
, 
x„rsize
);

28 
	`Pùe
(
c⁄çùe
);

29 
	`mq_u∆ök
(
	`Px_ùc_«me
(
NAME
));

30 
©å
.
mq_maxmsg
 = 4;

31 
©å
.
mq_msgsize
 = 
x„rsize
;

32 
mq
 = 
	`Mq_›í
(
	`Px_ùc_«me
(
NAME
), 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
, &
©å
);

34 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

35 
	`wrôî
(
c⁄çùe
[0], 
mq
);

36 
	`exô
(0);

39 
	`Sèπ_time
();

40 
i
 = 0; i < 
∆o›
; i++)

41 
	`ªadî
(
c⁄çùe
[1], 
mq
, 
tŸÆnbyãs
);

42 
	`¥ötf
("bandwidth: %.3f MB/sec\n",

43 
tŸÆnbyãs
 / 
	`St›_time
(Ë* 
∆o›
);

45 
	`kûl
(
chûdpid
, 
SIGTERM
);

46 
	`Mq_˛o£
(
mq
);

47 
	`Mq_u∆ök
(
	`Px_ùc_«me
(
NAME
));

48 
	`exô
(0);

49 
	}
}

54 
	$wrôî
(
c⁄tfd
, 
mqd_t
 
mq£nd
)

56 
¡owrôe
;

59 
	`Ród
(
c⁄tfd
, &
¡owrôe
, (ntowrite));

61 
¡owrôe
 > 0) {

62 
	`Mq_£nd
(
mq£nd
, 
buf
, 
x„rsize
, 0);

63 
¡owrôe
 -
x„rsize
;

66 
	}
}

69 
	$ªadî
(
c⁄tfd
, 
mqd_t
 
mqªcv
, 
nbyãs
)

71 
ssize_t
 
n
;

73 
	`Wrôe
(
c⁄tfd
, &
nbyãs
, (nbytes));

75 (
nbyãs
 > 0) &&

76 –(
n
 = 
	`Mq_ª˚ive
(
mqªcv
, 
buf
, 
x„rsize
, 
NULL
)) > 0)) {

77 
nbyãs
 -
n
;

79 
	}
}

	@bench/bw_sunrpc_client.c

1 
	~"u≈ùc.h
"

2 
	~"bw_suƒpc.h
"

4 *
	gbuf
;

5 
	gtŸÆnbyãs
, 
	gx„rsize
;

8 
	$maö
(
¨gc
, **
¨gv
)

10 
i
, 
∆o›
, 
¡owrôe
;

11 
CLIENT
 *
˛
;

12 
d©a_ö
 
ö
;

14 i‡(
¨gc
 != 6)

15 
	`îr_quô
("usage: bw_sunrpc_client <hostname> <#loops>"

17 
∆o›
 = 
	`©oi
(
¨gv
[2]);

18 
tŸÆnbyãs
 = 
	`©oi
(
¨gv
[3]) * 1024 * 1024;

19 
x„rsize
 = 
	`©oi
(
¨gv
[4]);

21 
buf
 = 
	`VÆloc
(
x„rsize
);

22 
	`Touch
(
buf
, 
x„rsize
);

24 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
BW_SUNRPC_PROG
, 
BW_SUNRPC_VERS
,árgv[5]);

26 
	`Sèπ_time
();

27 
i
 = 0; i < 
∆o›
; i++) {

28 
¡owrôe
 = 
tŸÆnbyãs
;

29 
¡owrôe
 > 0) {

30 
ö
.
d©a
.
d©a_Àn
 = 
x„rsize
;

31 
ö
.
d©a
.
d©a_vÆ
 = 
buf
;

32 i‡(
	`bw_suƒpc_1
(&
ö
, 
˛
Ë=
NULL
)

33 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

34 
¡owrôe
 -
x„rsize
;

37 
	`¥ötf
("bandwidth: %.3f MB/sec\n",

38 
tŸÆnbyãs
 / 
	`St›_time
(Ë* 
∆o›
);

39 
	`exô
(0);

40 
	}
}

	@bench/bw_sunrpc_server.c

1 
	~"u≈ùc.h
"

2 
	~"bw_suƒpc.h
"

4 #i‚def 
RPCGEN_ANSIC


5 
	#bw_suƒpc_1_svc
 
bw_suƒpc_1


	)

9 
	$bw_suƒpc_1_svc
(
d©a_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

11 
nbyãs
;

13 
nbyãs
 = 
öp
->
d©a
.
d©a_Àn
;

14 (&
nbyãs
);

15 
	}
}

	@bench/bw_svmsg.c

2 
	~"u≈ùc.h
"

4 
ªadî
(, , );

5 
wrôî
(, );

7 
msgbuf
 *
	gbuf
;

8 
	gtŸÆnbyãs
, 
	gx„rsize
;

11 
	$maö
(
¨gc
, **
¨gv
)

13 
i
, 
∆o›
, 
c⁄çùe
[2], 
msqid
;

14 
pid_t
 
chûdpid
;

16 i‡(
¨gc
 != 4)

17 
	`îr_quô
("usage: bw_svmsg <#loops> <#mbytes> <#bytes/write>");

18 
∆o›
 = 
	`©oi
(
¨gv
[1]);

19 
tŸÆnbyãs
 = 
	`©oi
(
¨gv
[2]) * 1024 * 1024;

20 
x„rsize
 = 
	`©oi
(
¨gv
[3]);

22 
buf
 = 
	`VÆloc
(
x„rsize
);

23 
	`Touch
(
buf
, 
x„rsize
);

24 
buf
->
mty≥
 = 1;

26 
	`Pùe
(
c⁄çùe
);

27 
msqid
 = 
	`Msggë
(
IPC_PRIVATE
, 
IPC_CREAT
 | 
SVMSG_MODE
);

29 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

30 
	`wrôî
(
c⁄çùe
[0], 
msqid
);

31 
	`exô
(0);

33 
	`Sèπ_time
();

34 
i
 = 0; i < 
∆o›
; i++)

35 
	`ªadî
(
c⁄çùe
[1], 
msqid
, 
tŸÆnbyãs
);

36 
	`¥ötf
("bandwidth: %.3f MB/sec\n",

37 
tŸÆnbyãs
 / 
	`St›_time
(Ë* 
∆o›
);

39 
	`kûl
(
chûdpid
, 
SIGTERM
);

40 
	`Msg˘l
(
msqid
, 
IPC_RMID
, 
NULL
);

41 
	`exô
(0);

42 
	}
}

47 
	$wrôî
(
c⁄tfd
, 
msqid
)

49 
¡owrôe
;

52 
	`Ród
(
c⁄tfd
, &
¡owrôe
, (ntowrite));

54 
¡owrôe
 > 0) {

55 
	`Msg¢d
(
msqid
, 
buf
, 
x„rsize
 - (), 0);

56 
¡owrôe
 -
x„rsize
;

59 
	}
}

62 
	$ªadî
(
c⁄tfd
, 
msqid
, 
nbyãs
)

64 
ssize_t
 
n
;

66 
	`Wrôe
(
c⁄tfd
, &
nbyãs
, (nbytes));

68 (
nbyãs
 > 0) &&

69 –(
n
 = 
	`Msgrcv
(
msqid
, 
buf
, 
x„rsize
 - (), 0, 0)) > 0)) {

70 
nbyãs
 -
n
 + ();

72 
	}
}

	@bench/incr_fcntl1.c

6 
	~"u≈ùc.h
"

8 
	#MAXNTHREADS
 100

	)

10 
	g∆o›
;

13 
	mfd
;

14 
	mcou¡î
;

15 } 
	gsh¨ed
;

17 *
ö¸
(*);

20 
	$maö
(
¨gc
, **
¨gv
)

22 
i
, 
¡hªads
;

23 *
∑th«me
;

24 
±hªad_t
 
tid
[
MAXNTHREADS
];

26 i‡(
¨gc
 != 4)

27 
	`îr_quô
("usage: incr_fcntl1 <pathname> <#loops> <#threads>");

28 
∑th«me
 = 
¨gv
[1];

29 
∆o›
 = 
	`©oi
(
¨gv
[2]);

30 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[3]), 
MAXNTHREADS
);

33 
sh¨ed
.
fd
 = 
	`O≥n
(
∑th«me
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
FILE_MODE
);

34 
	`Wrôew_lock
(
sh¨ed
.
fd
, 0, 
SEEK_SET
, 0);

37 
	`Së_c⁄cuºícy
(
¡hªads
);

38 
i
 = 0; i < 
¡hªads
; i++) {

39 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

42 
	`Sèπ_time
();

43 
	`Un_lock
(
sh¨ed
.
fd
, 0, 
SEEK_SET
, 0);

46 
i
 = 0; i < 
¡hªads
; i++) {

47 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

49 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

50 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

51 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

52 
	`U∆ök
(
∑th«me
);

54 
	`exô
(0);

55 
	}
}

60 
	$ö¸
(*
¨g
)

62 
i
;

64 
i
 = 0; i < 
∆o›
; i++) {

65 
	`Wrôew_lock
(
sh¨ed
.
fd
, 0, 
SEEK_SET
, 0);

66 
sh¨ed
.
cou¡î
++;

67 
	`Un_lock
(
sh¨ed
.
fd
, 0, 
SEEK_SET
, 0);

69 (
NULL
);

70 
	}
}

	@bench/incr_fcntl5.c

1 
	~"u≈ùc.h
"

3 
	#MAXNPROC
 100

	)

5 
	g∆o›
;

7 
	ssh¨ed
 {

8 
	mfd
;

9 
	mcou¡î
;

10 } *
	gsh¨ed
;

12 *
ö¸
(*);

15 
	$maö
(
¨gc
, **
¨gv
)

17 
i
, 
≈rocs
;

18 *
∑th«me
;

19 
pid_t
 
chûdpid
[
MAXNPROC
];

21 i‡(
¨gc
 != 4)

22 
	`îr_quô
("usage: incr_fcntl5 <pathname> <#loops> <#processes>");

23 
∑th«me
 = 
¨gv
[1];

24 
∆o›
 = 
	`©oi
(
¨gv
[2]);

25 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[3]), 
MAXNPROC
);

28 
sh¨ed
 = 
	`My_shm
((shared));

31 
sh¨ed
->
fd
 = 
	`O≥n
(
∑th«me
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
FILE_MODE
);

32 
	`Wrôew_lock
(
sh¨ed
->
fd
, 0, 
SEEK_SET
, 0);

35 
i
 = 0; i < 
≈rocs
; i++) {

36 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

37 
	`ö¸
(
NULL
);

38 
	`exô
(0);

42 
	`Sèπ_time
();

43 
	`Un_lock
(
sh¨ed
->
fd
, 0, 
SEEK_SET
, 0);

46 
i
 = 0; i < 
≈rocs
; i++) {

47 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

49 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

50 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

51 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

52 
	`U∆ök
(
∑th«me
);

54 
	`exô
(0);

55 
	}
}

60 
	$ö¸
(*
¨g
)

62 
i
;

64 
i
 = 0; i < 
∆o›
; i++) {

65 
	`Wrôew_lock
(
sh¨ed
->
fd
, 0, 
SEEK_SET
, 0);

66 
sh¨ed
->
cou¡î
++;

67 
	`Un_lock
(
sh¨ed
->
fd
, 0, 
SEEK_SET
, 0);

69 (
NULL
);

70 
	}
}

	@bench/incr_pxmutex0.c

2 
	~"u≈ùc.h
"

4 
	#MAXNTHREADS
 100

	)

6 
	g∆o›
;

9 
±hªad_muãx_t
 
	mmuãx
;

10 
	mcou¡î
;

11 } 
	gsh¨ed
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

13 *
ö¸
(*);

16 
	$maö
(
¨gc
, **
¨gv
)

18 
i
, 
¡hªads
;

19 
±hªad_t
 
tid
[
MAXNTHREADS
];

21 i‡(
¨gc
 != 3)

22 
	`îr_quô
("usage: incr_pxmutex0 <#loops> <#threads>");

23 
∆o›
 = 
	`©oi
(
¨gv
[1]);

24 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

27 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

30 
	`Së_c⁄cuºícy
(
¡hªads
);

31 
i
 = 0; i < 
¡hªads
; i++) {

32 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

35 
	`Sèπ_time
();

36 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

39 
i
 = 0; i < 
¡hªads
; i++) {

40 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

42 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

43 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

44 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

46 
	`exô
(0);

47 
	}
}

52 
	$ö¸
(*
¨g
)

54 
i
;

56 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

57 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

58 
i
 = 0; i < 
∆o›
; i++) {

59 
sh¨ed
.
cou¡î
++;

61 (
NULL
);

62 
	}
}

	@bench/incr_pxmutex1.c

2 
	~"u≈ùc.h
"

4 
	#MAXNTHREADS
 100

	)

6 
	g∆o›
;

9 
±hªad_muãx_t
 
	mmuãx
;

10 
	mcou¡î
;

11 } 
	gsh¨ed
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

13 *
ö¸
(*);

16 
	$maö
(
¨gc
, **
¨gv
)

18 
i
, 
¡hªads
;

19 
±hªad_t
 
tid
[
MAXNTHREADS
];

21 i‡(
¨gc
 != 3)

22 
	`îr_quô
("usage: incr_pxmutex1 <#loops> <#threads>");

23 
∆o›
 = 
	`©oi
(
¨gv
[1]);

24 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

27 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

30 
	`Së_c⁄cuºícy
(
¡hªads
);

31 
i
 = 0; i < 
¡hªads
; i++) {

32 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

35 
	`Sèπ_time
();

36 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

39 
i
 = 0; i < 
¡hªads
; i++) {

40 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

42 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

43 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

44 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

46 
	`exô
(0);

47 
	}
}

52 
	$ö¸
(*
¨g
)

54 
i
;

56 
i
 = 0; i < 
∆o›
; i++) {

57 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

58 
sh¨ed
.
cou¡î
++;

59 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

61 (
NULL
);

62 
	}
}

	@bench/incr_pxmutex5.c

2 
	~"u≈ùc.h
"

4 
	#MAXNPROC
 100

	)

6 
	g∆o›
;

8 
	ssh¨ed
 {

9 
±hªad_muãx_t
 
	mmuãx
;

10 
	mcou¡î
;

11 } *
	gsh¨ed
;

13 *
ö¸
(*);

16 
	$maö
(
¨gc
, **
¨gv
)

18 
i
, 
≈rocs
;

19 
pid_t
 
chûdpid
[
MAXNPROC
];

20 
±hªad_muãx©å_t
 
m©å
;

22 i‡(
¨gc
 != 3)

23 
	`îr_quô
("usage: incr_pxmutex5 <#loops> <#processes>");

24 
∆o›
 = 
	`©oi
(
¨gv
[1]);

25 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

28 
sh¨ed
 = 
	`My_shm
((shared));

31 
	`Pthªad_muãx©å_öô
(&
m©å
);

32 
	`Pthªad_muãx©å_£çsh¨ed
(&
m©å
, 
PTHREAD_PROCESS_SHARED
);

33 
	`Pthªad_muãx_öô
(&
sh¨ed
->
muãx
, &
m©å
);

34 
	`Pthªad_muãx©å_de°roy
(&
m©å
);

35 
	`Pthªad_muãx_lock
(&
sh¨ed
->
muãx
);

38 
i
 = 0; i < 
≈rocs
; i++) {

39 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

40 
	`ö¸
(
NULL
);

41 
	`exô
(0);

45 
	`Sèπ_time
();

46 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
->
muãx
);

49 
i
 = 0; i < 
≈rocs
; i++) {

50 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

52 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

53 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

54 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

56 
	`exô
(0);

57 
	}
}

62 
	$ö¸
(*
¨g
)

64 
i
;

66 
i
 = 0; i < 
∆o›
; i++) {

67 
	`Pthªad_muãx_lock
(&
sh¨ed
->
muãx
);

68 
sh¨ed
->
cou¡î
++;

69 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
->
muãx
);

71 (
NULL
);

72 
	}
}

	@bench/incr_pxsem1.c

2 
	~"u≈ùc.h
"

4 
	#MAXNTHREADS
 100

	)

6 
	g∆o›
;

9 
£m_t
 
	mmuãx
;

10 
	mcou¡î
;

11 } 
	gsh¨ed
;

13 *
ö¸
(*);

16 
	$maö
(
¨gc
, **
¨gv
)

18 
i
, 
¡hªads
;

19 
±hªad_t
 
tid
[
MAXNTHREADS
];

21 i‡(
¨gc
 != 3)

22 
	`îr_quô
("usage: incr_pxsem1 <#loops> <#threads>");

23 
∆o›
 = 
	`©oi
(
¨gv
[1]);

24 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

27 
	`Sem_öô
(&
sh¨ed
.
muãx
, 0, 0);

30 
	`Së_c⁄cuºícy
(
¡hªads
);

31 
i
 = 0; i < 
¡hªads
; i++) {

32 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

35 
	`Sèπ_time
();

36 
	`Sem_po°
(&
sh¨ed
.
muãx
);

39 
i
 = 0; i < 
¡hªads
; i++) {

40 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

42 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

43 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

44 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

46 
	`exô
(0);

47 
	}
}

52 
	$ö¸
(*
¨g
)

54 
i
;

56 
i
 = 0; i < 
∆o›
; i++) {

57 
	`Sem_waô
(&
sh¨ed
.
muãx
);

58 
sh¨ed
.
cou¡î
++;

59 
	`Sem_po°
(&
sh¨ed
.
muãx
);

61 (
NULL
);

62 
	}
}

	@bench/incr_pxsem2.c

2 
	~"u≈ùc.h
"

4 
	#MAXNTHREADS
 100

	)

5 
	#NAME
 "ö¸_px£m2"

	)

7 
	g∆o›
;

10 
£m_t
 *
	mmuãx
;

11 
	mcou¡î
;

12 } 
	gsh¨ed
;

14 *
ö¸
(*);

17 
	$maö
(
¨gc
, **
¨gv
)

19 
i
, 
¡hªads
;

20 
±hªad_t
 
tid
[
MAXNTHREADS
];

22 i‡(
¨gc
 != 3)

23 
	`îr_quô
("usage: incr_pxsem2 <#loops> <#threads>");

24 
∆o›
 = 
	`©oi
(
¨gv
[1]);

25 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

28 
	`£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

29 
sh¨ed
.
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 0);

32 
	`Së_c⁄cuºícy
(
¡hªads
);

33 
i
 = 0; i < 
¡hªads
; i++) {

34 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

37 
	`Sèπ_time
();

38 
	`Sem_po°
(
sh¨ed
.
muãx
);

41 
i
 = 0; i < 
¡hªads
; i++) {

42 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

44 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

45 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

46 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

47 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
NAME
));

49 
	`exô
(0);

50 
	}
}

55 
	$ö¸
(*
¨g
)

57 
i
;

59 
i
 = 0; i < 
∆o›
; i++) {

60 
	`Sem_waô
(
sh¨ed
.
muãx
);

61 
sh¨ed
.
cou¡î
++;

62 
	`Sem_po°
(
sh¨ed
.
muãx
);

64 (
NULL
);

65 
	}
}

	@bench/incr_pxsem5.c

2 
	~"u≈ùc.h
"

4 
	#MAXNPROC
 100

	)

6 
	g∆o›
;

8 
	ssh¨ed
 {

9 
£m_t
 
	mmuãx
;

10 
	mcou¡î
;

11 } *
	gsh¨ed
;

13 *
ö¸
(*);

16 
	$maö
(
¨gc
, **
¨gv
)

18 
i
, 
≈rocs
;

19 
pid_t
 
chûdpid
[
MAXNPROC
];

21 i‡(
¨gc
 != 3)

22 
	`îr_quô
("usage: incr_pxsem5 <#loops> <#processes>");

23 
∆o›
 = 
	`©oi
(
¨gv
[1]);

24 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

27 
sh¨ed
 = 
	`My_shm
((shared));

30 
	`Sem_öô
(&
sh¨ed
->
muãx
, 1, 0);

33 
i
 = 0; i < 
≈rocs
; i++) {

34 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

35 
	`ö¸
(
NULL
);

36 
	`exô
(0);

40 
	`Sèπ_time
();

41 
	`Sem_po°
(&
sh¨ed
->
muãx
);

44 
i
 = 0; i < 
≈rocs
; i++) {

45 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

47 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

48 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

49 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

51 
	`exô
(0);

52 
	}
}

57 
	$ö¸
(*
¨g
)

59 
i
;

61 
i
 = 0; i < 
∆o›
; i++) {

62 
	`Sem_waô
(&
sh¨ed
->
muãx
);

63 
sh¨ed
->
cou¡î
++;

64 
	`Sem_po°
(&
sh¨ed
->
muãx
);

66 (
NULL
);

67 
	}
}

	@bench/incr_pxsem6.c

2 
	~"u≈ùc.h
"

4 
	#MAXNPROC
 100

	)

5 
	#NAME
 "ö¸_px£m6"

	)

7 
	g∆o›
;

9 
	ssh¨ed
 {

10 
£m_t
 *
	mmuãx
;

11 
	mcou¡î
;

12 } *
	gsh¨ed
;

14 *
ö¸
(*);

17 
	$maö
(
¨gc
, **
¨gv
)

19 
i
, 
≈rocs
;

20 
pid_t
 
chûdpid
[
MAXNPROC
];

22 i‡(
¨gc
 != 3)

23 
	`îr_quô
("usage: incr_pxsem6 <#loops> <#processes>");

24 
∆o›
 = 
	`©oi
(
¨gv
[1]);

25 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

28 
sh¨ed
 = 
	`My_shm
((shared));

31 
	`£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

32 
sh¨ed
->
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 0);

35 
i
 = 0; i < 
≈rocs
; i++) {

36 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

37 
	`ö¸
(
NULL
);

38 
	`exô
(0);

42 
	`Sèπ_time
();

43 
	`Sem_po°
(
sh¨ed
->
muãx
);

46 
i
 = 0; i < 
≈rocs
; i++) {

47 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

49 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

50 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

51 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

52 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
NAME
));

54 
	`exô
(0);

55 
	}
}

60 
	$ö¸
(*
¨g
)

62 
i
;

64 
i
 = 0; i < 
∆o›
; i++) {

65 
	`Sem_waô
(
sh¨ed
->
muãx
);

66 
sh¨ed
->
cou¡î
++;

67 
	`Sem_po°
(
sh¨ed
->
muãx
);

69 (
NULL
);

70 
	}
}

	@bench/incr_pxsem7.c

4 
	~"u≈ùc.h
"

6 
	#MAXNPROC
 100

	)

7 
	#NAME
 "ö¸_px£m7"

	)

9 
	g∆o›
;

11 
	ssh¨ed
 {

12 
	mcou¡î
;

13 } *
	gsh¨ed
;

15 
£m_t
 *
	gmuãx
;

17 *
ö¸
(*);

20 
	$maö
(
¨gc
, **
¨gv
)

22 
i
, 
≈rocs
;

23 
pid_t
 
chûdpid
[
MAXNPROC
];

25 i‡(
¨gc
 != 3)

26 
	`îr_quô
("usage: incr_pxsem7 <#loops> <#processes>");

27 
∆o›
 = 
	`©oi
(
¨gv
[1]);

28 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

31 
sh¨ed
 = 
	`My_shm
((shared));

34 
	`£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

35 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 0);

38 
i
 = 0; i < 
≈rocs
; i++) {

39 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

40 
	`ö¸
(
NULL
);

41 
	`exô
(0);

45 
	`Sèπ_time
();

46 
	`Sem_po°
(
muãx
);

49 
i
 = 0; i < 
≈rocs
; i++) {

50 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

52 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

53 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

54 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

55 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
NAME
));

57 
	`exô
(0);

58 
	}
}

63 
	$ö¸
(*
¨g
)

65 
i
;

67 
i
 = 0; i < 
∆o›
; i++) {

68 
	`Sem_waô
(
muãx
);

69 
sh¨ed
->
cou¡î
++;

70 
	`Sem_po°
(
muãx
);

72 (
NULL
);

73 
	}
}

	@bench/incr_pxsem8.c

4 
	~"u≈ùc.h
"

6 
	#MAXNPROC
 100

	)

7 
	#NAME
 "ö¸_px£m8"

	)

9 
	g∆o›
;

11 
	ssh¨ed
 {

12 
	mcou¡î
;

13 } *
	gsh¨ed
;

15 
£m_t
 *
	gpmuãx
, *
	gcmuãx
;

17 *
ö¸
(*);

20 
	$maö
(
¨gc
, **
¨gv
)

22 
i
, 
≈rocs
;

23 
pid_t
 
chûdpid
[
MAXNPROC
];

25 i‡(
¨gc
 != 3)

26 
	`îr_quô
("usage: incr_pxsem8 <#loops> <#processes>");

27 
∆o›
 = 
	`©oi
(
¨gv
[1]);

28 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

31 
sh¨ed
 = 
	`My_shm
((shared));

34 
	`£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

35 
pmuãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 0);

38 
i
 = 0; i < 
≈rocs
; i++) {

39 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

40 
	`Sem_˛o£
(
pmuãx
);

41 
cmuãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
NAME
), 0);

42 
	`ö¸
(
NULL
);

43 
	`exô
(0);

47 
	`Sèπ_time
();

48 
	`Sem_po°
(
pmuãx
);

51 
i
 = 0; i < 
≈rocs
; i++) {

52 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

54 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

55 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

56 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

57 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
NAME
));

59 
	`exô
(0);

60 
	}
}

65 
	$ö¸
(*
¨g
)

67 
i
;

69 
i
 = 0; i < 
∆o›
; i++) {

70 
	`Sem_waô
(
cmuãx
);

71 
sh¨ed
->
cou¡î
++;

72 
	`Sem_po°
(
cmuãx
);

74 (
NULL
);

75 
	}
}

	@bench/incr_pxsem9.c

4 
	~"u≈ùc.h
"

6 
	#MAXNPROC
 100

	)

8 
	g∆o›
;

10 
	ssh¨ed
 {

11 
	mcou¡î
;

12 } *
	gsh¨ed
;

14 
£m_t
 
	gmuãx
;

16 *
ö¸
(*);

19 
	$maö
(
¨gc
, **
¨gv
)

21 
i
, 
≈rocs
;

22 
pid_t
 
chûdpid
[
MAXNPROC
];

24 i‡(
¨gc
 != 3)

25 
	`îr_quô
("usage: incr_pxsem9 <#loops> <#processes>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

27 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

30 
sh¨ed
 = 
	`My_shm
((shared));

33 
	`Sem_öô
(&
muãx
, 1, 0);

36 
i
 = 0; i < 
≈rocs
; i++) {

37 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

38 
	`ö¸
(
NULL
);

39 
	`exô
(0);

43 
	`Sèπ_time
();

44 
	`Sem_po°
(&
muãx
);

47 
i
 = 0; i < 
≈rocs
; i++) {

48 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

50 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

51 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

52 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

54 
	`exô
(0);

55 
	}
}

60 
	$ö¸
(*
¨g
)

62 
i
;

64 
i
 = 0; i < 
∆o›
; i++) {

65 
	`Sem_waô
(&
muãx
);

66 
sh¨ed
->
cou¡î
++;

67 
	`Sem_po°
(&
muãx
);

69 (
NULL
);

70 
	}
}

	@bench/incr_rwlock1.c

2 
	~"u≈ùc.h
"

3 
	~<synch.h
>

5 
Rw_wæock
(
rwlock_t
 *
rw±r
);

6 
Rw_u∆ock
(
rwlock_t
 *
rw±r
);

8 
	#MAXNTHREADS
 100

	)

10 
	g∆o›
;

13 
rwlock_t
 
	mrwlock
;

14 
	mcou¡î
;

15 } 
	gsh¨ed
;

17 *
ö¸
(*);

20 
	$maö
(
¨gc
, **
¨gv
)

22 
i
, 
¡hªads
;

23 
±hªad_t
 
tid
[
MAXNTHREADS
];

25 i‡(
¨gc
 != 3)

26 
	`îr_quô
("usage: incr_rwlock1 <#loops> <#threads>");

27 
∆o›
 = 
	`©oi
(
¨gv
[1]);

28 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

31 
	`Rw_wæock
(&
sh¨ed
.
rwlock
);

34 
	`Së_c⁄cuºícy
(
¡hªads
);

35 
i
 = 0; i < 
¡hªads
; i++) {

36 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

39 
	`Sèπ_time
();

40 
	`Rw_u∆ock
(&
sh¨ed
.
rwlock
);

43 
i
 = 0; i < 
¡hªads
; i++) {

44 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

46 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

47 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

48 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

50 
	`exô
(0);

51 
	}
}

56 
	$ö¸
(*
¨g
)

58 
i
;

60 
i
 = 0; i < 
∆o›
; i++) {

61 
	`Rw_wæock
(&
sh¨ed
.
rwlock
);

62 
sh¨ed
.
cou¡î
++;

63 
	`Rw_u∆ock
(&
sh¨ed
.
rwlock
);

65 (
NULL
);

66 
	}
}

70 
	$Rw_wæock
(
rwlock_t
 *
rw±r
)

72 
n
;

74 i‡–(
n
 = 
	`rw_wæock
(
rw±r
)) == 0)

76 
î∫o
 = 
n
;

77 
	`îr_sys
("rw_wrlockÉrror");

78 
	}
}

81 
	$Rw_u∆ock
(
rwlock_t
 *
rw±r
)

83 
n
;

85 i‡–(
n
 = 
	`rw_u∆ock
(
rw±r
)) == 0)

87 
î∫o
 = 
n
;

88 
	`îr_sys
("rw_unlockÉrror");

89 
	}
}

	@bench/incr_rwlock2.c

2 
	~"u≈ùc.h
"

3 
	~<tis.h
>

5 
Rw_öô
(
tis_rwlock_t
 *
rw±r
);

6 
Rw_wæock
(
tis_rwlock_t
 *
rw±r
);

7 
Rw_u∆ock
(
tis_rwlock_t
 *
rw±r
);

9 
	#MAXNTHREADS
 100

	)

11 
	g∆o›
;

14 
tis_rwlock_t
 
	mrwlock
;

15 
	mcou¡î
;

16 } 
	gsh¨ed
;

18 *
ö¸
(*);

21 
	$maö
(
¨gc
, **
¨gv
)

23 
i
, 
¡hªads
;

24 
±hªad_t
 
tid
[
MAXNTHREADS
];

26 i‡(
¨gc
 != 3)

27 
	`îr_quô
("usage: incr_rwlock2 <#loops> <#threads>");

28 
∆o›
 = 
	`©oi
(
¨gv
[1]);

29 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

32 
	`Rw_öô
(&
sh¨ed
.
rwlock
);

33 
	`Rw_wæock
(&
sh¨ed
.
rwlock
);

36 
	`Së_c⁄cuºícy
(
¡hªads
);

37 
i
 = 0; i < 
¡hªads
; i++) {

38 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

41 
	`Sèπ_time
();

42 
	`Rw_u∆ock
(&
sh¨ed
.
rwlock
);

45 
i
 = 0; i < 
¡hªads
; i++) {

46 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

48 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

49 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

50 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

52 
	`exô
(0);

53 
	}
}

58 
	$ö¸
(*
¨g
)

60 
i
;

62 
i
 = 0; i < 
∆o›
; i++) {

63 
	`Rw_wæock
(&
sh¨ed
.
rwlock
);

64 
sh¨ed
.
cou¡î
++;

65 
	`Rw_u∆ock
(&
sh¨ed
.
rwlock
);

67 (
NULL
);

68 
	}
}

72 
	$Rw_öô
(
tis_rwlock_t
 *
rw±r
)

74 
n
;

76 i‡–(
n
 = 
	`tis_rwlock_öô
(
rw±r
)) == 0)

78 
î∫o
 = 
n
;

79 
	`îr_sys
("tis_rwlock_initÉrror");

80 
	}
}

83 
	$Rw_wæock
(
tis_rwlock_t
 *
rw±r
)

85 
n
;

87 i‡–(
n
 = 
	`tis_wrôe_lock
(
rw±r
)) == 0)

89 
î∫o
 = 
n
;

90 
	`îr_sys
("tis_write_lockÉrror");

91 
	}
}

94 
	$Rw_u∆ock
(
tis_rwlock_t
 *
rw±r
)

96 
n
;

98 i‡–(
n
 = 
	`tis_wrôe_u∆ock
(
rw±r
)) == 0)

100 
î∫o
 = 
n
;

101 
	`îr_sys
("tis_write_unlockÉrror");

102 
	}
}

	@bench/incr_rwlock5.c

2 
	~"u≈ùc.h
"

3 
	~<synch.h
>

5 
Rw_wæock
(
rwlock_t
 *
rw±r
);

6 
Rw_u∆ock
(
rwlock_t
 *
rw±r
);

7 
Rwlock_öô
(
rwlock_t
 *
rw±r
, 
ty≥
, *
¨g
);

9 
	#MAXNPROC
 100

	)

11 
	g∆o›
;

13 
	ssh¨ed
 {

14 
rwlock_t
 
	mrwlock
;

15 
	mcou¡î
;

16 } *
	gsh¨ed
;

18 *
ö¸
(*);

21 
	$maö
(
¨gc
, **
¨gv
)

23 
i
, 
≈rocs
;

24 
pid_t
 
chûdpid
[
MAXNPROC
];

26 i‡(
¨gc
 != 3)

27 
	`îr_quô
("usage: incr_rwlock5 <#loops> <#processes>");

28 
∆o›
 = 
	`©oi
(
¨gv
[1]);

29 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

32 
sh¨ed
 = 
	`My_shm
((shared));

35 
	`Rwlock_öô
(&
sh¨ed
->
rwlock
, 
USYNC_PROCESS
, 
NULL
);

36 
	`Rw_wæock
(&
sh¨ed
->
rwlock
);

39 
i
 = 0; i < 
≈rocs
; i++) {

40 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

41 
	`ö¸
(
NULL
);

42 
	`exô
(0);

46 
	`Sèπ_time
();

47 
	`Rw_u∆ock
(&
sh¨ed
->
rwlock
);

50 
i
 = 0; i < 
≈rocs
; i++) {

51 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

53 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

54 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

55 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

57 
	`exô
(0);

58 
	}
}

63 
	$ö¸
(*
¨g
)

65 
i
;

67 
i
 = 0; i < 
∆o›
; i++) {

68 
	`Rw_wæock
(&
sh¨ed
->
rwlock
);

69 
sh¨ed
->
cou¡î
++;

70 
	`Rw_u∆ock
(&
sh¨ed
->
rwlock
);

72 (
NULL
);

73 
	}
}

77 
	$Rw_wæock
(
rwlock_t
 *
rw±r
)

79 
n
;

81 i‡–(
n
 = 
	`rw_wæock
(
rw±r
)) == 0)

83 
î∫o
 = 
n
;

84 
	`îr_sys
("rw_wrlockÉrror");

85 
	}
}

88 
	$Rw_u∆ock
(
rwlock_t
 *
rw±r
)

90 
n
;

92 i‡–(
n
 = 
	`rw_u∆ock
(
rw±r
)) == 0)

94 
î∫o
 = 
n
;

95 
	`îr_sys
("rw_unlockÉrror");

96 
	}
}

99 
	$Rwlock_öô
(
rwlock_t
 *
rw±r
, 
ty≥
, *
¨g
)

101 
n
;

103 i‡–(
n
 = 
	`rwlock_öô
(
rw±r
, 
ty≥
, 
¨g
)) == 0)

105 
î∫o
 = 
n
;

106 
	`îr_sys
("rwlock_initÉrror");

107 
	}
}

	@bench/incr_svsem1.c

2 
	~"u≈ùc.h
"

4 
	#MAXNTHREADS
 100

	)

6 
	g∆o›
;

9 
	m£mid
;

10 
	mcou¡î
;

11 } 
	gsh¨ed
;

13 
£mbuf
 
	gpo°›
, 
	gwaô›
;

15 *
ö¸
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
¡hªads
;

21 
±hªad_t
 
tid
[
MAXNTHREADS
];

22 
£mun
 
¨g
;

24 i‡(
¨gc
 != 3)

25 
	`îr_quô
("usage: incr_svsem1 <#loops> <#threads>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

27 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

30 
sh¨ed
.
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 1, 
IPC_CREAT
 | 
SVSEM_MODE
);

31 
¨g
.
vÆ
 = 0;

32 
	`Sem˘l
(
sh¨ed
.
£mid
, 0, 
SETVAL
, 
¨g
);

33 
po°›
.
£m_num
 = 0;

34 
po°›
.
£m_›
 = 1;

35 
po°›
.
£m_Êg
 = 0;

36 
waô›
.
£m_num
 = 0;

37 
waô›
.
£m_›
 = -1;

38 
waô›
.
£m_Êg
 = 0;

41 
	`Së_c⁄cuºícy
(
¡hªads
);

42 
i
 = 0; i < 
¡hªads
; i++) {

43 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

46 
	`Sèπ_time
();

47 
	`Sem›
(
sh¨ed
.
£mid
, &
po°›
, 1);

50 
i
 = 0; i < 
¡hªads
; i++) {

51 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

53 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

54 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

55 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

56 
	`Sem˘l
(
sh¨ed
.
£mid
, 0, 
IPC_RMID
);

58 
	`exô
(0);

59 
	}
}

64 
	$ö¸
(*
¨g
)

66 
i
;

68 
i
 = 0; i < 
∆o›
; i++) {

69 
	`Sem›
(
sh¨ed
.
£mid
, &
waô›
, 1);

70 
sh¨ed
.
cou¡î
++;

71 
	`Sem›
(
sh¨ed
.
£mid
, &
po°›
, 1);

73 (
NULL
);

74 
	}
}

	@bench/incr_svsem2.c

2 
	~"u≈ùc.h
"

4 
	#MAXNTHREADS
 100

	)

6 
	g∆o›
;

9 
	m£mid
;

10 
	mcou¡î
;

11 } 
	gsh¨ed
;

13 
£mbuf
 
	gpo°›
, 
	gwaô›
;

15 *
ö¸
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
¡hªads
;

21 
±hªad_t
 
tid
[
MAXNTHREADS
];

22 
£mun
 
¨g
;

24 i‡(
¨gc
 != 3)

25 
	`îr_quô
("usage: incr_svsem2 <#loops> <#threads>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

27 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

30 
sh¨ed
.
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 1, 
IPC_CREAT
 | 
SVSEM_MODE
);

31 
¨g
.
vÆ
 = 0;

32 
	`Sem˘l
(
sh¨ed
.
£mid
, 0, 
SETVAL
, 
¨g
);

33 
po°›
.
£m_num
 = 0;

34 
po°›
.
£m_›
 = 1;

35 
po°›
.
£m_Êg
 = 
SEM_UNDO
;

36 
waô›
.
£m_num
 = 0;

37 
waô›
.
£m_›
 = -1;

38 
waô›
.
£m_Êg
 = 
SEM_UNDO
;

41 
	`Së_c⁄cuºícy
(
¡hªads
);

42 
i
 = 0; i < 
¡hªads
; i++) {

43 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

46 
	`Sèπ_time
();

47 
	`Sem›
(
sh¨ed
.
£mid
, &
po°›
, 1);

50 
i
 = 0; i < 
¡hªads
; i++) {

51 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

53 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

54 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

55 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

56 
	`Sem˘l
(
sh¨ed
.
£mid
, 0, 
IPC_RMID
);

58 
	`exô
(0);

59 
	}
}

64 
	$ö¸
(*
¨g
)

66 
i
;

68 
i
 = 0; i < 
∆o›
; i++) {

69 
	`Sem›
(
sh¨ed
.
£mid
, &
waô›
, 1);

70 
sh¨ed
.
cou¡î
++;

71 
	`Sem›
(
sh¨ed
.
£mid
, &
po°›
, 1);

73 (
NULL
);

74 
	}
}

	@bench/incr_svsem5.c

2 
	~"u≈ùc.h
"

4 
	#MAXNPROC
 100

	)

6 
	g∆o›
;

8 
	ssh¨ed
 {

9 
	m£mid
;

10 
	mcou¡î
;

11 } *
	gsh¨ed
;

13 
£mbuf
 
	gpo°›
, 
	gwaô›
;

15 *
ö¸
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
≈rocs
;

21 
pid_t
 
chûdpid
[
MAXNPROC
];

22 
£mun
 
¨g
;

24 i‡(
¨gc
 != 3)

25 
	`îr_quô
("usage: incr_svsem5 <#loops> <#processes>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

27 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

30 
sh¨ed
 = 
	`My_shm
((shared));

33 
sh¨ed
->
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 1, 
IPC_CREAT
 | 
SVSEM_MODE
);

34 
¨g
.
vÆ
 = 0;

35 
	`Sem˘l
(
sh¨ed
->
£mid
, 0, 
SETVAL
, 
¨g
);

36 
po°›
.
£m_num
 = 0;

37 
po°›
.
£m_›
 = 1;

38 
po°›
.
£m_Êg
 = 0;

39 
waô›
.
£m_num
 = 0;

40 
waô›
.
£m_›
 = -1;

41 
waô›
.
£m_Êg
 = 0;

44 
i
 = 0; i < 
≈rocs
; i++) {

45 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

46 
	`ö¸
(
NULL
);

47 
	`exô
(0);

51 
	`Sèπ_time
();

52 
	`Sem›
(
sh¨ed
->
£mid
, &
po°›
, 1);

55 
i
 = 0; i < 
≈rocs
; i++) {

56 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

58 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

59 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

60 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

61 
	`Sem˘l
(
sh¨ed
->
£mid
, 0, 
IPC_RMID
);

63 
	`exô
(0);

64 
	}
}

69 
	$ö¸
(*
¨g
)

71 
i
;

73 
i
 = 0; i < 
∆o›
; i++) {

74 
	`Sem›
(
sh¨ed
->
£mid
, &
waô›
, 1);

75 
sh¨ed
->
cou¡î
++;

76 
	`Sem›
(
sh¨ed
->
£mid
, &
po°›
, 1);

78 (
NULL
);

79 
	}
}

	@bench/incr_svsem6.c

2 
	~"u≈ùc.h
"

4 
	#MAXNPROC
 100

	)

6 
	g∆o›
;

8 
	ssh¨ed
 {

9 
	m£mid
;

10 
	mcou¡î
;

11 } *
	gsh¨ed
;

13 
£mbuf
 
	gpo°›
, 
	gwaô›
;

15 *
ö¸
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
≈rocs
;

21 
pid_t
 
chûdpid
[
MAXNPROC
];

22 
£mun
 
¨g
;

24 i‡(
¨gc
 != 3)

25 
	`îr_quô
("usage: incr_svsem6 <#loops> <#processes>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

27 
≈rocs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNPROC
);

30 
sh¨ed
 = 
	`My_shm
((shared));

33 
sh¨ed
->
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 1, 
IPC_CREAT
 | 
SVSEM_MODE
);

34 
¨g
.
vÆ
 = 0;

35 
	`Sem˘l
(
sh¨ed
->
£mid
, 0, 
SETVAL
, 
¨g
);

36 
po°›
.
£m_num
 = 0;

37 
po°›
.
£m_›
 = 1;

38 
po°›
.
£m_Êg
 = 
SEM_UNDO
;

39 
waô›
.
£m_num
 = 0;

40 
waô›
.
£m_›
 = -1;

41 
waô›
.
£m_Êg
 = 
SEM_UNDO
;

44 
i
 = 0; i < 
≈rocs
; i++) {

45 i‡–(
chûdpid
[
i
] = 
	`F‹k
()) == 0) {

46 
	`ö¸
(
NULL
);

47 
	`exô
(0);

51 
	`Sèπ_time
();

52 
	`Sem›
(
sh¨ed
->
£mid
, &
po°›
, 1);

55 
i
 = 0; i < 
≈rocs
; i++) {

56 
	`Waôpid
(
chûdpid
[
i
], 
NULL
, 0);

58 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

59 i‡(
sh¨ed
->
cou¡î
 !
∆o›
 * 
≈rocs
)

60 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
->
cou¡î
);

61 
	`Sem˘l
(
sh¨ed
->
£mid
, 0, 
IPC_RMID
);

63 
	`exô
(0);

64 
	}
}

69 
	$ö¸
(*
¨g
)

71 
i
;

73 
i
 = 0; i < 
∆o›
; i++) {

74 
	`Sem›
(
sh¨ed
->
£mid
, &
waô›
, 1);

75 
sh¨ed
->
cou¡î
++;

76 
	`Sem›
(
sh¨ed
->
£mid
, &
po°›
, 1);

78 (
NULL
);

79 
	}
}

	@bench/lat_door.c

2 
	~"u≈ùc.h
"

5 
	$£rvî
(*
cookõ
, *
¨gp
, 
size_t
 
¨g_size
,

6 
do‹_desc_t
 *
dp
, 
size_t
 
n_des¸ùt‹s
)

8 
c
;

10 
	`Do‹_ªtu∫
(&
c
, (), 
NULL
, 0);

11 
	}
}

14 
	$maö
(
¨gc
, **
¨gv
)

16 
i
, 
∆o›
, 
do‹fd
, 
c⁄çùe
[2];

17 
c
;

18 
pid_t
 
chûdpid
;

19 
do‹_¨g_t
 
¨g
;

21 i‡(
¨gc
 != 3)

22 
	`îr_quô
("usage:Üat_door <pathname> <#loops>");

23 
∆o›
 = 
	`©oi
(
¨gv
[2]);

25 
	`u∆ök
(
¨gv
[1]);

26 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
));

27 
	`Pùe
(
c⁄çùe
);

29 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

30 
do‹fd
 = 
	`Do‹_¸óã
(
£rvî
, 
NULL
, 0);

31 
	`F©èch
(
do‹fd
, 
¨gv
[1]);

32 
	`Wrôe
(
c⁄çùe
[1], &
c
, 1);

35 
	`∑u£
();

36 
	`exô
(0);

38 
¨g
.
d©a_±r
 = &
c
;

39 
¨g
.
d©a_size
 = ();

40 
¨g
.
desc_±r
 = 
NULL
;

41 
¨g
.
desc_num
 = 0;

42 
¨g
.
rbuf
 = &
c
;

43 
¨g
.
rsize
 = ();

45 i‡(
	`Ród
(
c⁄çùe
[0], &
c
, 1) != 1)

46 
	`îr_quô
("pipeÑeadÉrror");

47 
do‹fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

48 
	`Do‹_ˇŒ
(
do‹fd
, &
¨g
);

50 
	`Sèπ_time
();

51 
i
 = 0; i < 
∆o›
; i++)

52 
	`Do‹_ˇŒ
(
do‹fd
, &
¨g
);

53 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

55 
	`Kûl
(
chûdpid
, 
SIGTERM
);

56 
	`u∆ök
(
¨gv
[1]);

57 
	`exô
(0);

58 
	}
}

	@bench/lat_pipe.c

2 
	~"u≈ùc.h
"

5 
	$doô
(
ªadfd
, 
wrôefd
)

7 
c
;

9 
	`Wrôe
(
wrôefd
, &
c
, 1);

10 i‡(
	`Ród
(
ªadfd
, &
c
, 1) != 1)

11 
	`îr_quô
("readÉrror");

12 
	}
}

15 
	$maö
(
¨gc
, **
¨gv
)

17 
i
, 
∆o›
, 
pùe1
[2], 
pùe2
[2];

18 
c
;

19 
pid_t
 
chûdpid
;

21 i‡(
¨gc
 != 2)

22 
	`îr_quô
("usage:Üat_pipe <#loops>");

23 
∆o›
 = 
	`©oi
(
¨gv
[1]);

25 
	`Pùe
(
pùe1
);

26 
	`Pùe
(
pùe2
);

28 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

30 i‡(
	`Ród
(
pùe1
[0], &
c
, 1) != 1)

31 
	`îr_quô
("readÉrror");

32 
	`Wrôe
(
pùe2
[1], &
c
, 1);

34 
	`exô
(0);

37 
	`doô
(
pùe2
[0], 
pùe1
[1]);

39 
	`Sèπ_time
();

40 
i
 = 0; i < 
∆o›
; i++)

41 
	`doô
(
pùe2
[0], 
pùe1
[1]);

42 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

44 
	`Kûl
(
chûdpid
, 
SIGTERM
);

45 
	`exô
(0);

46 
	}
}

	@bench/lat_pxmsg.c

2 
	~"u≈ùc.h
"

3 
	#NAME1
 "œt_pxmsg1"

	)

4 
	#NAME2
 "œt_pxmsg2"

	)

5 
	#MAXMSG
 4

	)

6 
	#MSGSIZE
 1024

	)

9 
	$doô
(
mqd_t
 
mq£nd
, mqd_à
mqªcv
)

11 
buff
[
MSGSIZE
];

13 
	`Mq_£nd
(
mq£nd
, 
buff
, 1, 0);

14 i‡(
	`Mq_ª˚ive
(
mqªcv
, 
buff
, 
MSGSIZE
, 
NULL
) != 1)

15 
	`îr_quô
("mq_receiveÉrror");

16 
	}
}

19 
	$maö
(
¨gc
, **
¨gv
)

21 
i
, 
∆o›
;

22 
mqd_t
 
mq1
, 
mq2
;

23 
buff
[
MSGSIZE
];

24 
pid_t
 
chûdpid
;

25 
mq_©å
 
©å
;

27 i‡(
¨gc
 != 2)

28 
	`îr_quô
("usage:Üat_pxmsg <#loops>");

29 
∆o›
 = 
	`©oi
(
¨gv
[1]);

31 
©å
.
mq_maxmsg
 = 
MAXMSG
;

32 
©å
.
mq_msgsize
 = 
MSGSIZE
;

33 
mq1
 = 
	`Mq_›í
(
	`Px_ùc_«me
(
NAME1
), 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
, &
©å
);

34 
mq2
 = 
	`Mq_›í
(
	`Px_ùc_«me
(
NAME2
), 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
, &
©å
);

36 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

38 i‡(
	`Mq_ª˚ive
(
mq1
, 
buff
, 
MSGSIZE
, 
NULL
) != 1)

39 
	`îr_quô
("mq_receiveÉrror");

40 
	`Mq_£nd
(
mq2
, 
buff
, 1, 0);

42 
	`exô
(0);

45 
	`doô
(
mq1
, 
mq2
);

47 
	`Sèπ_time
();

48 
i
 = 0; i < 
∆o›
; i++)

49 
	`doô
(
mq1
, 
mq2
);

50 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

52 
	`Kûl
(
chûdpid
, 
SIGTERM
);

53 
	`Mq_˛o£
(
mq1
);

54 
	`Mq_˛o£
(
mq2
);

55 
	`Mq_u∆ök
(
	`Px_ùc_«me
(
NAME1
));

56 
	`Mq_u∆ök
(
	`Px_ùc_«me
(
NAME2
));

57 
	`exô
(0);

58 
	}
}

	@bench/lat_signal.c

1 
	~"u≈ùc.h
"

3 
	gcou¡î
, 
	g∆o›
;

4 
pid_t
 
	gchûdpid
, 
	g∑ª¡pid
;

7 
	$sig_u§1
(
signo
)

9 
	`Kûl
(
∑ª¡pid
, 
SIGUSR2
);

11 
	}
}

14 
	$sig_u§2
(
signo
)

16 i‡(++
cou¡î
 < 
∆o›
)

17 
	`Kûl
(
chûdpid
, 
SIGUSR1
);

19 
	`Kûl
(
∑ª¡pid
, 
SIGTERM
);

21 
	}
}

24 
	$sig_ãrm
(
signo
)

26 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

27 
	`Kûl
(
chûdpid
, 
SIGTERM
);

28 
	`exô
(0);

29 
	}
}

32 
	$maö
(
¨gc
, **
¨gv
)

35 i‡(
¨gc
 != 2)

36 
	`îr_quô
("usage:Üat_signal <#loops>");

37 
∆o›
 = 
	`©oi
(
¨gv
[1]);

38 
cou¡î
 = 0;

40 
∑ª¡pid
 = 
	`gëpid
();

41 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

42 
	`Sig«l
(
SIGUSR2
, 
sig_u§2
);

43 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

45 
	`∑u£
();

47 
	`exô
(0);

50 
	`Sig«l
(
SIGTERM
, 
sig_ãrm
);

51 
	`Sèπ_time
();

52 
	`Kûl
(
chûdpid
, 
SIGUSR1
);

54 
	`∑u£
();

55 
	}
}

	@bench/lat_sigqueue.c

1 
	~"u≈ùc.h
"

3 #ifdef 
HAVE_SIGWAIT


5 
	$Sigwaôöfo
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
)

7 
signo
;

9 i‡–(
signo
 = 
	`sigwaôöfo
(
£t
, 
öfo
)) != -1)

10  (
signo
);

11 
	`îr_sys
("sigwaôöfÿîr‹,Öid = %ld", (Ë
	`gëpid
());

12 
	}
}

16 
	$maö
(
¨gc
, **
¨gv
)

18 
i
, 
∆o›
;

19 
pid_t
 
chûdpid
, 
∑ª¡pid
;

20 
sig£t_t
 
√wmask
;

21 
sigöfo_t
 
sigöfo
;

22 
sigvÆ
 
vÆ
;

24 i‡(
¨gc
 != 2)

25 
	`îr_quô
("usage:Üat_sigqueue <#loops>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

28 
	`Sigem±y£t
(&
√wmask
);

29 
	`Sigadd£t
(&
√wmask
, 
SIGRTMIN
);

30 
	`Sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, 
NULL
);

32 
∑ª¡pid
 = 
	`gëpid
();

33 
vÆ
.
sivÆ_öt
 = 0;

34 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

35 
i
 = 0; i < 
∆o›
; i++) {

36 
	`Sigwaôöfo
(&
√wmask
, &
sigöfo
);

37 
	`Sigqueue
(
∑ª¡pid
, 
SIGRTMIN
, 
vÆ
);

39 
	`exô
(0);

42 
	`Sèπ_time
();

43 
i
 = 0; i < 
∆o›
; i++) {

44 
	`Sigqueue
(
chûdpid
, 
SIGRTMIN
, 
vÆ
);

45 
	`Sigwaôöfo
(&
√wmask
, &
sigöfo
);

47 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

48 
	`exô
(0);

49 
	}
}

	@bench/lat_sigwait.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
∆o›
, 
signo
;

7 
pid_t
 
chûdpid
, 
∑ª¡pid
;

8 
sig£t_t
 
√wmask
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage:Üat_sigwait <#loops>");

12 
∆o›
 = 
	`©oi
(
¨gv
[1]);

14 
	`Sigem±y£t
(&
√wmask
);

15 
	`Sigadd£t
(&
√wmask
, 
SIGUSR1
);

16 
	`Sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, 
NULL
);

18 
∑ª¡pid
 = 
	`gëpid
();

19 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

20 
i
 = 0; i < 
∆o›
; i++) {

21 
	`Sigwaô
(&
√wmask
, &
signo
);

22 
	`Kûl
(
∑ª¡pid
, 
SIGUSR1
);

24 
	`exô
(0);

27 
	`Sèπ_time
();

28 
i
 = 0; i < 
∆o›
; i++) {

29 
	`Kûl
(
chûdpid
, 
SIGUSR1
);

30 
	`Sigwaô
(&
√wmask
, &
signo
);

32 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

33 
	`exô
(0);

34 
	}
}

	@bench/lat_sunrpc.h

6 #i‚de‡
_LAT_SUNRPC_H_RPCGEN


7 
	#_LAT_SUNRPC_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


15 
	#DEBUG


	)

17 
	sd©a_ö
 {

19 
u_öt
 
d©a_Àn
;

20 *
d©a_vÆ
;

21 } 
d©a
;

23 
d©a_ö
 
	td©a_ö
;

25 
	#BW_SUNRPC_PROG
 (()(0x31230001))

	)

26 
	#BW_SUNRPC_VERS
 (()(1))

	)

28 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

29 
	#BW_SUNRPC
 (()(1))

	)

30 * 
bw_suƒpc_1
(
d©a_ö
 *, 
CLIENT
 *);

31 * 
bw_suƒpc_1_svc
(
d©a_ö
 *, 
svc_ªq
 *);

32 
bw_suƒpc_¥og_1_‰ìªsu…
(
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

35 
	#BW_SUNRPC
 (()(1))

	)

36 * 
bw_suƒpc_1
();

37 * 
bw_suƒpc_1_svc
();

38 
bw_suƒpc_¥og_1_‰ìªsu…
();

43 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

44 
boﬁ_t
 
xdr_d©a_ö
(
XDR
 *, 
d©a_ö
*);

47 
boﬁ_t
 
xdr_d©a_ö
();

51 #ifde‡
__˝lu•lus


	@bench/lat_sunrpc_client.c

1 
	~"u≈ùc.h
"

2 
	~"œt_suƒpc.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
i
, 
∆o›
;

8 
CLIENT
 *
˛
;

9 
timevÆ
 
tv
;

11 i‡(
¨gc
 != 4)

12 
	`îr_quô
("usage:Üat_sunrpc_client <hostname> <#loops> <protocol>");

13 
∆o›
 = 
	`©oi
(
¨gv
[2]);

15 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
BW_SUNRPC_PROG
, 
BW_SUNRPC_VERS
,árgv[3]);

17 
tv
.
tv_£c
 = 10;

18 
tv
.
tv_u£c
 = 0;

19 
	`Sèπ_time
();

20 
i
 = 0; i < 
∆o›
; i++) {

21 i‡(
	`˛¡_ˇŒ
(
˛
, 
NULLPROC
, 
xdr_void
, 
NULL
,

22 
xdr_void
, 
NULL
, 
tv
Ë!
RPC_SUCCESS
)

23 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

25 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

26 
	`exô
(0);

27 
	}
}

	@bench/lat_sunrpc_server.c

1 
	~"u≈ùc.h
"

2 
	~"œt_suƒpc.h
"

4 #i‚def 
RPCGEN_ANSIC


5 
	#bw_suƒpc_1_svc
 
bw_suƒpc_1


	)

9 
	$bw_suƒpc_1_svc
(
d©a_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

11 
nbyãs
;

13 
nbyãs
 = 
öp
->
d©a
.
d©a_Àn
;

14 (&
nbyãs
);

15 
	}
}

	@bench/lat_svmsg.c

2 
	~"u≈ùc.h
"

5 
msgbuf
 
	gp2chûd
 = { 1, { 0 } };

6 
msgbuf
 
	gchûd2p
 = { 2, { 0 } };

7 
msgbuf
 
	göbuf
;

11 
	$doô
(
msgid
)

13 
	`Msg¢d
(
msgid
, &
p2chûd
, 0, 0);

14 i‡(
	`Msgrcv
(
msgid
, &
öbuf
, (öbuf.
mãxt
), 2, 0) != 0)

15 
	`îr_quô
("msgrcvÉrror");

16 
	}
}

19 
	$maö
(
¨gc
, **
¨gv
)

21 
i
, 
∆o›
, 
msgid
;

22 
pid_t
 
chûdpid
;

24 i‡(
¨gc
 != 2)

25 
	`îr_quô
("usage:Üat_svmsg <#loops>");

26 
∆o›
 = 
	`©oi
(
¨gv
[1]);

28 
msgid
 = 
	`Msggë
(
IPC_PRIVATE
, 
IPC_CREAT
 | 
SVMSG_MODE
);

30 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

32 i‡(
	`Msgrcv
(
msgid
, &
öbuf
, (öbuf.
mãxt
), 1, 0) != 0)

33 
	`îr_quô
("msgrcvÉrror");

34 
	`Msg¢d
(
msgid
, &
chûd2p
, 0, 0);

36 
	`exô
(0);

39 
	`doô
(
msgid
);

41 
	`Sèπ_time
();

42 
i
 = 0; i < 
∆o›
; i++)

43 
	`doô
(
msgid
);

44 
	`¥ötf
("œãncy: %.3‡u£c\n", 
	`St›_time
(Ë/ 
∆o›
);

46 
	`Kûl
(
chûdpid
, 
SIGTERM
);

47 
	`Msg˘l
(
msgid
, 
IPC_RMID
, 
NULL
);

48 
	`exô
(0);

49 
	}
}

	@bench/test1.c

6 
	~<sys/ty≥s.h
>

7 
	~<î∫o.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<±hªad.h
>

13 
	~<£m≠h‹e.h
>

15 
	#MAXNTHREADS
 100

	)

16 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

18 
	g∆o›
;

21 
£m_t
 
	mmuãx
;

22 
	mcou¡î
;

23 } 
	gsh¨ed
;

25 *
ö¸
(*), 
îr_quô
(*);

28 
	$maö
(
¨gc
, **
¨gv
)

30 
i
, 
¡hªads
;

31 
±hªad_t
 
tid
[
MAXNTHREADS
];

33 i‡(
¨gc
 != 3)

34 
	`îr_quô
("usage: incr_pxsem1 <#loops> <#threads>");

35 
∆o›
 = 
	`©oi
(
¨gv
[1]);

36 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

39 i‡(
	`£m_öô
(&
sh¨ed
.
muãx
, 0, 0) == -1)

40 
	`îr_quô
("sem_initÉrror");

43 
i
 = 0; i < 
¡hªads
; i++) {

44 i‡(
	`±hªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL) != 0)

45 
	`îr_quô
("pthread_createÉrror");

48 i‡(
	`£m_po°
(&
sh¨ed
.
muãx
) == -1)

49 
	`îr_quô
("sem_postÉrror");

52 
i
 = 0; i < 
¡hªads
; i++) {

53 i‡(
	`±hªad_joö
(
tid
[
i
], 
NULL
) != 0)

54 
	`îr_quô
("pthread_joinÉrror");

56 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

57 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

59 
	`exô
(0);

60 
	}
}

63 
	$ö¸
(*
¨g
)

65 
i
;

67 
i
 = 0; i < 
∆o›
; i++) {

68 i‡(
	`£m_waô
(&
sh¨ed
.
muãx
) == -1)

69 
	`îr_quô
("sem_waitÉrror");

70 
sh¨ed
.
cou¡î
++;

71 i‡(
	`£m_po°
(&
sh¨ed
.
muãx
) == -1)

72 
	`îr_quô
("sem_postÉrror");

74 (
NULL
);

75 
	}
}

78 
	$îr_quô
(*
±r
)

80 
	`Ârötf
(
°dîr
, "%s\n", 
±r
);

81 
	`exô
(1);

82 
	}
}

	@bench/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@config.h

3 
	#CPU_VENDOR_OS
 ""

	)

7 
	#HAVE_MQUEUE_H
 1

	)

8 
	#HAVE_POLL_H
 1

	)

9 
	#HAVE_PTHREAD_H
 1

	)

10 
	#HAVE_RPC_RPC_H
 1

	)

11 
	#HAVE_SEMAPHORE_H
 1

	)

12 
	#HAVE_STRINGS_H
 1

	)

14 
	#HAVE_SYS_IOCTL_H
 1

	)

15 
	#HAVE_SYS_IPC_H
 1

	)

16 
	#HAVE_SYS_MMAN_H
 1

	)

17 
	#HAVE_SYS_MSG_H
 1

	)

18 
	#HAVE_SYS_SEM_H
 1

	)

19 
	#HAVE_SYS_SHM_H
 1

	)

20 
	#HAVE_SYS_SELECT_H
 1

	)

21 
	#HAVE_SYS_SYSCTL_H
 1

	)

22 
	#HAVE_SYS_TIME_H
 1

	)

25 
	#TIME_WITH_SYS_TIME
 1

	)

28 
	#HAVE_BZERO
 1

	)

30 
	#HAVE_POLL
 1

	)

31 
	#HAVE_PSELECT
 1

	)

32 
	#HAVE_SIGWAIT
 1

	)

33 
	#HAVE_VALLOC
 1

	)

34 
	#HAVE_VSNPRINTF
 1

	)

37 
	#HAVE_GETHOSTNAME_PROTO
 1

	)

38 
	#HAVE_GETRUSAGE_PROTO
 1

	)

39 
	#HAVE_PSELECT_PROTO
 1

	)

40 
	#HAVE_SHM_OPEN_PROTO
 1

	)

41 
	#HAVE_SNPRINTF_PROTO
 1

	)

45 
	#HAVE_SIGINFO_T_STRUCT
 1

	)

46 
	#HAVE_TIMESPEC_STRUCT
 1

	)

50 
	#HAVE_DEV_ZERO
 1

	)

63 
	#RPCGEN_ANSIC
 1

	)

	@doors/client1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client1 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

28 
	`exô
(0);

29 
	}
}

	@doors/client2.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client2 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("&oval = %p, data_ptr = %p,Ñbuf = %p,Ñsize = %d\n",

27 &
ovÆ
, 
¨g
.
d©a_±r
,árg.
rbuf
,árg.
rsize
);

28 
	`¥ötf
("ªsu…: %ld\n", *((*Ë
¨g
.
d©a_±r
));

30 
	`exô
(0);

31 
	}
}

	@doors/client3.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client3 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = () - 1;

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("&oval = %p, data_ptr = %p,Ñbuf = %p,Ñsize = %d\n",

27 &
ovÆ
, 
¨g
.
d©a_±r
,árg.
rbuf
,árg.
rsize
);

28 
	`¥ötf
("ªsu…: %ld\n", *((*Ë
¨g
.
d©a_±r
));

30 
	`exô
(0);

31 
	}
}

	@doors/client4.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client4 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", *((*Ë
¨g
.
d©a_±r
));

28 
	`exô
(0);

29 
	}
}

	@doors/client5.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client5 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", *((*Ë
¨g
.
d©a_±r
));

28 
	`exô
(0);

29 
	}
}

	@doors/client6.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client6 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", *((*Ë
¨g
.
d©a_±r
));

28 
	`exô
(0);

29 
	}
}

	@doors/client7.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨ïroc.h
"

3 
	~"sqπ¥oc.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
fdsqu¨e
, 
fdsqπ
;

9 
do‹_¨g_t
 
¨g
;

10 
squ¨ïroc_ö_t
 
squ¨e_ö
;

11 
squ¨ïroc_out_t
 
squ¨e_out
;

12 
sqπ¥oc_ö_t
 
sqπ_ö
;

13 
sqπ¥oc_out_t
 
sqπ_out
;

15 i‡(
¨gc
 != 2)

16 
	`îr_quô
("usage: client7 <integer-value>");

18 
fdsqu¨e
 = 
	`O≥n
(
PATH_SQUARE_DOOR
, 
O_RDWR
);

19 
fdsqπ
 = 
	`O≥n
(
PATH_SQRT_DOOR
, 
O_RDWR
);

22 
squ¨e_ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[1]);

23 
¨g
.
d©a_±r
 = (*Ë&
squ¨e_ö
;

24 
¨g
.
d©a_size
 = (
squ¨e_ö
);

25 
¨g
.
desc_±r
 = 
NULL
;

26 
¨g
.
desc_num
 = 0;

27 
¨g
.
rbuf
 = (*Ë&
squ¨e_out
;

28 
¨g
.
rsize
 = (
squ¨e_out
);

29 
	`Do‹_ˇŒ
(
fdsqu¨e
, &
¨g
);

32 
sqπ_ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[1]);

33 
¨g
.
d©a_±r
 = (*Ë&
sqπ_ö
;

34 
¨g
.
d©a_size
 = (
sqπ_ö
);

35 
¨g
.
desc_±r
 = 
NULL
;

36 
¨g
.
desc_num
 = 0;

37 
¨g
.
rbuf
 = (*Ë&
sqπ_out
;

38 
¨g
.
rsize
 = (
sqπ_out
);

39 
	`Do‹_ˇŒ
(
fdsqπ
, &
¨g
);

41 
	`¥ötf
("ªsu…: %ld %g\n", 
squ¨e_out
.
ªs1
, 
sqπ_out
.res1);

43 
	`exô
(0);

44 
	}
}

	@doors/client8.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client8 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

28 
	`exô
(0);

29 
	}
}

	@doors/client9.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client9 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

28 
	`exô
(0);

29 
	}
}

	@doors/clientfd1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
do‹
, 
fd
;

7 
¨gbuf
[
BUFFSIZE
], 
ªsbuf
[BUFFSIZE], 
buff
[BUFFSIZE];

8 
size_t
 
Àn
, 
n
;

9 
do‹_¨g_t
 
¨g
;

11 i‡(
¨gc
 != 2)

12 
	`îr_quô
("usage: clientfd1 <server-pathname>");

14 
do‹
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
	`Fgës
(
¨gbuf
, 
BUFFSIZE
, 
°dö
);

17 
Àn
 = 
	`°æí
(
¨gbuf
);

18 i‡(
¨gbuf
[
Àn
-1] == '\n')

19 
Àn
--;

22 
¨g
.
d©a_±r
 = 
¨gbuf
;

23 
¨g
.
d©a_size
 = 
Àn
 + 1;

24 
¨g
.
desc_±r
 = 
NULL
;

25 
¨g
.
desc_num
 = 0;

26 
¨g
.
rbuf
 = 
ªsbuf
;

27 
¨g
.
rsize
 = 
BUFFSIZE
;

29 
	`Do‹_ˇŒ
(
do‹
, &
¨g
);

31 i‡(
¨g
.
d©a_size
 != 0)

32 
	`îr_quô
("%.*s", 
¨g
.
d©a_size
,árg.
d©a_±r
);

33 i‡(
¨g
.
desc_±r
 =
NULL
)

34 
	`îr_quô
("desc_ptr is NULL");

35 i‡(
¨g
.
desc_num
 != 1)

36 
	`îr_quô
("desc_num = %d", 
¨g
.
desc_num
);

37 i‡(
¨g
.
desc_±r
->
d_©åibuãs
 !
DOOR_DESCRIPTOR
)

38 
	`îr_quô
("d_©åibuã†%d", 
¨g
.
desc_±r
->
d_©åibuãs
);

40 
fd
 = 
¨g
.
desc_±r
->
d_d©a
.
d_desc
.
d_des¸ùt‹
;

41  (
n
 = 
	`Ród
(
fd
, 
buff
, 
BUFFSIZE
)) > 0)

42 
	`Wrôe
(
STDOUT_FILENO
, 
buff
, 
n
);

44 
	`exô
(0);

45 
	}
}

	@doors/clientintr1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: clientintr1 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

28 
	`exô
(0);

29 
	}
}

	@doors/clientintr2.c

1 
	~"u≈ùc.h
"

4 
	$sig_chld
(
signo
)

7 
	}
}

10 
	$maö
(
¨gc
, **
¨gv
)

12 
fd
;

13 
ivÆ
, 
ovÆ
;

14 
do‹_¨g_t
 
¨g
;

16 i‡(
¨gc
 != 3)

17 
	`îr_quô
("usage: clientintr2 <server-pathname> <integer-value>");

19 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

22 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

23 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

24 
¨g
.
d©a_size
 = ();

25 
¨g
.
desc_±r
 = 
NULL
;

26 
¨g
.
desc_num
 = 0;

27 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

28 
¨g
.
rsize
 = ();

30 
	`Sig«l
(
SIGCHLD
, 
sig_chld
);

31 i‡(
	`F‹k
() == 0) {

32 
	`¶ìp
(2);

33 
	`exô
(0);

37 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

38 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

40 
	`exô
(0);

41 
	}
}

	@doors/clientintr3.c

1 
	~"u≈ùc.h
"

3 vﬁ©ûê
sig_©omic_t
 
	gˇught_sigchld
;

6 
	$sig_chld
(
signo
)

8 
ˇught_sigchld
 = 1;

10 
	}
}

13 
	$maö
(
¨gc
, **
¨gv
)

15 
fd
, 
rc
;

16 
ivÆ
, 
ovÆ
;

17 
do‹_¨g_t
 
¨g
;

19 i‡(
¨gc
 != 3)

20 
	`îr_quô
("usage: clientintr3 <server-pathname> <integer-value>");

22 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

25 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

26 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

27 
¨g
.
d©a_size
 = ();

28 
¨g
.
desc_±r
 = 
NULL
;

29 
¨g
.
desc_num
 = 0;

30 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

31 
¨g
.
rsize
 = ();

33 
	`Sig«l
(
SIGCHLD
, 
sig_chld
);

34 i‡(
	`F‹k
() == 0) {

35 
	`¶ìp
(2);

36 
	`exô
(0);

41 
	`¥ötf
("calling door_call\n");

42 i‡–(
rc
 = 
	`do‹_ˇŒ
(
fd
, &
¨g
)) == 0)

44 i‡(
î∫o
 =
EINTR
 && 
ˇught_sigchld
) {

45 
ˇught_sigchld
 = 0;

48 
	`îr_sys
("door_callÉrror");

50 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

52 
	`exô
(0);

53 
	}
}

	@doors/clientintr4.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: clientintr4 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Æ¨m
(3);

26 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

27 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

29 
	`exô
(0);

30 
	}
}

	@doors/clientunref1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client1 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

28 
	`exô
(0);

29 
	}
}

	@doors/clientunref2.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆ
, 
ovÆ
;

8 
do‹_¨g_t
 
¨g
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client1 <server-pathname> <integer-value>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
ivÆ
 = 
	`©ﬁ
(
¨gv
[2]);

17 
¨g
.
d©a_±r
 = (*Ë&
ivÆ
;

18 
¨g
.
d©a_size
 = ();

19 
¨g
.
desc_±r
 = 
NULL
;

20 
¨g
.
desc_num
 = 0;

21 
¨g
.
rbuf
 = (*Ë&
ovÆ
;

22 
¨g
.
rsize
 = ();

25 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

26 
	`¥ötf
("ªsu…: %ld\n", 
ovÆ
);

28 
	`exô
(0);

29 
	}
}

	@doors/doorinfo.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
°©
 stat;

8 
do‹_öfo
 
öfo
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: doorinfo <pathname>");

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDONLY
);

14 
	`F°©
(
fd
, &
°©
);

15 i‡(
	`S_ISDOOR
(
°©
.
°_mode
) == 0)

16 
	`îr_quô
("pathname isÇotá door");

18 
	`Do‹_öfo
(
fd
, &
öfo
);

19 
	`¥ötf
("server PID = %ld, uniquifier = %ld",

20 (Ë
öfo
.
di_èrgë
, (Ëöfo.
di_uniquifõr
);

21 i‡(
öfo
.
di_©åibuãs
 & 
DOOR_LOCAL
)

22 
	`¥ötf
(", DOOR_LOCAL");

23 i‡(
öfo
.
di_©åibuãs
 & 
DOOR_PRIVATE
)

24 
	`¥ötf
(", DOOR_PRIVATE");

25 i‡(
öfo
.
di_©åibuãs
 & 
DOOR_REVOKED
)

26 
	`¥ötf
(", DOOR_REVOKED");

27 i‡(
öfo
.
di_©åibuãs
 & 
DOOR_UNREF
)

28 
	`¥ötf
(", DOOR_UNREF");

29 
	`¥ötf
("\n");

31 
	`exô
(0);

32 
	}
}

	@doors/server1.c

1 
	~"u≈ùc.h
"

4 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

5 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

7 
¨g
, 
ªsu…
;

9 
¨g
 = *((*Ë
d©≠å
);

10 
ªsu…
 = 
¨g
 *árg;

11 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

12 
	}
}

15 
	$maö
(
¨gc
, **
¨gv
)

17 
fd
;

19 i‡(
¨gc
 != 2)

20 
	`îr_quô
("usage: server1 <server-pathname>");

23 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

25 
	`u∆ök
(
¨gv
[1]);

26 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

27 
	`F©èch
(
fd
, 
¨gv
[1]);

31 
	`∑u£
();

32 
	}
}

	@doors/server2.c

1 
	~"u≈ùc.h
"

4 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

5 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

7 
¨g
, 
ªsu…
;

9 
¨g
 = *((*Ë
d©≠å
);

10 
ªsu…
 = 
¨g
 *árg;

11 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

12 
	}
}

15 
	$maö
(
¨gc
, **
¨gv
)

17 
fd
;

19 i‡(
¨gc
 != 2)

20 
	`îr_quô
("usage: server2 <server-pathname>");

23 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

25 
	`u∆ök
(
¨gv
[1]);

26 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

27 
	`F©èch
(
fd
, 
¨gv
[1]);

31 
	`∑u£
();

32 
	}
}

	@doors/server3.c

1 
	~"u≈ùc.h
"

4 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

5 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

7 
¨g
, 
ªsu…
;

9 
¨g
 = *((*Ë
d©≠å
);

10 
ªsu…
 = 
¨g
 *árg;

11 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

12 
	}
}

15 
	$maö
(
¨gc
, **
¨gv
)

17 
fd
;

19 i‡(
¨gc
 != 2)

20 
	`îr_quô
("usage: server3 <server-pathname>");

23 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

25 
	`u∆ök
(
¨gv
[1]);

26 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

27 
	`F©èch
(
fd
, 
¨gv
[1]);

31 
	`∑u£
();

32 
	}
}

	@doors/server4.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

9 
do‹_¸ed_t
 
öfo
;

12 
	`Do‹_¸ed
(&
öfo
);

13 
	`¥ötf
("euid = %ld,Ñuid = %ld,Öid = %ld\n",

14 (Ë
öfo
.
dc_euid
, (Ëöfo.
dc_ruid
, (Ëöfo.
dc_pid
);

16 
¨g
 = *((*Ë
d©≠å
);

17 
ªsu…
 = 
¨g
 *árg;

18 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

19 
	}
}

23 
	$maö
(
¨gc
, **
¨gv
)

25 
fd
;

27 i‡(
¨gc
 != 2)

28 
	`îr_quô
("usage: server4 <server-pathname>");

31 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

33 
	`u∆ök
(
¨gv
[1]);

34 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

35 
	`F©èch
(
fd
, 
¨gv
[1]);

39 
	`∑u£
();

40 
	}
}

	@doors/server5.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

10 
¨g
 = *((*Ë
d©≠å
);

11 
	`¥ötf
("thªad id %ld,árg = %ld\n", 
	`¥_thªad_id
(
NULL
), 
¨g
);

12 
	`¶ìp
(5);

14 
ªsu…
 = 
¨g
 *árg;

15 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

16 
	}
}

20 
	$maö
(
¨gc
, **
¨gv
)

22 
fd
;

24 i‡(
¨gc
 != 2)

25 
	`îr_quô
("usage: server5 <server-pathname>");

28 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

30 
	`u∆ök
(
¨gv
[1]);

31 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

32 
	`F©èch
(
fd
, 
¨gv
[1]);

36 
	`∑u£
();

37 
	}
}

	@doors/server6.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

10 
¨g
 = *((*Ë
d©≠å
);

11 
	`¥ötf
("thªad id %ld,árg = %ld\n", 
	`¥_thªad_id
(
NULL
), 
¨g
);

12 
	`¶ìp
(5);

14 
ªsu…
 = 
¨g
 *árg;

15 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

16 
	}
}

20 
±hªad_muãx_t
 
	gfdlock
 = 
PTHREAD_MUTEX_INITIALIZER
;

21 
	gfd
 = -1;

24 
	$my_thªad
(*
¨g
)

26 
ﬁd°©e
;

27 
do‹_öfo_t
 *
ùå
 = 
¨g
;

29 i‡((
Do‹_£rvî_¥oc
 *Ë
ùå
->
di_¥oc
 =
£rv¥oc
) {

30 
	`Pthªad_muãx_lock
(&
fdlock
);

31 
	`Pthªad_muãx_u∆ock
(&
fdlock
);

33 
	`Pthªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_DISABLE
, &
ﬁd°©e
);

34 
	`Do‹_böd
(
fd
);

35 
	`Do‹_ªtu∫
(
NULL
, 0, NULL, 0);

37 
	`îr_quô
("my_thªad: unknow¿fun˘i⁄: %p", 
¨g
);

38 (
NULL
);

39 
	}
}

42 
	$my_¸óã
(
do‹_öfo_t
 *
ùå
)

44 
±hªad_t
 
tid
;

45 
±hªad_©å_t
 
©å
;

47 
	`Pthªad_©å_öô
(&
©å
);

48 
	`Pthªad_©å_£tsc›e
(&
©å
, 
PTHREAD_SCOPE_SYSTEM
);

49 
	`Pthªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

50 
	`Pthªad_¸óã
(&
tid
, &
©å
, 
my_thªad
, (*Ë
ùå
);

51 
	`Pthªad_©å_de°roy
(&
©å
);

52 
	`¥ötf
("my_thªad: cª©ed sîvîÅhªad %ld\n", 
	`¥_thªad_id
(&
tid
));

53 
	}
}

58 
	$maö
(
¨gc
, **
¨gv
)

60 i‡(
¨gc
 != 2)

61 
	`îr_quô
("usage: server6 <server-pathname>");

63 
	`Do‹_£rvî_¸óã
(
my_¸óã
);

66 
	`Pthªad_muãx_lock
(&
fdlock
);

67 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 
DOOR_PRIVATE
);

68 
	`Pthªad_muãx_u∆ock
(&
fdlock
);

70 
	`u∆ök
(
¨gv
[1]);

71 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

72 
	`F©èch
(
fd
, 
¨gv
[1]);

76 
	`∑u£
();

77 
	}
}

	@doors/server7.c

2 
	~"u≈ùc.h
"

3 
	~<m©h.h
>

4 
	~"squ¨ïroc.h
"

5 
	~"sqπ¥oc.h
"

8 
	$squ¨ïroc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

9 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

11 
squ¨ïroc_ö_t
 
ö
;

12 
squ¨ïroc_out_t
 
out
;

14 
	`mem˝y
(&
ö
, 
d©≠å
, 
	`mö
((ö), 
d©asize
));

15 
	`¥ötf
("squareproc:Åhread id %ld,árg = %ld\n",

16 
	`¥_thªad_id
(
NULL
), 
ö
.
¨g1
);

17 
	`¶ìp
(5);

19 
out
.
ªs1
 = 
ö
.
¨g1
 * in.arg1;

20 
	`Do‹_ªtu∫
((*Ë&
out
, (out), 
NULL
, 0);

21 
	}
}

24 
	$sqπ¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

25 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

27 
sqπ¥oc_ö_t
 
ö
;

28 
sqπ¥oc_out_t
 
out
;

30 
	`mem˝y
(&
ö
, 
d©≠å
, 
	`mö
((ö), 
d©asize
));

31 
	`¥ötf
("sqrtproc:Åhread id %ld,árg = %ld\n",

32 
	`¥_thªad_id
(
NULL
), 
ö
.
¨g1
);

33 
	`¶ìp
(5);

35 
out
.
ªs1
 = 
	`sqπ
((Ë
ö
.
¨g1
);

36 
	`Do‹_ªtu∫
((*Ë&
out
, (out), 
NULL
, 0);

37 
	}
}

42 
	$maö
(
¨gc
, **
¨gv
)

44 
fd
;

46 i‡(
¨gc
 != 1)

47 
	`îr_quô
("usage: server7");

49 
fd
 = 
	`Do‹_¸óã
(
squ¨ïroc
, 
NULL
, 0);

50 
	`u∆ök
(
PATH_SQUARE_DOOR
);

51 
	`Clo£
(
	`O≥n
(
PATH_SQUARE_DOOR
, 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

52 
	`F©èch
(
fd
, 
PATH_SQUARE_DOOR
);

54 
fd
 = 
	`Do‹_¸óã
(
sqπ¥oc
, 
NULL
, 0);

55 
	`u∆ök
(
PATH_SQRT_DOOR
);

56 
	`Clo£
(
	`O≥n
(
PATH_SQRT_DOOR
, 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

57 
	`F©èch
(
fd
, 
PATH_SQRT_DOOR
);

60 
	`∑u£
();

61 
	}
}

	@doors/server8.c

2 
	~"u≈ùc.h
"

4 
	gfd
;

7 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

8 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

10 
¨g
, 
ªsu…
;

12 
	`Do‹_ªvoke
(
fd
);

13 
¨g
 = *((*Ë
d©≠å
);

14 
	`¥ötf
("thªad id %ld,árg = %ld\n", 
	`¥_thªad_id
(
NULL
), 
¨g
);

16 
ªsu…
 = 
¨g
 *árg;

17 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

18 
	}
}

22 
	$maö
(
¨gc
, **
¨gv
)

24 i‡(
¨gc
 != 2)

25 
	`îr_quô
("usage: server8 <server-pathname>");

28 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

30 
	`u∆ök
(
¨gv
[1]);

31 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

32 
	`F©èch
(
fd
, 
¨gv
[1]);

36 
	`∑u£
();

37 
	}
}

	@doors/server9.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

10 
	`Do‹_ªvoke
(*((*Ë
cookõ
));

11 
¨g
 = *((*Ë
d©≠å
);

12 
	`¥ötf
("thªad id %ld,árg = %ld\n", 
	`¥_thªad_id
(
NULL
), 
¨g
);

14 
ªsu…
 = 
¨g
 *árg;

15 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

16 
	}
}

20 
	$maö
(
¨gc
, **
¨gv
)

22 
fd
;

24 i‡(
¨gc
 != 2)

25 
	`îr_quô
("usage: server9 <server-pathname>");

28 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, &fd, 0);

30 
	`u∆ök
(
¨gv
[1]);

31 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

32 
	`F©èch
(
fd
, 
¨gv
[1]);

36 
	`∑u£
();

37 
	}
}

	@doors/serverfd1.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
fd
;

9 
ªsbuf
[
BUFFSIZE
];

10 
do‹_desc_t
 
desc
;

12 
d©≠å
[
d©asize
-1] = 0;

13 i‡–(
fd
 = 
	`›í
(
d©≠å
, 
O_RDONLY
)) == -1) {

15 
	`¢¥ötf
(
ªsbuf
, 
BUFFSIZE
, "%s: can't open, %s",

16 
d©≠å
, 
	`°ªº‹
(
î∫o
));

17 
	`Do‹_ªtu∫
(
ªsbuf
, 
	`°æí
‘esbuf), 
NULL
, 0);

21 
desc
.
d_d©a
.
d_desc
.
d_des¸ùt‹
 = 
fd
;

22 
desc
.
d_©åibuãs
 = 
DOOR_DESCRIPTOR
;

23 
	`Do‹_ªtu∫
(
NULL
, 0, &
desc
, 1);

25 
	}
}

29 
	$maö
(
¨gc
, **
¨gv
)

31 
fd
;

33 i‡(
¨gc
 != 2)

34 
	`îr_quô
("usage: serverfd1 <server-pathname>");

37 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

39 
	`u∆ök
(
¨gv
[1]);

40 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

41 
	`F©èch
(
fd
, 
¨gv
[1]);

45 
	`∑u£
();

46 
	}
}

	@doors/serverintr1.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

10 
	`±hªad_exô
(
NULL
);

11 
¨g
 = *((*Ë
d©≠å
);

12 
ªsu…
 = 
¨g
 *árg;

13 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

14 
	}
}

18 
	$maö
(
¨gc
, **
¨gv
)

20 
fd
;

22 i‡(
¨gc
 != 2)

23 
	`îr_quô
("usage: serverintr1 <server-pathname>");

26 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

28 
	`u∆ök
(
¨gv
[1]);

29 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

30 
	`F©èch
(
fd
, 
¨gv
[1]);

34 
	`∑u£
();

35 
	}
}

	@doors/serverintr2.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

10 
	`¶ìp
(6);

11 
¨g
 = *((*Ë
d©≠å
);

12 
ªsu…
 = 
¨g
 *árg;

13 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

14 
	}
}

18 
	$maö
(
¨gc
, **
¨gv
)

20 
fd
;

22 i‡(
¨gc
 != 2)

23 
	`îr_quô
("usage: serverintr2 <server-pathname>");

26 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

28 
	`u∆ök
(
¨gv
[1]);

29 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

30 
	`F©èch
(
fd
, 
¨gv
[1]);

34 
	`∑u£
();

35 
	}
}

	@doors/serverintr3.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

6 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

8 
¨g
, 
ªsu…
;

10 
	`¥ötf
("thªad id %ld cÆÀd\n", 
	`¥_thªad_id
(
NULL
));

11 
	`¶ìp
(6);

12 
¨g
 = *((*Ë
d©≠å
);

13 
ªsu…
 = 
¨g
 *árg;

14 
	`¥ötf
("thªad id %ldÑëu∫ög\n", 
	`¥_thªad_id
(
NULL
));

15 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

16 
	}
}

20 
	$maö
(
¨gc
, **
¨gv
)

22 
fd
;

24 i‡(
¨gc
 != 2)

25 
	`îr_quô
("usage: serverintr3 <server-pathname>");

28 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

30 
	`u∆ök
(
¨gv
[1]);

31 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

32 
	`F©èch
(
fd
, 
¨gv
[1]);

36 
	`∑u£
();

37 
	}
}

	@doors/serverintr4.c

2 
	~"u≈ùc.h
"

5 
	$£rv¥oc_˛ónup
(*
¨g
)

7 
	`¥ötf
("£rv¥o¯ˇn˚Œed,Åhªad id %ld\n", 
	`¥_thªad_id
(
NULL
));

8 
	}
}

11 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

12 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

14 
ﬁd°©e
, 
junk
;

15 
¨g
, 
ªsu…
;

17 
	`Pthªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_ENABLE
, &
ﬁd°©e
);

18 
	`±hªad_˛ónup_push
(
£rv¥oc_˛ónup
, 
NULL
);

19 
	`¶ìp
(6);

20 
¨g
 = *((*Ë
d©≠å
);

21 
ªsu…
 = 
¨g
 *árg;

22 
	`±hªad_˛ónup_p›
(0);

23 
	`Pthªad_£tˇn˚l°©e
(
ﬁd°©e
, &
junk
);

24 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

25 
	}
}

29 
	$maö
(
¨gc
, **
¨gv
)

31 
fd
;

33 i‡(
¨gc
 != 2)

34 
	`îr_quô
("usage: serverintr4 <server-pathname>");

37 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 0);

39 
	`u∆ök
(
¨gv
[1]);

40 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

41 
	`F©èch
(
fd
, 
¨gv
[1]);

45 
	`∑u£
();

46 
	}
}

	@doors/serverunref1.c

1 
	~"u≈ùc.h
"

4 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

5 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

7 
¨g
, 
ªsu…
;

9 i‡(
d©≠å
 =
DOOR_UNREF_DATA
) {

10 
	`¥ötf
("door unreferenced\n");

11 
	`Do‹_ªtu∫
(
NULL
, 0, NULL, 0);

14 
¨g
 = *((*Ë
d©≠å
);

15 
	`¥ötf
("thªad id %ld,árg = %ld\n", 
	`¥_thªad_id
(
NULL
), 
¨g
);

16 
	`¶ìp
(6);

18 
ªsu…
 = 
¨g
 *árg;

19 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

20 
	}
}

23 
	$maö
(
¨gc
, **
¨gv
)

25 
fd
;

27 i‡(
¨gc
 != 2)

28 
	`îr_quô
("usage: server1 <server-pathname>");

31 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 
DOOR_UNREF
);

33 
	`u∆ök
(
¨gv
[1]);

34 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

35 
	`F©èch
(
fd
, 
¨gv
[1]);

36 
	`Clo£
(
fd
);

40 
	`∑u£
();

41 
	}
}

	@doors/serverunref2.c

1 
	~"u≈ùc.h
"

4 
	$£rv¥oc
(*
cookõ
, *
d©≠å
, 
size_t
 
d©asize
,

5 
do‹_desc_t
 *
des˝å
, 
size_t
 
ndesc
)

7 
¨g
, 
ªsu…
;

9 i‡(
d©≠å
 =
DOOR_UNREF_DATA
) {

10 
	`¥ötf
("door unreferenced\n");

11 
	`Do‹_ªtu∫
(
NULL
, 0, NULL, 0);

14 
¨g
 = *((*Ë
d©≠å
);

15 
	`¥ötf
("thªad id %ld,árg = %ld\n", 
	`¥_thªad_id
(
NULL
), 
¨g
);

16 
	`¶ìp
(6);

18 
ªsu…
 = 
¨g
 *árg;

19 
	`¥ötf
("thªad id %ldÑëu∫ög\n", 
	`¥_thªad_id
(
NULL
));

20 
	`Do‹_ªtu∫
((*Ë&
ªsu…
, ‘esu…), 
NULL
, 0);

21 
	}
}

24 
	$maö
(
¨gc
, **
¨gv
)

26 
fd
;

28 i‡(
¨gc
 != 2)

29 
	`îr_quô
("usage: server1 <server-pathname>");

32 
fd
 = 
	`Do‹_¸óã
(
£rv¥oc
, 
NULL
, 
DOOR_UNREF
);

34 
	`u∆ök
(
¨gv
[1]);

35 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_RDWR
, 
FILE_MODE
));

36 
	`F©èch
(
fd
, 
¨gv
[1]);

40 
	`∑u£
();

41 
	}
}

	@doors/sqrtproc.h

1 
	#PATH_SQRT_DOOR
 "/tmp/sqπ¥oc_do‹"

	)

4 
	m¨g1
;

5 } 
	tsqπ¥oc_ö_t
;

8 
	mªs1
;

9 } 
	tsqπ¥oc_out_t
;

	@doors/squareproc.h

1 
	#PATH_SQUARE_DOOR
 "/tmp/squ¨ïroc_do‹"

	)

4 
	m¨g1
;

5 } 
	tsqu¨ïroc_ö_t
;

8 
	mªs1
;

9 } 
	tsqu¨ïroc_out_t
;

	@doors/tclient1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

7 
ivÆs
[4], 
ovÆs
[4];

8 
do‹_¨g_t
 
¨g
;

9 
°©
 stat;

10 
do‹_öfo
 
öfo
;

12 i‡(
¨gc
 != 2)

13 
	`îr_quô
("usage: client1 <pathname>");

15 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
);

16 
	`F°©
(
fd
, &
°©
);

17 
	`¥ötf
("pid = %ld, fmt = %lx\n",

18 (Ë
	`gëpid
(), (Ë
°©
.
°_mode
 & 
S_IFMT
);

20 
	`Do‹_öfo
(
fd
, &
öfo
);

21 
	`¥ötf
("di_target = %ld, di_proc = %p, di_data = %p, di_attr = %x\n",

22 (Ë
öfo
.
di_èrgë
, (*Ëöfo.
di_¥oc
,

23 (*Ë
öfo
.
di_d©a
, info.
di_©åibuãs
);

25 
ivÆs
[0] = 1;

26 
ivÆs
[1] = 3;

27 
ivÆs
[2] = 6;

28 
ivÆs
[3] = 9;

29 
¨g
.
d©a_±r
 = (*Ë
ivÆs
;

30 
¨g
.
d©a_size
 = 4 * ();

31 
¨g
.
desc_±r
 = 
NULL
;

32 
¨g
.
desc_num
 = 0;

33 
¨g
.
rbuf
 = (*Ë
ovÆs
;

34 
¨g
.
rsize
 = (
ovÆs
);

36 
	`Do‹_ˇŒ
(
fd
, &
¨g
);

38 i‡(
¨g
.
d©a_±r
 !(*Ë
ovÆs
)

39 
	`¥ötf
("¨g.d©a_±∏%p\n", 
¨g
.
d©a_±r
);

40 
	`¥ötf
("result: %ld %ld %ld %ld\n",

41 
ovÆs
[0], ovals[1], ovals[2], ovals[3]);

43 
	`exô
(0);

44 
	}
}

	@doors/tserver1.c

1 
	~"u≈ùc.h
"

4 
	$£rvî
(*
cookõ
, *
¨gp
, 
size_t
 
¨g_size
,

5 
do‹_desc_t
 *
dp
, 
size_t
 
n_des¸ùt‹s
)

7 *
¨g
, 
ªsu…
[4];

8 
do‹_¸ed_t
 
öfo
;

10 i‡(
¨gp
 =
DOOR_UNREF_DATA
) {

11 
	`¥ötf
("door unreferenced\n");

12 
	`Do‹_ªtu∫
(
NULL
, 0, NULL, 0);

15 
	`¥ötf
("server called,Åhread id %ld, %d bytes ofárguments, cookie = %p\n",

16 
	`¥_thªad_id
(
NULL
), 
¨g_size
, 
cookõ
);

17 
	`¶ìp
(3);

18 
	`Do‹_¸ed
(&
öfo
);

19 
	`¥ötf
("euid = %ld,Ñuid = %ld,Öid = %ld\n",

20 (Ë
öfo
.
dc_euid
, (Ëöfo.
dc_ruid
, (Ëöfo.
dc_pid
);

22 
¨g
 = (*Ë
¨gp
;

23 
	`¥ötf
("arg[0] = %ld,árg[1] = %ld,árg[2] = %ld,árg[3]= %ld\n\n",

24 
¨g
[0],árg[1],árg[2],árg[3]);

26 
ªsu…
[0] = 
¨g
[0] *árg[0];

27 
ªsu…
[1] = 
¨g
[1] *árg[1];

28 
ªsu…
[2] = 
¨g
[2] *árg[2];

29 
ªsu…
[3] = 
¨g
[3] *árg[3];

30 
	`Do‹_ªtu∫
((*Ë
ªsu…
, ‘esu…), 
NULL
, 0);

31 
	}
}

33 
	gfd
 = -1;

36 
	$my_thªad
(*
¨g
)

38 
ﬁd°©e
;

40 i‡(
¨g
 =
£rvî
) {

41 
fd
 == -1)

42 
	`thr_yõld
();

44 
	`±hªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_DISABLE
, &
ﬁd°©e
);

45 
	`Do‹_böd
(
fd
);

46 
	`Do‹_ªtu∫
(
NULL
, 0, NULL, 0);

48 
	`îr_quô
("my_thread: unknown function");

49 (
NULL
);

50 
	}
}

53 
	$my_¸óã
(
do‹_öfo_t
 *
ùå
)

55 
±hªad_t
 
tid
;

56 
±hªad_©å_t
 
©å
;

58 
	`¥ötf
("t£rvî1: i±∏%p\n", 
ùå
);

59 
	`Pthªad_©å_öô
(&
©å
);

60 
	`Pthªad_©å_£tsc›e
(&
©å
, 
PTHREAD_SCOPE_SYSTEM
);

61 
	`Pthªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

62 
	`Pthªad_¸óã
(&
tid
, &
©å
, 
my_thªad
, (*Ë
ùå
->
di_¥oc
);

63 
	`Pthªad_©å_de°roy
(&
©å
);

64 
	`¥ötf
("¸óãd sîvîÅhªad %ld\n", 
	`¥_thªad_id
(&
tid
));

65 
	}
}

68 
	$maö
(
¨gc
, **
¨gv
)

70 
°©
 stat;

72 i‡(
¨gc
 != 2)

73 
	`îr_quô
("usage: server1 <pathname>");

75 
	`Do‹_£rvî_¸óã
(
my_¸óã
);

78 
fd
 = 
	`Do‹_¸óã
(
£rvî
, (*Ë44, 
DOOR_PRIVATE
);

79 
	`F°©
(
fd
, &
°©
);

80 
	`¥ötf
("£rvî(Ë© %p, fmà%lx\n", 
£rvî
,

81 (Ë
°©
.
°_mode
 & 
S_IFMT
);

84 
	`u∆ök
(
¨gv
[1]);

85 
	`Clo£
(
	`O≥n
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
));

86 
	`F©èch
(
fd
, 
¨gv
[1]);

91 
	`∑u£
();

92 
	}
}

	@doors/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@fifocliserv/fifo.h

1 
	~"u≈ùc.h
"

3 
	#SERV_FIFO
 "/tmp/fifo.£rv"

	)

	@fifocliserv/mainclient.c

1 
	~"fifo.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
ªadfifo
, 
wrôefifo
;

7 
size_t
 
Àn
;

8 
ssize_t
 
n
;

9 *
±r
, 
fif⁄ame
[
MAXLINE
], 
buff
[MAXLINE];

10 
pid_t
 
pid
;

13 
pid
 = 
	`gëpid
();

14 
	`¢¥ötf
(
fif⁄ame
, (fif⁄ame), "/tmp/fifo.%ld", (Ë
pid
);

15 i‡((
	`mkfifo
(
fif⁄ame
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
))

16 
	`îr_sys
("ˇn'à¸óã %s", 
fif⁄ame
);

19 
	`¢¥ötf
(
buff
, (buff), "%ld ", (Ë
pid
);

20 
Àn
 = 
	`°æí
(
buff
);

21 
±r
 = 
buff
 + 
Àn
;

24 
	`Fgës
(
±r
, 
MAXLINE
 - 
Àn
, 
°dö
);

25 
Àn
 = 
	`°æí
(
buff
);

28 
wrôefifo
 = 
	`O≥n
(
SERV_FIFO
, 
O_WRONLY
, 0);

29 
	`Wrôe
(
wrôefifo
, 
buff
, 
Àn
);

32 
ªadfifo
 = 
	`O≥n
(
fif⁄ame
, 
O_RDONLY
, 0);

35  (
n
 = 
	`Ród
(
ªadfifo
, 
buff
, 
MAXLINE
)) > 0)

36 
	`Wrôe
(
STDOUT_FILENO
, 
buff
, 
n
);

38 
	`Clo£
(
ªadfifo
);

39 
	`U∆ök
(
fif⁄ame
);

40 
	`exô
(0);

41 
	}
}

	@fifocliserv/mainserver.c

1 
	~"fifo.h
"

3 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
ªadfifo
, 
wrôefifo
, 
dummyfd
, 
fd
;

9 *
±r
, 
buff
[
MAXLINE
], 
fif⁄ame
[MAXLINE];

10 
pid_t
 
pid
;

11 
ssize_t
 
n
;

14 i‡((
	`mkfifo
(
SERV_FIFO
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
))

15 
	`îr_sys
("ˇn'à¸óã %s", 
SERV_FIFO
);

18 
ªadfifo
 = 
	`O≥n
(
SERV_FIFO
, 
O_RDONLY
, 0);

19 
dummyfd
 = 
	`O≥n
(
SERV_FIFO
, 
O_WRONLY
, 0);

21  (
n
 = 
	`Ródlöe
(
ªadfifo
, 
buff
, 
MAXLINE
)) > 0) {

22 i‡(
buff
[
n
-1] == '\n')

23 
n
--;

24 
buff
[
n
] = '\0';

26 i‡–(
±r
 = 
	`°rchr
(
buff
, ' ')Ë=
NULL
) {

27 
	`îr_msg
("bogu†ªque°: %s", 
buff
);

31 *
±r
++ = 0;

32 
pid
 = 
	`©ﬁ
(
buff
);

33 
	`¢¥ötf
(
fif⁄ame
, (fif⁄ame), "/tmp/fifo.%ld", (Ë
pid
);

34 i‡–(
wrôefifo
 = 
	`›í
(
fif⁄ame
, 
O_WRONLY
, 0)) < 0) {

35 
	`îr_msg
("ˇ¬Ÿ o≥n: %s", 
fif⁄ame
);

39 i‡–(
fd
 = 
	`›í
(
±r
, 
O_RDONLY
)) < 0) {

41 
	`¢¥ötf
(
buff
 + 
n
, (buff) -Ç, ": can't open, %s\n",

42 
	`°ªº‹
(
î∫o
));

43 
n
 = 
	`°æí
(
±r
);

44 
	`Wrôe
(
wrôefifo
, 
±r
, 
n
);

45 
	`Clo£
(
wrôefifo
);

49  (
n
 = 
	`Ród
(
fd
, 
buff
, 
MAXLINE
)) > 0)

50 
	`Wrôe
(
wrôefifo
, 
buff
, 
n
);

51 
	`Clo£
(
fd
);

52 
	`Clo£
(
wrôefifo
);

55 
	}
}

	@fifocliserv/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@lib/daemon_inetd.c

1 
	~"u≈ùc.h
"

2 
	~<sy¶og.h
>

4 
d´m⁄_¥oc
;

7 
	$d´m⁄_öëd
(c⁄° *
≤ame
, 
Ácûôy
)

9 
d´m⁄_¥oc
 = 1;

10 
	`›ílog
(
≤ame
, 
LOG_PID
, 
Ácûôy
);

11 
	}
}

	@lib/daemon_init.c

1 
	~"u≈ùc.h
"

2 
	~<sy¶og.h
>

4 
	#MAXFD
 64

	)

6 
d´m⁄_¥oc
;

9 
	$d´m⁄_öô
(c⁄° *
≤ame
, 
Ácûôy
)

11 
i
;

12 
pid_t
 
pid
;

14 i‡–(
pid
 = 
	`F‹k
()) != 0)

15 
	`exô
(0);

18 
	`£tsid
();

20 
	`Sig«l
(
SIGHUP
, 
SIG_IGN
);

21 i‡–(
pid
 = 
	`F‹k
()) != 0)

22 
	`exô
(0);

25 
d´m⁄_¥oc
 = 1;

27 
	`chdú
("/");

29 
	`umask
(0);

31 
i
 = 0; i < 
MAXFD
; i++)

32 
	`˛o£
(
i
);

34 
	`›ílog
(
≤ame
, 
LOG_PID
, 
Ácûôy
);

35 
	}
}

	@lib/error.c

1 
	~"u≈ùc.h
"

3 
	~<°d¨g.h
>

4 
	~<sy¶og.h
>

6 
	gd´m⁄_¥oc
;

8 
îr_doô
(, , c⁄° *, 
va_li°
);

15 
	$îr_ªt
(c⁄° *
fmt
, ...)

17 
va_li°
 
≠
;

19 
	`va_°¨t
(
≠
, 
fmt
);

20 
	`îr_doô
(1, 
LOG_INFO
, 
fmt
, 
≠
);

21 
	`va_íd
(
≠
);

23 
	}
}

30 
	$îr_sys
(c⁄° *
fmt
, ...)

32 
va_li°
 
≠
;

34 
	`va_°¨t
(
≠
, 
fmt
);

35 
	`îr_doô
(1, 
LOG_ERR
, 
fmt
, 
≠
);

36 
	`va_íd
(
≠
);

37 
	`exô
(1);

38 
	}
}

45 
	$îr_dump
(c⁄° *
fmt
, ...)

47 
va_li°
 
≠
;

49 
	`va_°¨t
(
≠
, 
fmt
);

50 
	`îr_doô
(1, 
LOG_ERR
, 
fmt
, 
≠
);

51 
	`va_íd
(
≠
);

52 
	`ab‹t
();

53 
	`exô
(1);

54 
	}
}

61 
	$îr_msg
(c⁄° *
fmt
, ...)

63 
va_li°
 
≠
;

65 
	`va_°¨t
(
≠
, 
fmt
);

66 
	`îr_doô
(0, 
LOG_INFO
, 
fmt
, 
≠
);

67 
	`va_íd
(
≠
);

69 
	}
}

76 
	$îr_quô
(c⁄° *
fmt
, ...)

78 
va_li°
 
≠
;

80 
	`va_°¨t
(
≠
, 
fmt
);

81 
	`îr_doô
(0, 
LOG_ERR
, 
fmt
, 
≠
);

82 
	`va_íd
(
≠
);

83 
	`exô
(1);

84 
	}
}

91 
	$îr_doô
(
î∫oÊag
, 
Àvñ
, c⁄° *
fmt
, 
va_li°
 
≠
)

93 
î∫o_ßve
, 
n
;

94 
buf
[
MAXLINE
];

96 
î∫o_ßve
 = 
î∫o
;

97 #ifdef 
HAVE_VSNPRINTF


98 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

100 
	`v•rötf
(
buf
, 
fmt
, 
≠
);

102 
n
 = 
	`°æí
(
buf
);

103 i‡(
î∫oÊag
)

104 
	`¢¥ötf
(
buf
+
n
, (buf)-n, ": %s", 
	`°ªº‹
(
î∫o_ßve
));

105 
	`°rˇt
(
buf
, "\n");

107 i‡(
d´m⁄_¥oc
) {

108 
	`sy¶og
(
Àvñ
, 
buf
);

110 
	`fÊush
(
°dout
);

111 
	`Âuts
(
buf
, 
°dîr
);

112 
	`fÊush
(
°dîr
);

115 
	}
}

	@lib/gf_time.c

1 
	~"u≈ùc.h
"

2 
	~<time.h
>

5 
	$gf_time
()

7 
timevÆ
 
tv
;

8 
°r
[30];

9 *
±r
;

11 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) < 0)

12 
	`îr_sys
("gettimeofdayÉrror");

14 
±r
 = 
	`˘ime
(&
tv
.
tv_£c
);

15 
	`°r˝y
(
°r
, &
±r
[11]);

18 
	`¢¥ötf
(
°r
+8, (°r)-8, ".%06ld", 
tv
.
tv_u£c
);

20 (
°r
);

21 
	}
}

24 
	$Gf_time
()

26 (
	`gf_time
());

27 
	}
}

	@lib/isfdtype.c

1 
	~"u≈ùc.h
"

3 #i‚def 
S_IFSOCK


4 #îr‹ 
S_IFSOCK
 
nŸ
 
deföed


8 
	$isfdty≥
(
fd
, 
fdty≥
)

10 
°©
 
buf
;

12 i‡(
	`f°©
(
fd
, &
buf
) < 0)

15 i‡((
buf
.
°_mode
 & 
S_IFMT
Ë=
fdty≥
)

19 
	}
}

	@lib/lock_reg.c

2 
	~"u≈ùc.h
"

5 
	$lock_ªg
(
fd
, 
cmd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
)

7 
Êock
 
lock
;

9 
lock
.
l_ty≥
 = 
ty≥
;

10 
lock
.
l_°¨t
 = 
off£t
;

11 
lock
.
l_whí˚
 = 
whí˚
;

12 
lock
.
l_Àn
 = 
Àn
;

14 –
	`f˙é
(
fd
, 
cmd
, &
lock
) );

15 
	}
}

19 
	$Lock_ªg
(
fd
, 
cmd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
)

21 i‡(
	`lock_ªg
(
fd
, 
cmd
, 
ty≥
, 
off£t
, 
whí˚
, 
Àn
) == -1)

22 
	`îr_sys
("lock_regÉrror");

23 
	}
}

	@lib/lock_test.c

2 
	~"u≈ùc.h
"

4 
pid_t


5 
	$lock_ã°
(
fd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
)

7 
Êock
 
lock
;

9 
lock
.
l_ty≥
 = 
ty≥
;

10 
lock
.
l_°¨t
 = 
off£t
;

11 
lock
.
l_whí˚
 = 
whí˚
;

12 
lock
.
l_Àn
 = 
Àn
;

14 i‡(
	`f˙é
(
fd
, 
F_GETLK
, &
lock
) == -1)

17 i‡(
lock
.
l_ty≥
 =
F_UNLCK
)

19 (
lock
.
l_pid
);

20 
	}
}

23 
pid_t


24 
	$Lock_ã°
(
fd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
)

26 
pid_t
 
pid
;

28 i‡–(
pid
 = 
	`lock_ã°
(
fd
, 
ty≥
, 
off£t
, 
whí˚
, 
Àn
)) == -1)

29 
	`îr_sys
("lock_testÉrror");

30 (
pid
);

31 
	}
}

	@lib/my_shm.c

2 
	~"u≈ùc.h
"

5 
	$my_shm
(
size_t
 
nbyãs
)

7 *
sh¨ed
;

9 #if 
	`deföed
(
MAP_ANON
)

10 
sh¨ed
 = 
	`mm≠
(
NULL
, 
nbyãs
, 
PROT_READ
 | 
PROT_WRITE
,

11 
MAP_ANON
 | 
MAP_SHARED
, -1, 0);

13 #ñif 
	`deföed
(
HAVE_DEV_ZERO
)

14 
fd
;

17 i‡–(
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
)) == -1)

18 (
MAP_FAILED
);

19 
sh¨ed
 = 
	`mm≠
(
NULL
, 
nbyãs
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

20 
	`˛o£
(
fd
);

23 #îr‹ 
ˇ¬Ÿ
 
dëîmöe
 
wh©
 
ty≥
 
of
 
™⁄ymous
 
sh¨ed
 
mem‹y
 
to
 
u£


25 (
sh¨ed
);

26 
	}
}

30 
	$My_shm
(
size_t
 
nbyãs
)

32 *
sh¨ed
;

34 i‡–(
sh¨ed
 = 
	`my_shm
(
nbyãs
)Ë=
MAP_FAILED
)

35 
	`îr_sys
("my_shmÉrror");

36 (
sh¨ed
);

37 
	}
}

	@lib/pselect.c

10 
	~"u≈ùc.h
"

13 
	$p£À˘
(
nfds
, 
fd_£t
 *
r£t
, fd_£à*
w£t
, fd_£à*
x£t
,

14 c⁄° 
time•ec
 *
ts
, c⁄° 
sig£t_t
 *
sigmask
)

16 
n
;

17 
timevÆ
 
tv
;

18 
sig£t_t
 
ßvemask
;

20 i‡(
ts
 !
NULL
) {

21 
tv
.
tv_£c
 = 
ts
->tv_sec;

22 
tv
.
tv_u£c
 = 
ts
->
tv_n£c
 / 1000;

25 
	`sig¥ocmask
(
SIG_SETMASK
, 
sigmask
, &
ßvemask
);

26 
n
 = 
	`£À˘
(
nfds
, 
r£t
, 
w£t
, 
x£t
, (
ts
 =
NULL
Ë? NULL : &
tv
);

27 
	`sig¥ocmask
(
SIG_SETMASK
, &
ßvemask
, 
NULL
);

29 (
n
);

30 
	}
}

	@lib/px_ipc_name.c

2 
	~"u≈ùc.h
"

5 
	$px_ùc_«me
(c⁄° *
«me
)

7 *
dú
, *
d°
, *
¶ash
;

9 i‡–(
d°
 = 
	`mÆloc
(
PATH_MAX
)Ë=
NULL
)

10 (
NULL
);

13 i‡–(
dú
 = 
	`gëív
("PX_IPC_NAME")Ë=
NULL
) {

14 #ifdef 
POSIX_IPC_PREFIX


15 
dú
 = 
POSIX_IPC_PREFIX
;

17 
dú
 = "/tmp/";

21 
¶ash
 = (
dú
[
	`°æí
(dir) - 1] == '/') ? "" : "/";

22 
	`¢¥ötf
(
d°
, 
PATH_MAX
, "%s%s%s", 
dú
, 
¶ash
, 
«me
);

24 (
d°
);

25 
	}
}

29 
	$Px_ùc_«me
(c⁄° *
«me
)

31 *
±r
;

33 i‡–(
±r
 = 
	`px_ùc_«me
(
«me
)Ë=
NULL
)

34 
	`îr_sys
("px_ùc_«mêîr‹ f‹ %s", 
«me
);

35 (
±r
);

36 
	}
}

	@lib/readable_timeo.c

2 
	~"u≈ùc.h
"

5 
	$ªadabÀ_timeo
(
fd
, 
£c
)

7 
fd_£t
 
r£t
;

8 
timevÆ
 
tv
;

10 
	`FD_ZERO
(&
r£t
);

11 
	`FD_SET
(
fd
, &
r£t
);

13 
tv
.
tv_£c
 = 
£c
;

14 
tv
.
tv_u£c
 = 0;

16 (
	`£À˘
(
fd
+1, &
r£t
, 
NULL
, NULL, &
tv
));

18 
	}
}

22 
	$RódabÀ_timeo
(
fd
, 
£c
)

24 
n
;

26 i‡–(
n
 = 
	`ªadabÀ_timeo
(
fd
, 
£c
)) < 0)

27 
	`îr_sys
("readable_timeoÉrror");

28 (
n
);

29 
	}
}

	@lib/readline.c

2 
	~"u≈ùc.h
"

4 
ssize_t


5 
	$my_ªad
(
fd
, *
±r
)

7 
ªad_˙t
 = 0;

8 *
ªad_±r
;

9 
ªad_buf
[
MAXLINE
];

11 i‡(
ªad_˙t
 <= 0) {

12 
agaö
:

13 i‡–(
ªad_˙t
 = 
	`ªad
(
fd
, 
ªad_buf
, (read_buf))) < 0) {

14 i‡(
î∫o
 =
EINTR
)

15 
agaö
;

17 } i‡(
ªad_˙t
 == 0)

19 
ªad_±r
 = 
ªad_buf
;

22 
ªad_˙t
--;

23 *
±r
 = *
ªad_±r
++;

25 
	}
}

27 
ssize_t


28 
	$ªadlöe
(
fd
, *
v±r
, 
size_t
 
maxÀn
)

30 
n
, 
rc
;

31 
c
, *
±r
;

33 
±r
 = 
v±r
;

34 
n
 = 1;Ç < 
maxÀn
;Ç++) {

35 i‡–(
rc
 = 
	`my_ªad
(
fd
, &
c
)) == 1) {

36 *
±r
++ = 
c
;

37 i‡(
c
 == '\n')

39 } i‡(
rc
 == 0) {

40 i‡(
n
 == 1)

48 *
±r
 = 0;

49 (
n
);

50 
	}
}

53 
ssize_t


54 
	$Ródlöe
(
fd
, *
±r
, 
size_t
 
maxÀn
)

56 
ssize_t
 
n
;

58 i‡–(
n
 = 
	`ªadlöe
(
fd
, 
±r
, 
maxÀn
)) < 0)

59 
	`îr_sys
("readlineÉrror");

60 (
n
);

61 
	}
}

	@lib/readn.c

2 
	~"u≈ùc.h
"

4 
ssize_t


5 
	$ªadn
(
fd
, *
v±r
, 
size_t
 
n
)

7 
size_t
 
∆e·
;

8 
ssize_t
 
ƒód
;

9 *
±r
;

11 
±r
 = 
v±r
;

12 
∆e·
 = 
n
;

13 
∆e·
 > 0) {

14 i‡–(
ƒód
 = 
	`ªad
(
fd
, 
±r
, 
∆e·
)) < 0) {

15 i‡(
î∫o
 =
EINTR
)

16 
ƒód
 = 0;

19 } i‡(
ƒód
 == 0)

22 
∆e·
 -
ƒód
;

23 
±r
 +
ƒód
;

25 (
n
 - 
∆e·
);

26 
	}
}

29 
ssize_t


30 
	$Ródn
(
fd
, *
±r
, 
size_t
 
nbyãs
)

32 
ssize_t
 
n
;

34 i‡–(
n
 = 
	`ªadn
(
fd
, 
±r
, 
nbyãs
)) < 0)

35 
	`îr_sys
("readnÉrror");

36 (
n
);

37 
	}
}

	@lib/set_concurrency.c

1 
	~"u≈ùc.h
"

4 
	$£t_c⁄cuºícy
(
Àvñ
)

6 #ifdef 
HAVE_THR_SETCONCURRENCY_PROTO


7 
	`thr_£tc⁄cuºícy
();

9 (
	`thr_£tc⁄cuºícy
(
Àvñ
));

13 
	}
}

16 
	$Së_c⁄cuºícy
(
Àvñ
)

18 i‡(
	`£t_c⁄cuºícy
(
Àvñ
) != 0)

19 
	`îr_sys
("set_concurrencyÉrror");

20 
	}
}

	@lib/set_nonblock.c

1 
	~"u≈ùc.h
"

4 
	$£t_n⁄block
(
fd
)

6 
Êags
;

8 i‡–(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0)) < 0)

10 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0)

13 
	}
}

16 
	$Së_n⁄block
(
fd
)

18 i‡(
	`£t_n⁄block
(
fd
) < 0)

19 
	`îr_sys
("set_nonblockÉrror");

20 
	}
}

	@lib/signal.c

2 
	~"u≈ùc.h
"

4 
Sigfunc
 *

5 
	$sig«l
(
signo
, 
Sigfunc
 *
func
)

7 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

9 
a˘
.
ß_h™dÀr
 = 
func
;

10 
	`sigem±y£t
(&
a˘
.
ß_mask
);

11 
a˘
.
ß_Êags
 = 0;

12 i‡(
signo
 =
SIGALRM
) {

13 #ifdef 
SA_INTERRUPT


14 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

17 #ifdef 
SA_RESTART


18 
a˘
.
ß_Êags
 |
SA_RESTART
;

21 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

22 (
SIG_ERR
);

23 (
ﬂ˘
.
ß_h™dÀr
);

24 
	}
}

27 
Sigfunc
 *

28 
	$Sig«l
(
signo
, 
Sigfunc
 *
func
)

30 
Sigfunc
 *
sigfunc
;

32 i‡–(
sigfunc
 = 
	`sig«l
(
signo
, 
func
)Ë=
SIG_ERR
)

33 
	`îr_sys
("signalÉrror");

34 (
sigfunc
);

35 
	}
}

	@lib/signal_intr.c

2 
	~"u≈ùc.h
"

4 
Sigfunc
 *

5 
	$sig«l_öå
(
signo
, 
Sigfunc
 *
func
)

7 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

9 
a˘
.
ß_h™dÀr
 = 
func
;

10 
	`sigem±y£t
(&
a˘
.
ß_mask
);

11 
a˘
.
ß_Êags
 = 0;

12 #ifdef 
SA_INTERRUPT


13 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

15 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

16 (
SIG_ERR
);

17 (
ﬂ˘
.
ß_h™dÀr
);

18 
	}
}

21 
Sigfunc
 *

22 
	$Sig«l_öå
(
signo
, 
Sigfunc
 *
func
)

24 
Sigfunc
 *
sigfunc
;

26 i‡–(
sigfunc
 = 
	`sig«l_öå
(
signo
, 
func
)Ë=
SIG_ERR
)

27 
	`îr_sys
("signal_intrÉrror");

28 (
sigfunc
);

29 
	}
}

	@lib/signal_rt.c

2 
	~"u≈ùc.h
"

4 
Sigfunc_π
 *

5 
	$sig«l_π
(
signo
, 
Sigfunc_π
 *
func
)

7 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

9 
a˘
.
ß_siga˘i⁄
 = 
func
;

10 
	`sigem±y£t
(&
a˘
.
ß_mask
);

11 
a˘
.
ß_Êags
 = 
SA_SIGINFO
;

12 i‡(
signo
 =
SIGALRM
) {

13 #ifdef 
SA_INTERRUPT


14 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

17 #ifdef 
SA_RESTART


18 
a˘
.
ß_Êags
 |
SA_RESTART
;

21 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

22 ((
Sigfunc_π
 *Ë
SIG_ERR
);

23 (
ﬂ˘
.
ß_siga˘i⁄
);

24 
	}
}

27 
Sigfunc_π
 *

28 
	$Sig«l_π
(
signo
, 
Sigfunc_π
 *
func
)

30 
Sigfunc_π
 *
sigfunc
;

32 i‡–(
sigfunc
 = 
	`sig«l_π
(
signo
, 
func
)Ë=(
Sigfunc_π
 *Ë
SIG_ERR
)

33 
	`îr_sys
("signal_rtÉrror");

34 (
sigfunc
);

35 
	}
}

	@lib/signal_rt_intr.c

2 
	~"u≈ùc.h
"

4 
Sigfunc_π
 *

5 
	$sig«l_π_öå
(
signo
, 
Sigfunc_π
 *
func
)

7 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

9 
a˘
.
ß_siga˘i⁄
 = 
func
;

10 
	`sigem±y£t
(&
a˘
.
ß_mask
);

11 
a˘
.
ß_Êags
 = 
SA_SIGINFO
;

12 #ifdef 
SA_INTERRUPT


13 
a˘
.
ß_Êags
 |
SA_INTERRUPT
;

15 i‡(
	`siga˘i⁄
(
signo
, &
a˘
, &
ﬂ˘
) < 0)

16 ((
Sigfunc_π
 *Ë
SIG_ERR
);

17 (
ﬂ˘
.
ß_siga˘i⁄
);

18 
	}
}

21 
Sigfunc_π
 *

22 
	$Sig«l_π_öå
(
signo
, 
Sigfunc_π
 *
func
)

24 
Sigfunc_π
 *
sigfunc
;

26 i‡–(
sigfunc
 = 
	`sig«l_π_öå
(
signo
, 
func
)Ë=(
Sigfunc_π
 *Ë
SIG_ERR
)

27 
	`îr_sys
("signal_rt_intrÉrror");

28 (
sigfunc
);

29 
	}
}

	@lib/sleep_us.c

1 
	~"u≈ùc.h
"

4 
	$¶ìp_us
(
nu£cs
)

6 
timevÆ
 
tvÆ
;

8 i‡(
nu£cs
 == 0)

12 
tvÆ
.
tv_£c
 = 
nu£cs
 / 1000000;

13 
tvÆ
.
tv_u£c
 = 
nu£cs
 % 1000000;

14 i‡(
	`£À˘
(0, 
NULL
, NULL, NULL, &
tvÆ
) == 0)

24 i‡(
î∫o
 !
EINTR
)

28 
	}
}

31 
	$SÀï_us
(
nu£cs
)

33 i‡(
	`¶ìp_us
(
nu£cs
) == -1)

34 
	`îr_sys
("sleep_usÉrror");

35 
	}
}

	@lib/snprintf.c

10 
	~"u≈ùc.h
"

12 
	~<°d¨g.h
>

15 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

17 
n
;

18 
va_li°
 
≠
;

20 
	`va_°¨t
(
≠
, 
fmt
);

21 
	`v•rötf
(
buf
, 
fmt
, 
≠
);

22 
n
 = 
	`°æí
(
buf
);

23 
	`va_íd
(
≠
);

24 i‡(
n
 >
size
)

25 
	`îr_quô
("¢¥ötf: '%s' ovîÊowedáºay", 
fmt
);

26 (
n
);

27 
	}
}

	@lib/timing.c

2 
	~"u≈ùc.h
"

4 
timevÆ
 
	gtv_°¨t
, 
	gtv_°›
;

7 
	$°¨t_time
()

9 (
	`gëtimeofday
(&
tv_°¨t
, 
NULL
));

10 
	}
}

13 
	$°›_time
()

15 
˛ockus
;

17 i‡(
	`gëtimeofday
(&
tv_°›
, 
NULL
) == -1)

19 
	`tv_sub
(&
tv_°›
, &
tv_°¨t
);

20 
˛ockus
 = 
tv_°›
.
tv_£c
 * 1000000.0 +Åv_°›.
tv_u£c
;

21 (
˛ockus
);

22 
	}
}

25 
	$touch
(*
v±r
, 
nbyãs
)

27 *
˝å
;

28 
∑gesize
 = 0;

30 i‡(
∑gesize
 == 0) {

31 
î∫o
 = 0;

32 #ifdef 
_SC_PAGESIZE


33 i‡–(
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
)) == -1)

36 
∑gesize
 = 
	`gë∑gesize
();

40 
˝å
 = 
v±r
;

41 
nbyãs
 > 0) {

42 *
˝å
 = 1;

43 
˝å
 +
∑gesize
;

44 
nbyãs
 -
∑gesize
;

47 
	}
}

51 
	$Sèπ_time
()

53 i‡(
	`°¨t_time
() == -1)

54 
	`îr_sys
("start_timeÉrror");

55 
	}
}

58 
	$St›_time
()

60 
˛ockus
;

62 i‡–(
˛ockus
 = 
	`°›_time
()) == 0.0)

63 
	`îr_sys
("stop_timeÉrror");

64 (
˛ockus
);

65 
	}
}

68 
	$Touch
(*
v±r
, 
nbyãs
)

70 i‡(
	`touch
(
v±r
, 
nbyãs
) == -1)

71 
	`îr_sys
("touchÉrror");

72 
	}
}

	@lib/tv_sub.c

1 
	~"u≈ùc.h
"

4 
	$tv_sub
(
timevÆ
 *
out
, timevÆ *
ö
)

6 i‡–(
out
->
tv_u£c
 -
ö
->tv_usec) < 0) {

7 --
out
->
tv_£c
;

8 
out
->
tv_u£c
 += 1000000;

10 
out
->
tv_£c
 -
ö
->tv_sec;

11 
	}
}

	@lib/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@lib/wrapdoor.c

5 
	~"u≈ùc.h
"

8 
	$Do‹_böd
(
fd
)

10 i‡(
	`do‹_böd
(
fd
) == -1)

11 
	`îr_sys
("door_bindÉrror");

12 
	}
}

15 
	$Do‹_ˇŒ
(
fd
, 
do‹_¨g_t
 *
¨g
)

17 i‡(
	`do‹_ˇŒ
(
fd
, 
¨g
) == -1)

18 
	`îr_sys
("door_callÉrror");

19 
	}
}

22 
	$Do‹_¸óã
(
Do‹_£rvî_¥oc
 *
¥oc
, *
cookõ
, 
u_öt
 
©å
)

24 
rc
;

26 i‡–(
rc
 = 
	`do‹_¸óã
(
¥oc
, 
cookõ
, 
©å
)) == -1)

27 
	`îr_sys
("door_createÉrror");

28 (
rc
);

29 
	}
}

32 
	$Do‹_¸ed
(
do‹_¸ed_t
 *
öfo
)

34 i‡(
	`do‹_¸ed
(
öfo
) == -1)

35 
	`îr_sys
("door_credÉrror");

36 
	}
}

39 
	$Do‹_öfo
(
fd
, 
do‹_öfo_t
 *
öfo
)

41 i‡(
	`do‹_öfo
(
fd
, 
öfo
) == -1)

42 
	`îr_sys
("door_infoÉrror");

43 
	}
}

46 
	$Do‹_ªtu∫
(*
d©a_±r
, 
size_t
 
d©a_size
,

47 
do‹_desc_t
 *
desc_±r
, 
size_t
 
num_desc
)

49 i‡(
	`do‹_ªtu∫
(
d©a_±r
, 
d©a_size
, 
desc_±r
, 
num_desc
) == -1)

50 
	`îr_sys
("door_returnÉrror");

51 
	}
}

54 
	$Do‹_ªvoke
(
fd
)

56 i‡(
	`do‹_ªvoke
(
fd
) == -1)

57 
	`îr_sys
("door_revokeÉrror");

58 
	}
}

60 
Do‹_¸óã_¥oc
 *

61 
	$Do‹_£rvî_¸óã
(
Do‹_¸óã_¥oc
 *
√w
)

63 
Do‹_¸óã_¥oc
 *
ﬁd
;

65 
ﬁd
 = 
	`do‹_£rvî_¸óã
(
√w
);

66 (
ﬁd
);

67 
	}
}

70 
	$Do‹_unböd
()

72 i‡(
	`do‹_unböd
() == -1)

73 
	`îr_sys
("door_unbindÉrror");

74 
	}
}

	@lib/wrappthread.c

7 
	~"u≈ùc.h
"

10 
	$Pthªad_©å_öô
(
±hªad_©å_t
 *
©å
)

12 
n
;

14 i‡–(
n
 = 
	`±hªad_©å_öô
(
©å
)) == 0)

16 
î∫o
 = 
n
;

17 
	`îr_sys
("pthread_attr_initÉrror");

18 
	}
}

21 
	$Pthªad_©å_de°roy
(
±hªad_©å_t
 *
©å
)

23 
n
;

25 i‡–(
n
 = 
	`±hªad_©å_de°roy
(
©å
)) == 0)

27 
î∫o
 = 
n
;

28 
	`îr_sys
("pthread_attr_destroyÉrror");

29 
	}
}

32 
	$Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *
©å
, 
dëach
)

34 
n
;

36 i‡–(
n
 = 
	`±hªad_©å_£tdëach°©e
(
©å
, 
dëach
)) == 0)

38 
î∫o
 = 
n
;

39 
	`îr_sys
("pthread_attr_setdetachstateÉrror");

40 
	}
}

43 
	$Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *
©å
, 
sc›e
)

45 
n
;

47 i‡–(
n
 = 
	`±hªad_©å_£tsc›e
(
©å
, 
sc›e
)) == 0)

49 
î∫o
 = 
n
;

50 
	`îr_sys
("pthread_attr_setscopeÉrror");

51 
	}
}

54 
Pthªad_¸óã
(
±hªad_t
 *
tid
, c⁄° 
±hªad_©å_t
 *
©å
,

55 * (*
func
)(*), *
¨g
)

57 
	gn
;

59 i‡–(
	gn
 = 
±hªad_¸óã
(
tid
, 
©å
, 
func
, 
¨g
)) == 0)

61 
	gî∫o
 = 
n
;

62 
îr_sys
("pthread_createÉrror");

66 
	$Pthªad_joö
(
±hªad_t
 
tid
, **
°©us
)

68 
n
;

70 i‡–(
n
 = 
	`±hªad_joö
(
tid
, 
°©us
)) == 0)

72 
î∫o
 = 
n
;

73 
	`îr_sys
("pthread_joinÉrror");

74 
	}
}

77 
	$Pthªad_dëach
(
±hªad_t
 
tid
)

79 
n
;

81 i‡–(
n
 = 
	`±hªad_dëach
(
tid
)) == 0)

83 
î∫o
 = 
n
;

84 
	`îr_sys
("pthread_detachÉrror");

85 
	}
}

88 
	$Pthªad_kûl
(
±hªad_t
 
tid
, 
signo
)

90 
n
;

92 i‡–(
n
 = 
	`±hªad_kûl
(
tid
, 
signo
)) == 0)

94 
î∫o
 = 
n
;

95 
	`îr_sys
("pthread_killÉrror");

96 
	}
}

99 
	$Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *
©å
)

101 
n
;

103 i‡–(
n
 = 
	`±hªad_muãx©å_öô
(
©å
)) == 0)

105 
î∫o
 = 
n
;

106 
	`îr_sys
("pthread_mutexattr_initÉrror");

107 
	}
}

110 
	$Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *
©å
)

112 
n
;

114 i‡–(
n
 = 
	`±hªad_muãx©å_de°roy
(
©å
)) == 0)

116 
î∫o
 = 
n
;

117 
	`îr_sys
("pthread_mutexattr_destroyÉrror");

118 
	}
}

120 #ifdef 
_POSIX_THREAD_PROCESS_SHARED


122 
	$Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *
©å
, 
Êag
)

124 
n
;

126 i‡–(
n
 = 
	`±hªad_muãx©å_£çsh¨ed
(
©å
, 
Êag
)) == 0)

128 
î∫o
 = 
n
;

129 
	`îr_sys
("pthread_mutexattr_setpsharedÉrror");

130 
	}
}

134 
	$Pthªad_muãx_öô
(
±hªad_muãx_t
 *
m±r
, 
±hªad_muãx©å_t
 *
©å
)

136 
n
;

138 i‡–(
n
 = 
	`±hªad_muãx_öô
(
m±r
, 
©å
)) == 0)

140 
î∫o
 = 
n
;

141 
	`îr_sys
("pthread_mutex_initÉrror");

142 
	}
}

145 
	$Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *
m±r
)

147 
n
;

149 i‡–(
n
 = 
	`±hªad_muãx_de°roy
(
m±r
)) == 0)

151 
î∫o
 = 
n
;

152 
	`îr_sys
("pthread_mutex_destroyÉrror");

153 
	}
}

157 
	$Pthªad_muãx_lock
(
±hªad_muãx_t
 *
m±r
)

159 
n
;

161 i‡–(
n
 = 
	`±hªad_muãx_lock
(
m±r
)) == 0)

163 
î∫o
 = 
n
;

164 
	`îr_sys
("pthread_mutex_lockÉrror");

165 
	}
}

169 
	$Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *
m±r
)

171 
n
;

173 i‡–(
n
 = 
	`±hªad_muãx_u∆ock
(
m±r
)) == 0)

175 
î∫o
 = 
n
;

176 
	`îr_sys
("pthread_mutex_unlockÉrror");

177 
	}
}

180 
	$Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *
©å
)

182 
n
;

184 i‡–(
n
 = 
	`±hªad_c⁄d©å_öô
(
©å
)) == 0)

186 
î∫o
 = 
n
;

187 
	`îr_sys
("pthread_condattr_initÉrror");

188 
	}
}

191 
	$Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *
©å
)

193 
n
;

195 i‡–(
n
 = 
	`±hªad_c⁄d©å_de°roy
(
©å
)) == 0)

197 
î∫o
 = 
n
;

198 
	`îr_sys
("pthread_condattr_destroyÉrror");

199 
	}
}

201 #ifdef 
_POSIX_THREAD_PROCESS_SHARED


203 
	$Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *
©å
, 
Êag
)

205 
n
;

207 i‡–(
n
 = 
	`±hªad_c⁄d©å_£çsh¨ed
(
©å
, 
Êag
)) == 0)

209 
î∫o
 = 
n
;

210 
	`îr_sys
("pthread_condattr_setpsharedÉrror");

211 
	}
}

215 
	$Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *
˝å
)

217 
n
;

219 i‡–(
n
 = 
	`±hªad_c⁄d_brﬂdˇ°
(
˝å
)) == 0)

221 
î∫o
 = 
n
;

222 
	`îr_sys
("pthread_cond_broadcastÉrror");

223 
	}
}

226 
	$Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *
˝å
)

228 
n
;

230 i‡–(
n
 = 
	`±hªad_c⁄d_sig«l
(
˝å
)) == 0)

232 
î∫o
 = 
n
;

233 
	`îr_sys
("pthread_cond_signalÉrror");

234 
	}
}

237 
	$Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
˝å
, 
±hªad_muãx_t
 *
m±r
)

239 
n
;

241 i‡–(
n
 = 
	`±hªad_c⁄d_waô
(
˝å
, 
m±r
)) == 0)

243 
î∫o
 = 
n
;

244 
	`îr_sys
("pthread_cond_waitÉrror");

245 
	}
}

248 
	$Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *
˝å
, 
±hªad_muãx_t
 *
m±r
,

249 c⁄° 
time•ec
 *
t•å
)

251 
n
;

253 i‡–(
n
 = 
	`±hªad_c⁄d_timedwaô
(
˝å
, 
m±r
, 
t•å
)) == 0)

255 
î∫o
 = 
n
;

256 
	`îr_sys
("pthread_cond_timedwaitÉrror");

257 
	}
}

260 
Pthªad_⁄˚
(
±hªad_⁄˚_t
 *
±r
, (*
func
)())

262 
n
;

264 i‡–(
n
 = 
	`±hªad_⁄˚
(
±r
, 
func
)) == 0)

266 
î∫o
 = 
n
;

267 
	`îr_sys
("pthread_onceÉrror");

268 
	}
}

271 
Pthªad_key_¸óã
(
±hªad_key_t
 *
key
, (*
func
)(*))

273 
n
;

275 i‡–(
n
 = 
	`±hªad_key_¸óã
(
key
, 
func
)) == 0)

277 
î∫o
 = 
n
;

278 
	`îr_sys
("pthread_key_createÉrror");

279 
	}
}

282 
	$Pthªad_£tˇn˚l°©e
(
°©e
, *
ﬁd°©e
)

284 
n
;

286 i‡–(
n
 = 
	`±hªad_£tˇn˚l°©e
(
°©e
, 
ﬁd°©e
)) == 0)

288 
î∫o
 = 
n
;

289 
	`îr_sys
("pthread_setcancelstateÉrror");

290 
	}
}

293 
	$Pthªad_£t•ecific
(
±hªad_key_t
 
key
, c⁄° *
vÆue
)

295 
n
;

297 i‡–(
n
 = 
	`±hªad_£t•ecific
(
key
, 
vÆue
)) == 0)

299 
î∫o
 = 
n
;

300 
	`îr_sys
("pthread_setspecificÉrror");

301 
	}
}

305 
	$¥_thªad_id
(
±hªad_t
 *
±r
)

307 #i‡
	`deföed
(
sun
)

308 ((
±r
 =
NULL
Ë? 
	`±hªad_£lf
() : *ptr);

310 #ñi‡
	`deföed
(
__osf__
Ë&& deföed(
__Æpha
)

311 
±hªad_t
 
tid
;

313 
tid
 = (
±r
 =
NULL
Ë? 
	`±hªad_£lf
() : *ptr;

314 (
	`±hªad_gë£quí˚_≈
(
tid
));

317 ((
±r
 =
NULL
Ë? 
	`±hªad_£lf
() : *ptr);

319 
	}
}

	@lib/wrapstdio.c

5 
	~"u≈ùc.h
"

8 
	$F˛o£
(
FILE
 *
Â
)

10 i‡(
	`f˛o£
(
Â
) != 0)

11 
	`îr_sys
("fcloseÉrror");

12 
	}
}

14 
FILE
 *

15 
	$Fd›í
(
fd
, c⁄° *
ty≥
)

17 
FILE
 *
Â
;

19 i‡–(
Â
 = 
	`fd›í
(
fd
, 
ty≥
)Ë=
NULL
)

20 
	`îr_sys
("fdopenÉrror");

22 (
Â
);

23 
	}
}

26 
	$Fgës
(*
±r
, 
n
, 
FILE
 *
°ªam
)

28 *
Ωå
;

30 i‡–(
Ωå
 = 
	`fgës
(
±r
, 
n
, 
°ªam
)Ë=
NULL
 && 
	`„º‹
(stream))

31 
	`îr_sys
("fgetsÉrror");

33  (
Ωå
);

34 
	}
}

36 
FILE
 *

37 
	$F›í
(c⁄° *
∑th«me
, c⁄° *
mode
)

39 
FILE
 *
Â
;

41 i‡–(
Â
 = 
	`f›í
(
∑th«me
, 
mode
)Ë=
NULL
)

42 
	`îr_sys
("fopenÉrror");

44 (
Â
);

45 
	}
}

48 
	$Fputs
(c⁄° *
±r
, 
FILE
 *
°ªam
)

50 i‡(
	`Âuts
(
±r
, 
°ªam
Ë=
EOF
)

51 
	`îr_sys
("fputsÉrror");

52 
	}
}

54 
FILE
 *

55 
	$P›í
(c⁄° *
comm™d
, c⁄° *
mode
)

57 
FILE
 *
Â
;

59 i‡–(
Â
 = 
	`p›í
(
comm™d
, 
mode
)Ë=
NULL
)

60 
	`îr_sys
("popenÉrror");

61 (
Â
);

62 
	}
}

65 
	$P˛o£
(
FILE
 *
Â
)

67 
n
;

69 i‡–(
n
 = 
	`p˛o£
(
Â
)) == -1)

70 
	`îr_sys
("pcloseÉrror");

71 (
n
);

72 
	}
}

	@lib/wrapsunrpc.c

1 
	~"u≈ùc.h
"

3 
CLIENT
 *

4 
	$C t_¸óã
(c⁄° *
ho°
, 
u_l⁄g
 
¥og
, u_l⁄g 
vîs
, c⁄° *
¥Ÿo
)

6 
CLIENT
 *
˛
;

8 i‡–(
˛
 = 
	`˛¡_¸óã
(
ho°
, 
¥og
, 
vîs
, 
¥Ÿo
)Ë=
NULL
) {

9 
	`˛¡_p¸óãîr‹
(
ho°
);

10 
	`îr_quô
("clnt_createÉrror");

12 (
˛
);

13 
	}
}

16 
	$C t_c⁄åﬁ
(
CLIENT
 *
˛
, 
u_öt
 
ªq
, *
±r
)

18 i‡(
	`˛¡_c⁄åﬁ
(
˛
, 
ªq
, 
±r
Ë=
FALSE
) {

19 
	`îr_quô
("clnt_controlÉrror");

21 
	}
}

	@lib/wrapunix.c

19 
	~"u≈ùc.h
"

21 
	~<°d¨g.h
>

24 
	$CÆloc
(
size_t
 
n
, size_à
size
)

26 *
±r
;

28 i‡–(
±r
 = 
	`ˇŒoc
(
n
, 
size
)Ë=
NULL
)

29 
	`îr_sys
("callocÉrror");

30 (
±r
);

31 
	}
}

35 
	$Clo£
(
fd
)

37 i‡(
	`˛o£
(
fd
) == -1)

38 
	`îr_sys
("closeÉrror");

39 
	}
}

43 
	$Dup2
(
fd1
, 
fd2
)

45 i‡(
	`dup2
(
fd1
, 
fd2
) == -1)

46 
	`îr_sys
("dup2Érror");

47 
	}
}

49 #ifdef 
HAVE_FATTACH


51 
	$F©èch
(
fd
, c⁄° *
∑th
)

53 i‡(
	`Áâach
(
fd
, 
∑th
) == -1)

54 
	`îr_sys
("fattachÉrror");

55 
	}
}

59 
	$F˙é
(
fd
, 
cmd
, *
¨g
)

61 
n
;

63 i‡–(
n
 = 
	`f˙é
(
fd
, 
cmd
, 
¨g
)) == -1)

64 
	`îr_sys
("fcntlÉrror");

65 (
n
);

66 
	}
}

68 
pid_t


69 
	$F‹k
()

71 
pid_t
 
pid
;

73 i‡–(
pid
 = 
	`f‹k
()) == -1)

74 
	`îr_sys
("forkÉrror");

75 (
pid
);

76 
	}
}

79 
	$F∑thc⁄f
(
fd
, 
«me
)

81 
vÆ
;

83 
î∫o
 = 0;

84 i‡–(
vÆ
 = 
	`Â©hc⁄f
(
fd
, 
«me
)) == -1) {

85 i‡(
î∫o
 != 0)

86 
	`îr_sys
("fpathconfÉrror");

88 
	`îr_sys
("Â©hc⁄f: %dÇŸ deföed", 
«me
);

90 (
vÆ
);

91 
	}
}

94 
	$F°©
(
fd
, 
°©
 *
±r
)

96 i‡(
	`f°©
(
fd
, 
±r
) == -1)

97 
	`îr_sys
("fstatÉrror");

98 
	}
}

100 #ifdef 
HAVE_SYS_IPC_H


101 
key_t


102 
	$Ftok
(c⁄° *
∑th«me
, 
id
)

104 
key_t
 
key
;

106 i‡–(
key
 = 
	`·ok
(
∑th«me
, 
id
)) == -1)

107 
	`îr_sys
("·okÉº‹ f‹Ö©h«mê\"%s\"ánd id %d", 
∑th«me
, 
id
);

108 (
key
);

109 
	}
}

113 
	$Fåunˇã
(
fd
, 
off_t
 
Àngth
)

115 i‡(
	`·runˇã
(
fd
, 
Àngth
) == -1)

116 
	`îr_sys
("ftruncateÉrror");

117 
	}
}

120 
	$Gë›t
(
¨gc
, *c⁄° *
¨gv
, c⁄° *
°r
)

122 
›t
;

124 i‡––
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
°r
)) == '?')

125 
	`exô
(1);

126 (
›t
);

127 
	}
}

130 
	$Gëtimeofday
(
timevÆ
 *
tv
, *
foo
)

132 i‡(
	`gëtimeofday
(
tv
, 
foo
) == -1)

133 
	`îr_sys
("gettimeofdayÉrror");

135 
	}
}

138 
	$Io˘l
(
fd
, 
ªque°
, *
¨g
)

140 
n
;

142 i‡–(
n
 = 
	`io˘l
(
fd
, 
ªque°
, 
¨g
)) == -1)

143 
	`îr_sys
("ioctlÉrror");

144 (
n
);

145 
	}
}

148 
	$Kûl
(
pid_t
 
pid
, 
signo
)

150 i‡(
	`kûl
(
pid
, 
signo
) == -1)

151 
	`îr_sys
("killÉrror");

152 
	}
}

154 
off_t


155 
	$L£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
)

157 
off_t
 
pos
;

159 i‡–(
pos
 = 
	`l£ek
(
fd
, 
off£t
, 
whí˚
)Ë=(
off_t
) -1)

160 
	`îr_sys
("lseekÉrror");

161 (
pos
);

162 
	}
}

165 
	$MÆloc
(
size_t
 
size
)

167 *
±r
;

169 i‡–(
±r
 = 
	`mÆloc
(
size
)Ë=
NULL
)

170 
	`îr_sys
("mallocÉrror");

171 (
±r
);

172 
	}
}

175 
	$Mkfifo
(c⁄° *
∑th«me
, 
mode_t
 
mode
)

177 i‡(
	`mkfifo
(
∑th«me
, 
mode
) == -1)

178 
	`îr_sys
("mkfifÿîr‹ f‹ %s", 
∑th«me
);

179 
	}
}

182 
	$Mkãmp
(*
ãm∂©e
)

184 i‡(
	`mkãmp
(
ãm∂©e
Ë=
NULL
 ||Åemplate[0] == 0)

185 
	`îr_quô
("mktempÉrror");

186 
	}
}

188 #ifdef 
HAVE_SYS_MMAN_H


191 
	$Mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off£t
)

193 *
±r
;

195 i‡–(
±r
 = 
	`mm≠
(
addr
, 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
)Ë=
MAP_FAILED
)

196 
	`îr_sys
("mmapÉrror");

197 (
±r
);

198 
	}
}

201 
	$Munm≠
(*
addr
, 
size_t
 
Àn
)

203 i‡(
	`munm≠
(
addr
, 
Àn
) == -1)

204 
	`îr_sys
("munmapÉrror");

205 
	}
}

208 #ifdef 
HAVE_MQUEUE_H


210 
mqd_t


211 
	$Mq_›í
(c⁄° *
∑th«me
, 
oÊag
, ...)

213 
mqd_t
 
mqd
;

214 
va_li°
 
≠
;

215 
mode_t
 
mode
;

216 
mq_©å
 *
©å
;

218 i‡(
oÊag
 & 
O_CREAT
) {

219 
	`va_°¨t
(
≠
, 
oÊag
);

220 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

221 
©å
 = 
	`va_¨g
(
≠
, 
mq_©å
 *);

222 i‡–(
mqd
 = 
	`mq_›í
(
∑th«me
, 
oÊag
, 
mode
, 
©å
)Ë=(
mqd_t
) -1)

223 
	`îr_sys
("mq_›íÉº‹ f‹ %s", 
∑th«me
);

224 
	`va_íd
(
≠
);

226 i‡–(
mqd
 = 
	`mq_›í
(
∑th«me
, 
oÊag
)Ë=(
mqd_t
) -1)

227 
	`îr_sys
("mq_›íÉº‹ f‹ %s", 
∑th«me
);

229 (
mqd
);

230 
	}
}

233 
	$Mq_˛o£
(
mqd_t
 
mqd
)

235 i‡(
	`mq_˛o£
(
mqd
) == -1)

236 
	`îr_sys
("mq_closeÉrror");

237 
	}
}

240 
	$Mq_u∆ök
(c⁄° *
∑th«me
)

242 i‡(
	`mq_u∆ök
(
∑th«me
) == -1)

243 
	`îr_sys
("mq_unlinkÉrror");

244 
	}
}

247 
	$Mq_£nd
(
mqd_t
 
mqd
, c⁄° *
±r
, 
size_t
 
Àn
, 
¥io
)

249 i‡(
	`mq_£nd
(
mqd
, 
±r
, 
Àn
, 
¥io
) == -1)

250 
	`îr_sys
("mq_sendÉrror");

251 
	}
}

253 
ssize_t


254 
	$Mq_ª˚ive
(
mqd_t
 
mqd
, *
±r
, 
size_t
 
Àn
, *
¥io
)

256 
ssize_t
 
n
;

258 i‡–(
n
 = 
	`mq_ª˚ive
(
mqd
, 
±r
, 
Àn
, 
¥io
)) == -1)

259 
	`îr_sys
("mq_receiveÉrror");

260 (
n
);

261 
	}
}

264 
	$Mq_nŸify
(
mqd_t
 
mqd
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

266 i‡(
	`mq_nŸify
(
mqd
, 
nŸifiˇti⁄
) == -1)

267 
	`îr_sys
("mq_notifyÉrror");

268 
	}
}

271 
	$Mq_gë©å
(
mqd_t
 
mqd
, 
mq_©å
 *
mq°©
)

273 i‡(
	`mq_gë©å
(
mqd
, 
mq°©
) == -1)

274 
	`îr_sys
("mq_getattrÉrror");

275 
	}
}

278 
	$Mq_£èâr
(
mqd_t
 
mqd
, c⁄° 
mq_©å
 *
mq°©
, mq_©å *
omq°©
)

280 i‡(
	`mq_£èâr
(
mqd
, 
mq°©
, 
omq°©
) == -1)

281 
	`îr_sys
("mq_setattrÉrror");

282 
	}
}

285 #ifdef 
HAVE_SYS_MSG_H


287 
	$Msggë
(
key_t
 
key
, 
Êag
)

289 
rc
;

291 i‡–(
rc
 = 
	`msggë
(
key
, 
Êag
)) == -1)

292 
	`îr_sys
("msggetÉrror");

293 (
rc
);

294 
	}
}

297 
	$Msg˘l
(
id
, 
cmd
, 
msqid_ds
 *
buf
)

299 i‡(
	`msg˘l
(
id
, 
cmd
, 
buf
) == -1)

300 
	`îr_sys
("msgctlÉrror");

301 
	}
}

304 
	$Msg¢d
(
id
, c⁄° *
±r
, 
size_t
 
Àn
, 
Êag
)

306 i‡(
	`msg¢d
(
id
, 
±r
, 
Àn
, 
Êag
) == -1)

307 
	`îr_sys
("msgsndÉrror");

308 
	}
}

310 
ssize_t


311 
	$Msgrcv
(
id
, *
±r
, 
size_t
 
Àn
, 
ty≥
, 
Êag
)

313 
ssize_t
 
rc
;

315 i‡–(
rc
 = 
	`msgrcv
(
id
, 
±r
, 
Àn
, 
ty≥
, 
Êag
)) == -1)

316 
	`îr_sys
("msgrcvÉrror");

317 (
rc
);

318 
	}
}

322 
	$O≥n
(c⁄° *
∑th«me
, 
oÊag
, ...)

324 
fd
;

325 
va_li°
 
≠
;

326 
mode_t
 
mode
;

328 i‡(
oÊag
 & 
O_CREAT
) {

329 
	`va_°¨t
(
≠
, 
oÊag
);

330 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

331 i‡–(
fd
 = 
	`›í
(
∑th«me
, 
oÊag
, 
mode
)) == -1)

332 
	`îr_sys
("›íÉº‹ f‹ %s", 
∑th«me
);

333 
	`va_íd
(
≠
);

335 i‡–(
fd
 = 
	`›í
(
∑th«me
, 
oÊag
)) == -1)

336 
	`îr_sys
("›íÉº‹ f‹ %s", 
∑th«me
);

338 (
fd
);

339 
	}
}

342 
	$P©hc⁄f
(c⁄° *
∑th«me
, 
«me
)

344 
vÆ
;

346 
î∫o
 = 0;

347 i‡–(
vÆ
 = 
	`∑thc⁄f
(
∑th«me
, 
«me
)) == -1) {

348 i‡(
î∫o
 != 0)

349 
	`îr_sys
("pathconfÉrror");

351 
	`îr_sys
("∑thc⁄f: %dÇŸ deföed", 
«me
);

353 (
vÆ
);

354 
	}
}

357 
	$Pùe
(*
fds
)

359 i‡(
	`pùe
(
fds
) < 0)

360 
	`îr_sys
("pipeÉrror");

361 
	}
}

363 
ssize_t


364 
	$Ród
(
fd
, *
±r
, 
size_t
 
nbyãs
)

366 
ssize_t
 
n
;

368 i‡–(
n
 = 
	`ªad
(
fd
, 
±r
, 
nbyãs
)) == -1)

369 
	`îr_sys
("readÉrror");

370 (
n
);

371 
	}
}

375 
	$Sñe˘
(
nfds
, 
fd_£t
 *
ªadfds
, fd_£à*
wrôefds
, fd_£à*
ex˚±fds
,

376 
timevÆ
 *
timeout
)

378 
n
;

380 
agaö
:

381 i‡–(
n
 = 
	`£À˘
(
nfds
, 
ªadfds
, 
wrôefds
, 
ex˚±fds
, 
timeout
)) < 0) {

382 i‡(
î∫o
 =
EINTR
)

383 
agaö
;

385 
	`îr_sys
("selectÉrror");

386 } i‡(
n
 =0 && 
timeout
 =
NULL
)

387 
	`îr_quô
("selectÑeturned 0 withÇoÅimeout");

388 (
n
);

389 
	}
}

392 #ifdef 
HAVE_SEMAPHORE_H


394 
£m_t
 *

395 
	$Sem_›í
(c⁄° *
∑th«me
, 
oÊag
, ...)

397 
£m_t
 *
£m
;

398 
va_li°
 
≠
;

399 
mode_t
 
mode
;

400 
vÆue
;

402 i‡(
oÊag
 & 
O_CREAT
) {

403 
	`va_°¨t
(
≠
, 
oÊag
);

404 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

405 
vÆue
 = 
	`va_¨g
(
≠
, );

406 i‡–(
£m
 = 
	`£m_›í
(
∑th«me
, 
oÊag
, 
mode
, 
vÆue
)Ë=
SEM_FAILED
)

407 
	`îr_sys
("£m_›íÉº‹ f‹ %s", 
∑th«me
);

408 
	`va_íd
(
≠
);

410 i‡–(
£m
 = 
	`£m_›í
(
∑th«me
, 
oÊag
)Ë=
SEM_FAILED
)

411 
	`îr_sys
("£m_›íÉº‹ f‹ %s", 
∑th«me
);

413 (
£m
);

414 
	}
}

417 
	$Sem_˛o£
(
£m_t
 *
£m
)

419 i‡(
	`£m_˛o£
(
£m
) == -1)

420 
	`îr_sys
("sem_closeÉrror");

421 
	}
}

424 
	$Sem_u∆ök
(c⁄° *
∑th«me
)

426 i‡(
	`£m_u∆ök
(
∑th«me
) == -1)

427 
	`îr_sys
("sem_unlinkÉrror");

428 
	}
}

431 
	$Sem_öô
(
£m_t
 *
£m
, 
psh¨ed
, 
vÆue
)

433 i‡(
	`£m_öô
(
£m
, 
psh¨ed
, 
vÆue
) == -1)

434 
	`îr_sys
("sem_initÉrror");

435 
	}
}

438 
	$Sem_de°roy
(
£m_t
 *
£m
)

440 i‡(
	`£m_de°roy
(
£m
) == -1)

441 
	`îr_sys
("sem_destroyÉrror");

442 
	}
}

445 
	$Sem_waô
(
£m_t
 *
£m
)

447 i‡(
	`£m_waô
(
£m
) == -1)

448 
	`îr_sys
("sem_waitÉrror");

449 
	}
}

452 
	$Sem_åywaô
(
£m_t
 *
£m
)

454 
rc
;

456 i‡–(
rc
 = 
	`£m_åywaô
(
£m
)Ë=-1 && 
î∫o
 !
EAGAIN
)

457 
	`îr_sys
("sem_trywaitÉrror");

458 (
rc
);

459 
	}
}

463 
	$Sem_po°
(
£m_t
 *
£m
)

465 i‡(
	`£m_po°
(
£m
) == -1)

466 
	`îr_sys
("sem_postÉrror");

467 
	}
}

471 
	$Sem_gëvÆue
(
£m_t
 *
£m
, *
vÆp
)

473 i‡(
	`£m_gëvÆue
(
£m
, 
vÆp
) == -1)

474 
	`îr_sys
("sem_getvalueÉrror");

475 
	}
}

479 #ifdef 
HAVE_SYS_SEM_H


481 
	$Semgë
(
key_t
 
key
, 
n£ms
, 
Êag
)

483 
rc
;

485 i‡–(
rc
 = 
	`£mgë
(
key
, 
n£ms
, 
Êag
)) == -1)

486 
	`îr_sys
("semgetÉrror");

487 (
rc
);

488 
	}
}

491 
	$Sem›
(
id
, 
£mbuf
 *
›•å
, 
size_t
 
n›s
)

493 i‡(
	`£m›
(
id
, 
›•å
, 
n›s
) == -1)

494 
	`îr_sys
("semctlÉrror");

495 
	}
}

498 
	$Sem˘l
(
id
, 
£mnum
, 
cmd
, ...)

500 
rc
;

501 
va_li°
 
≠
;

502 
£mun
 
¨g
;

504 i‡(
cmd
 =
GETALL
 || cmd =
SETALL
 || cmd =
SETVAL
 ||

505 
cmd
 =
IPC_STAT
 || cmd =
IPC_SET
) {

506 
	`va_°¨t
(
≠
, 
cmd
);

507 
¨g
 = 
	`va_¨g
(
≠
, 
£mun
);

508 i‡–(
rc
 = 
	`£m˘l
(
id
, 
£mnum
, 
cmd
, 
¨g
)) == -1)

509 
	`îr_sys
("semctlÉrror");

510 
	`va_íd
(
≠
);

512 i‡–(
rc
 = 
	`£m˘l
(
id
, 
£mnum
, 
cmd
)) == -1)

513 
	`îr_sys
("semctlÉrror");

515 (
rc
);

516 
	}
}

520 #ifdef 
HAVE_SHM_OPEN_PROTO


523 
	$Shm_›í
(c⁄° *
∑th«me
, 
oÊag
, 
mode_t
 
mode
)

525 
fd
;

527 i‡–(
fd
 = 
	`shm_›í
(
∑th«me
, 
oÊag
, 
mode
)) == -1)

528 
	`îr_sys
("shm_›íÉº‹ f‹ %s", 
∑th«me
);

529 (
fd
);

530 
	}
}

534 
	$Shm_u∆ök
(c⁄° *
∑th«me
)

536 i‡(
	`shm_u∆ök
(
∑th«me
) == -1)

537 
	`îr_sys
("shm_unlinkÉrror");

538 
	}
}

542 #ifdef 
HAVE_SYS_SHM_H


545 
	$Shmgë
(
key_t
 
key
, 
size_t
 
size
, 
Êags
)

547 
rc
;

549 i‡–(
rc
 = 
	`shmgë
(
key
, 
size
, 
Êags
)) == -1)

550 
	`îr_sys
("shmgetÉrror");

551 (
rc
);

552 
	}
}

555 
	$Shm©
(
id
, c⁄° *
shmaddr
, 
Êags
)

557 *
±r
;

559 i‡–(
±r
 = 
	`shm©
(
id
, 
shmaddr
, 
Êags
)) == (*) -1)

560 
	`îr_sys
("shmatÉrror");

561 (
±r
);

562 
	}
}

565 
	$Shmdt
(c⁄° *
shmaddr
)

567 i‡(
	`shmdt
(
shmaddr
) == -1)

568 
	`îr_sys
("shmdtÉrror");

569 
	}
}

572 
	$Shm˘l
(
id
, 
cmd
, 
shmid_ds
 *
buff
)

574 i‡(
	`shm˘l
(
id
, 
cmd
, 
buff
) == -1)

575 
	`îr_sys
("shmctlÉrror");

576 
	}
}

581 
	$Sigadd£t
(
sig£t_t
 *
£t
, 
signo
)

583 i‡(
	`sigadd£t
(
£t
, 
signo
) == -1)

584 
	`îr_sys
("sigaddsetÉrror");

585 
	}
}

588 
	$Sigdñ£t
(
sig£t_t
 *
£t
, 
signo
)

590 i‡(
	`sigdñ£t
(
£t
, 
signo
) == -1)

591 
	`îr_sys
("sigdelsetÉrror");

592 
	}
}

595 
	$Sigem±y£t
(
sig£t_t
 *
£t
)

597 i‡(
	`sigem±y£t
(
£t
) == -1)

598 
	`îr_sys
("sigemptysetÉrror");

599 
	}
}

602 
	$Sigfûl£t
(
sig£t_t
 *
£t
)

604 i‡(
	`sigfûl£t
(
£t
) == -1)

605 
	`îr_sys
("sigfillsetÉrror");

606 
	}
}

609 
	$Sigismembî
(c⁄° 
sig£t_t
 *
£t
, 
signo
)

611 
n
;

613 i‡–(
n
 = 
	`sigismembî
(
£t
, 
signo
)) == -1)

614 
	`îr_sys
("sigismemberÉrror");

615 (
n
);

616 
	}
}

619 
	$Sig≥ndög
(
sig£t_t
 *
£t
)

621 i‡(
	`sig≥ndög
(
£t
) == -1)

622 
	`îr_sys
("sigpendingÉrror");

623 
	}
}

626 
	$Sig¥ocmask
(
how
, c⁄° 
sig£t_t
 *
£t
, sig£t_à*
o£t
)

628 i‡(
	`sig¥ocmask
(
how
, 
£t
, 
o£t
) == -1)

629 
	`îr_sys
("sigprocmaskÉrror");

630 
	}
}

632 #ifdef 
HAVE_SIGINFO_T_STRUCT


634 
	$Sigqueue
(
pid_t
 
pid
, 
signo
, c⁄° 
sigvÆ
 
vÆ
)

636 i‡(
	`sigqueue
(
pid
, 
signo
, 
vÆ
) == -1)

637 
	`îr_sys
("sigqueueÉrror");

638 
	}
}

641 #ifdef 
HAVE_SIGWAIT


643 
	$Sigwaô
(c⁄° 
sig£t_t
 *
£t
, *
signo
)

645 
n
;

647 i‡–(
n
 = 
	`sigwaô
(
£t
, 
signo
)) == 0)

649 
î∫o
 = 
n
;

650 
	`îr_sys
("sigwaitÉrror");

651 
	}
}

655 
	$Sèt
(c⁄° *
∑th«me
, 
°©
 *
±r
)

657 i‡(
	`°©
(
∑th«me
, 
±r
) == -1)

658 
	`îr_sys
("statÉrror");

659 
	}
}

662 
	$Sådup
(c⁄° *
°r
)

664 *
±r
;

666 i‡–(
±r
 = 
	`°rdup
(
°r
)Ë=
NULL
)

667 
	`îr_sys
("strdupÉrror");

668 (
±r
);

669 
	}
}

672 
	$Sysc⁄f
(
«me
)

674 
vÆ
;

676 
î∫o
 = 0;

677 i‡–(
vÆ
 = 
	`sysc⁄f
(
«me
)) == -1) {

678 i‡(
î∫o
 != 0)

679 
	`îr_sys
("sysconfÉrror");

681 
	`îr_sys
("sysc⁄f: %dÇŸ deföed", 
«me
);

683 (
vÆ
);

684 
	}
}

686 #ifdef 
HAVE_SYS_SYSCTL_H


688 
	~<sys/∑øm.h
>

689 
	~<sys/sys˘l.h
>

692 
	$Sys˘l
(*
«me
, 
u_öt
 
«mñí
, *
ﬁdp
, 
size_t
 *
ﬁdÀ≈
,

693 *
√wp
, 
size_t
 
√wÀn
)

695 i‡(
	`sys˘l
(
«me
, 
«mñí
, 
ﬁdp
, 
ﬁdÀ≈
, 
√wp
, 
√wÀn
) == -1)

696 
	`îr_sys
("sysctlÉrror");

697 
	}
}

701 
	$U∆ök
(c⁄° *
∑th«me
)

703 i‡(
	`u∆ök
(
∑th«me
) == -1)

704 
	`îr_sys
("u∆ökÉº‹ f‹ %s", 
∑th«me
);

705 
	}
}

708 
	$VÆloc
(
size_t
 
size
)

710 *
±r
;

712 #ifdef 
HAVE_VALLOC


713 i‡–(
±r
 = 
	`vÆloc
(
size
)Ë=
NULL
)

714 
	`îr_sys
("vallocÉrror");

716 i‡–(
±r
 = 
	`mÆloc
(
size
)Ë=
NULL
)

717 
	`îr_sys
("mallocÉrror (Valloc)");

719 (
±r
);

720 
	}
}

722 
pid_t


723 
	$Waô
(*
ùå
)

725 
pid_t
 
pid
;

727 i‡–(
pid
 = 
	`waô
(
ùå
)) == -1)

728 
	`îr_sys
("waitÉrror");

729 (
pid
);

730 
	}
}

732 
pid_t


733 
	$Waôpid
(
pid_t
 
pid
, *
ùå
, 
›ti⁄s
)

735 
pid_t
 
ªçid
;

737 i‡–(
ªçid
 = 
	`waôpid
(
pid
, 
ùå
, 
›ti⁄s
)) == -1)

738 
	`îr_sys
("waitpidÉrror");

739 (
ªçid
);

740 
	}
}

743 
	$Wrôe
(
fd
, *
±r
, 
size_t
 
nbyãs
)

745 i‡(
	`wrôe
(
fd
, 
±r
, 
nbyãs
) !=Çbytes)

746 
	`îr_sys
("writeÉrror");

747 
	}
}

	@lib/writable_timeo.c

2 
	~"u≈ùc.h
"

5 
	$wrôabÀ_timeo
(
fd
, 
£c
)

7 
fd_£t
 
w£t
;

8 
timevÆ
 
tv
;

10 
	`FD_ZERO
(&
w£t
);

11 
	`FD_SET
(
fd
, &
w£t
);

13 
tv
.
tv_£c
 = 
£c
;

14 
tv
.
tv_u£c
 = 0;

16 (
	`£À˘
(
fd
+1, 
NULL
, &
w£t
, NULL, &
tv
));

18 
	}
}

22 
	$WrôabÀ_timeo
(
fd
, 
£c
)

24 
n
;

26 i‡–(
n
 = 
	`wrôabÀ_timeo
(
fd
, 
£c
)) < 0)

27 
	`îr_sys
("writable_timeoÉrror");

28 (
n
);

29 
	}
}

	@lib/writen.c

2 
	~"u≈ùc.h
"

4 
ssize_t


5 
	$wrôí
(
fd
, c⁄° *
v±r
, 
size_t
 
n
)

7 
size_t
 
∆e·
;

8 
ssize_t
 
nwrôãn
;

9 c⁄° *
±r
;

11 
±r
 = 
v±r
;

12 
∆e·
 = 
n
;

13 
∆e·
 > 0) {

14 i‡–(
nwrôãn
 = 
	`wrôe
(
fd
, 
±r
, 
∆e·
)) <= 0) {

15 i‡(
î∫o
 =
EINTR
)

16 
nwrôãn
 = 0;

21 
∆e·
 -
nwrôãn
;

22 
±r
 +
nwrôãn
;

24 (
n
);

25 
	}
}

29 
	$Wrôí
(
fd
, *
±r
, 
size_t
 
nbyãs
)

31 i‡(
	`wrôí
(
fd
, 
±r
, 
nbyãs
) !=Çbytes)

32 
	`îr_sys
("writenÉrror");

33 
	}
}

	@lock/lockfcntl.c

1 
	~"u≈ùc.h
"

4 
	$my_lock
(
fd
)

6 
Êock
 
lock
;

8 
lock
.
l_ty≥
 = 
F_WRLCK
;

9 
lock
.
l_whí˚
 = 
SEEK_SET
;

10 
lock
.
l_°¨t
 = 0;

11 
lock
.
l_Àn
 = 0;

13 
	`F˙é
(
fd
, 
F_SETLKW
, &
lock
);

14 
	}
}

17 
	$my_u∆ock
(
fd
)

19 
Êock
 
lock
;

21 
lock
.
l_ty≥
 = 
F_UNLCK
;

22 
lock
.
l_whí˚
 = 
SEEK_SET
;

23 
lock
.
l_°¨t
 = 0;

24 
lock
.
l_Àn
 = 0;

26 
	`F˙é
(
fd
, 
F_SETLK
, &
lock
);

27 
	}
}

	@lock/locklink.c

1 
	~"u≈ùc.h
"

3 
	#LOCKFILE
 "/tmp/£qno.lock"

	)

4 
	#PREFIX
 "/tmp"

	)

7 
	$my_lock
(
fd
)

9 *
±r
;

11 
±r
 = 
	`ãm≤am
(
PREFIX
, 
NULL
);

13 
	`Clo£
(
	`O≥n
(
±r
, 
O_CREAT
 | 
O_RDWR
 | 
O_TRUNC
, 
FILE_MODE
));

15 
	`lök
(
±r
, 
LOCKFILE
) < 0) {

16 i‡(
î∫o
 !
EEXIST
)

17 
	`îr_sys
("linkÉrror forÜock file");

20 
	`U∆ök
(
±r
);

21 
	`‰ì
(
±r
);

22 
	}
}

25 
	$my_u∆ock
(
fd
)

27 
	`U∆ök
(
LOCKFILE
);

28 
	}
}

	@lock/lockmain.c

1 
	~"u≈ùc.h
"

3 
	#SEQFILE
 "£qno"

	)

5 
my_lock
(), 
my_u∆ock
();

8 
	$maö
(
¨gc
, **
¨gv
)

10 
fd
;

11 
i
, 
£qno
;

12 
pid_t
 
pid
;

13 
ssize_t
 
n
;

14 
löe
[
MAXLINE
 + 1];

16 
pid
 = 
	`gëpid
();

17 
fd
 = 
	`O≥n
(
SEQFILE
, 
O_RDWR
, 
FILE_MODE
);

19 
i
 = 0; i < 20; i++) {

20 
	`my_lock
(
fd
);

22 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

23 
n
 = 
	`Ród
(
fd
, 
löe
, 
MAXLINE
);

24 
löe
[
n
] = '\0';

26 
n
 = 
	`ssˇnf
(
löe
, "%ld\n", &
£qno
);

27 
	`¥ötf
("%s:Öid = %ld, seq# = %ld\n", 
¨gv
[0], (Ë
pid
, 
£qno
);

29 
£qno
++;

31 
	`¢¥ötf
(
löe
, ÷öe), "%ld\n", 
£qno
);

32 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

33 
	`Wrôe
(
fd
, 
löe
, 
	`°æí
(line));

35 
	`my_u∆ock
(
fd
);

37 
	`exô
(0);

38 
	}
}

	@lock/lockmainubuf.c

1 
	~"u≈ùc.h
"

3 
	#SEQFILE
 "£qno"

	)

5 
my_lock
(), 
my_u∆ock
();

8 
	$maö
(
¨gc
, **
¨gv
)

10 
fd
, 
i
, 
£qno
, 
c
;

11 
pid_t
 
pid
;

12 
ssize_t
 
n
;

13 
löe
[
MAXLINE
 + 1], *
±r
;

15 
pid
 = 
	`gëpid
();

16 
fd
 = 
	`O≥n
(
SEQFILE
, 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

18 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

20 
i
 = 0; i < 20; i++) {

21 
	`my_lock
(
fd
);

23 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

24 
n
 = 
	`Ród
(
fd
, 
löe
, 
MAXLINE
);

25 
löe
[
n
] = '\0';

27 
n
 = 
	`ssˇnf
(
löe
, "%d\n", &
£qno
);

28 
	`¢¥ötf
(
löe
, ÷öe), "pid = %d, seq# = %d\n", 
pid
, 
£qno
);

29 
±r
 = 
löe
; (
c
 = *ptr++) != 0; )

30 
	`putch¨
(
c
);

32 
£qno
++;

34 
	`•rötf
(
löe
, "%03d\n", 
£qno
);

35 
	`L£ek
(
fd
, 0, 
SEEK_SET
);

36 
	`Wrôe
(
fd
, 
löe
, 
	`°æí
(line));

38 
	`my_u∆ock
(
fd
);

40 
	`exô
(0);

41 
	}
}

	@lock/locknone.c

2 
	$my_lock
(
fd
)

5 
	}
}

8 
	$my_u∆ock
(
fd
)

11 
	}
}

	@lock/lockopen.c

1 
	~"u≈ùc.h
"

3 
	#LOCKFILE
 "/tmp/£qno.lock"

	)

6 
	$my_lock
(
fd
)

8 
ãmpfd
;

10  (
ãmpfd
 = 
	`›í
(
LOCKFILE
, 
O_RDWR
|
O_CREAT
|
O_EXCL
, 
FILE_MODE
)) < 0) {

11 i‡(
î∫o
 !
EEXIST
)

12 
	`îr_sys
("openÉrror forÜock file");

15 
	`Clo£
(
ãmpfd
);

16 
	}
}

19 
	$my_u∆ock
(
fd
)

21 
	`U∆ök
(
LOCKFILE
);

22 
	}
}

	@lock/lockopen2.c

1 
	~"u≈ùc.h
"

3 
	#LOCKFILE
 "/tmp/£qno.lock"

	)

6 
	$my_lock
(
fd
)

8 
ãmpfd
;

11  (
ãmpfd
 = 
	`›í
(
LOCKFILE
, 
O_CREAT
 | 
O_WRONLY
 | 
O_TRUNC
, 0)) < 0) {

12 i‡(
î∫o
 !
EACCES
)

13 
	`îr_sys
("openÉrror forÜock file");

16 
	`Clo£
(
ãmpfd
);

17 
	}
}

20 
	$my_u∆ock
(
fd
)

22 
	`U∆ök
(
LOCKFILE
);

23 
	}
}

	@lock/lockpxsem.c

1 
	~"u≈ùc.h
"

3 
	#LOCK_PATH
 "px£mlock"

	)

5 
£m_t
 *
	glock£m
;

6 
	göôÊag
;

9 
	$my_lock
(
fd
)

11 i‡(
öôÊag
 == 0) {

12 
lock£m
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
LOCK_PATH
), 
O_CREAT
, 
FILE_MODE
, 1);

13 
öôÊag
 = 1;

15 
	`Sem_waô
(
lock£m
);

16 
	}
}

19 
	$my_u∆ock
(
fd
)

21 
	`Sem_po°
(
lock£m
);

22 
	}
}

	@lock/locksvsem.c

1 
	~"u≈ùc.h
"

3 
	#LOCK_PATH
 "/tmp/sv£mlock"

	)

4 
	#MAX_TRIES
 10

	)

6 
	g£mid
, 
	göôÊag
;

7 
£mbuf
 
	gpo°›
, 
	gwaô›
;

10 
	$my_lock
(
fd
)

12 
oÊag
, 
i
;

13 
£mun
 
¨g
;

14 
£mid_ds
 
£möfo
;

16 i‡(
öôÊag
 == 0) {

17 
oÊag
 = 
IPC_CREAT
 | 
IPC_EXCL
 | 
SVSEM_MODE
;

18 i‡–(
£mid
 = 
	`£mgë
(
	`Ftok
(
LOCK_PATH
, 0), 1, 
oÊag
)) >= 0) {

20 
¨g
.
vÆ
 = 1;

21 
	`Sem˘l
(
£mid
, 0, 
SETVAL
, 
¨g
);

23 } i‡(
î∫o
 =
EEXIST
) {

25 
£mid
 = 
	`Semgë
(
	`Ftok
(
LOCK_PATH
, 0), 1, 
SVSEM_MODE
);

26 
¨g
.
buf
 = &
£möfo
;

27 
i
 = 0; i < 
MAX_TRIES
; i++) {

28 
	`Sem˘l
(
£mid
, 0, 
IPC_STAT
, 
¨g
);

29 i‡(
¨g
.
buf
->
£m_Ÿime
 != 0)

30 
öô
;

31 
	`¶ìp
(1);

33 
	`îr_quô
("semget OK, but semaphoreÇot initialized");

36 
	`îr_sys
("semgetÉrror");

37 
öô
:

38 
öôÊag
 = 1;

39 
po°›
.
£m_num
 = 0;

40 
po°›
.
£m_›
 = 1;

41 
po°›
.
£m_Êg
 = 
SEM_UNDO
;

42 
waô›
.
£m_num
 = 0;

43 
waô›
.
£m_›
 = -1;

44 
waô›
.
£m_Êg
 = 
SEM_UNDO
;

46 
	`Sem›
(
£mid
, &
waô›
, 1);

47 
	}
}

50 
	$my_u∆ock
(
fd
)

52 
	`Sem›
(
£mid
, &
po°›
, 1);

53 
	}
}

	@lock/locksvsemrace1.c

1 
	~"u≈ùc.h
"

3 
	#LOCK_PATH
 "/tmp/sv£mlock"

	)

4 
	#MAX_TRIES
 10

	)

6 
	g£mid
, 
	göôÊag
, 
	gpùefd
[2];

7 
£mbuf
 
	gpo°›
, 
	gwaô›
;

10 
	$my_lock
(
fd
)

12 
oÊag
, 
i
;

13 
£mun
 
¨g
;

14 
£mid_ds
 
£möfo
;

16 i‡(
öôÊag
 == 0) {

17 
oÊag
 = 
IPC_CREAT
 | 
IPC_EXCL
 | 
SVSEM_MODE
;

18 i‡–(
£mid
 = 
	`£mgë
(
	`Ftok
(
LOCK_PATH
, 0), 1, 
oÊag
)) >= 0) {

20 
¨g
.
vÆ
 = 1;

21 
	`Sem˘l
(
£mid
, 0, 
SETVAL
, 
¨g
);

23 } i‡(
î∫o
 =
EEXIST
) {

25 
£mid
 = 
	`Semgë
(
	`Ftok
(
LOCK_PATH
, 0), 1, 
SVSEM_MODE
);

26 
¨g
.
buf
 = &
£möfo
;

27 
i
 = 0; i < 
MAX_TRIES
; i++) {

28 
	`Sem˘l
(
£mid
, 0, 
IPC_STAT
, 
¨g
);

29 i‡(
¨g
.
buf
->
£m_Ÿime
 != 0)

30 
öô
;

31 
	`Wrôe
(
pùefd
[1], "", 1);

32 
	`¶ìp
(1);

34 
	`îr_quô
("semget OK, but semaphoreÇot initialized");

37 
	`îr_sys
("semgetÉrror");

38 
öô
:

39 
öôÊag
 = 1;

40 
po°›
.
£m_num
 = 0;

41 
po°›
.
£m_›
 = 1;

42 
po°›
.
£m_Êg
 = 
SEM_UNDO
;

43 
waô›
.
£m_num
 = 0;

44 
waô›
.
£m_›
 = -1;

45 
waô›
.
£m_Êg
 = 
SEM_UNDO
;

47 
	`Sem›
(
£mid
, &
waô›
, 1);

48 
	}
}

51 
	$my_u∆ock
(
fd
)

53 
	`Sem›
(
£mid
, &
po°›
, 1);

54 
	}
}

56 
	#SEQFILE
 "£qno"

	)

59 
	$maö
(
¨gc
, **
¨gv
)

61 
fd
 = 0, 
°©
, 
nc⁄Êi˘s
;

62 
i
, 
j
, 
≈roc
;

63 
£m_t
 *
±r
;

64 
pid_t
 
pid
;

65 
ssize_t
 
n
;

67 i‡(
¨gc
 != 2)

68 
	`îr_quô
("usage:Üocksvsemrace1 <#processes>");

69 
≈roc
 = 
	`©ﬁ
(
¨gv
[1]);

70 
	`Pùe
(
pùefd
);

72 
±r
 = 
	`My_shm
((
£m_t
));

73 
	`Sem_öô
(
±r
, 1, 0);

75 
j
 = 0; j < 
≈roc
; j++) {

76 i‡(
	`F‹k
() == 0) {

78 
	`Sem_waô
(
±r
);

79 
i
 = 0; i < 10; i++) {

80 
	`my_lock
(
fd
);

81 
	`my_u∆ock
(
fd
);

83 
	`exô
(0);

87 
j
 = 0; j < 
≈roc
; j++)

88 
	`Sem_po°
(
±r
);

91  (
pid
 = 
	`waôpid
(-1, &
°©
, 
WNOHANG
)) > 0)

93 
	`Clo£
(
pùefd
[1]);

94 
nc⁄Êi˘s
 = 0;

95  (
n
 = 
	`Ród
(
pùefd
[0], &
°©
, 1)) > 0)

96 
nc⁄Êi˘s
 +
n
;

97 
	`¥ötf
("%d c⁄Êi˘s\n", 
nc⁄Êi˘s
);

98 
	`exô
(0);

99 
	}
}

	@lock/loopmain.c

1 
	~"u≈ùc.h
"

3 
	#SEQFILE
 "£qno"

	)

5 
my_lock
(), 
my_u∆ock
();

8 
	$maö
(
¨gc
, **
¨gv
)

10 
fd
;

11 
i
, 
∆o›
, 
£qno
;

12 
ssize_t
 
n
;

13 
löe
[
MAXLINE
 + 1];

15 i‡(
¨gc
 != 2)

16 
	`îr_quô
("usage:Üoopmain <loopcount>");

17 
∆o›
 = 
	`©ﬁ
(
¨gv
[1]);

19 
fd
 = 
	`O≥n
(
SEQFILE
, 
O_RDWR
, 
FILE_MODE
);

21 
i
 = 0; i < 
∆o›
; i++) {

22 
	`my_lock
(
fd
);

24 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

25 
n
 = 
	`Ród
(
fd
, 
löe
, 
MAXLINE
);

26 
löe
[
n
] = '\0';

28 
n
 = 
	`ssˇnf
(
löe
, "%ld\n", &
£qno
);

29 
£qno
++;

31 
	`¢¥ötf
(
löe
, ÷öe), "%ld\n", 
£qno
);

32 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

33 
	`Wrôe
(
fd
, 
löe
, 
	`°æí
(line));

35 
	`my_u∆ock
(
fd
);

37 
	`exô
(0);

38 
	}
}

	@lock/loopmainnonb.c

1 
	~"u≈ùc.h
"

3 
	#SEQFILE
 "£qno"

	)

5 
my_lock
(), 
my_u∆ock
();

8 
	$maö
(
¨gc
, **
¨gv
)

10 
fd
;

11 
i
, 
∆o›
, 
£qno
;

12 
ssize_t
 
n
;

13 
löe
[
MAXLINE
 + 1];

15 i‡(
¨gc
 != 2)

16 
	`îr_quô
("usage:Üoopmain <loopcount>");

17 
∆o›
 = 
	`©ﬁ
(
¨gv
[1]);

19 
fd
 = 
	`O≥n
(
SEQFILE
, 
O_RDWR
 | 
O_NONBLOCK
, 
FILE_MODE
);

21 
i
 = 0; i < 
∆o›
; i++) {

22 
	`my_lock
(
fd
);

24 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

25 
n
 = 
	`Ród
(
fd
, 
löe
, 
MAXLINE
);

26 
löe
[
n
] = '\0';

28 
n
 = 
	`ssˇnf
(
löe
, "%ld\n", &
£qno
);

29 
£qno
++;

31 
	`¢¥ötf
(
löe
, ÷öe), "%ld\n", 
£qno
);

32 
	`L£ek
(
fd
, 0L, 
SEEK_SET
);

33 
	`Wrôe
(
fd
, 
löe
, 
	`°æí
(line));

35 
	`my_u∆ock
(
fd
);

37 
	`exô
(0);

38 
	}
}

	@lock/onedaemon.c

1 
	~"u≈ùc.h
"

3 
	#PATH_PIDFILE
 "pidfûe"

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
pidfd
;

9 
löe
[
MAXLINE
];

12 
pidfd
 = 
	`O≥n
(
PATH_PIDFILE
, 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

15 i‡(
	`wrôe_lock
(
pidfd
, 0, 
SEEK_SET
, 0) < 0) {

16 i‡(
î∫o
 =
EACCES
 ||Éºnÿ=
EAGAIN
)

17 
	`îr_quô
("unableÅoÜock %s, is %sálreadyÑunning?",

18 
PATH_PIDFILE
, 
¨gv
[0]);

20 
	`îr_sys
("u«bÀÅÿlock %s", 
PATH_PIDFILE
);

24 
	`¢¥ötf
(
löe
, ÷öe), "%ld\n", (Ë
	`gëpid
());

25 
	`Fåunˇã
(
pidfd
, 0);

26 
	`Wrôe
(
pidfd
, 
löe
, 
	`°æí
(line));

30 
	`∑u£
();

31 
	}
}

	@lock/test1.c

2 
	~"u≈ùc.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
fd
;

9 
fd
 = 
	`O≥n
("ã°1.d©a", 
O_RDWR
 | 
O_CREAT
, (
mode_t
Ë
FILE_MODE
);

11 
	`Ród_lock
(
fd
, 0, 
SEEK_SET
, 0);

12 
	`¥ötf
("%s:Ö¨íàha†ªadÜock\n", 
	`Gf_time
());

14 i‡(
	`F‹k
() == 0) {

16 
	`Ród_lock
(
fd
, 0, 
SEEK_SET
, 0);

17 
	`¥ötf
("%s: chûd ha†ªadÜock\n", 
	`Gf_time
());

18 
	`¶ìp
(2);

19 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

20 
	`¥ötf
("%s: chûdÑñó£†ªadÜock\n", 
	`Gf_time
());

22 
	`Ród_lock
(
fd
, 0, 
SEEK_SET
, 0);

23 
	`¥ötf
("%s: chûd ha†ªadÜock\n", 
	`Gf_time
());

24 
	`¶ìp
(2);

25 
	`exô
(0);

29 
	`¶ìp
(4);

30 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

31 
	`¥ötf
("%s:Ö¨íàªÀa£†ªadÜock\n", 
	`Gf_time
());

32 
	`exô
(0);

33 
	}
}

	@lock/test2.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

8 
fd
 = 
	`O≥n
("ã°1.d©a", 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

10 
	`Ród_lock
(
fd
, 0, 
SEEK_SET
, 0);

11 
	`¥ötf
("%s:Ö¨íàha†ªadÜock\n", 
	`Gf_time
());

13 i‡(
	`F‹k
() == 0) {

15 
	`¶ìp
(1);

16 
	`¥ötf
("%s: fú° chûdÅrõ†tÿobèö wrôêlock\n", 
	`Gf_time
());

17 
	`Wrôew_lock
(
fd
, 0, 
SEEK_SET
, 0);

18 
	`¥ötf
("%s: fú° chûd obèö†wrôêlock\n", 
	`Gf_time
());

19 
	`¶ìp
(2);

20 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

21 
	`¥ötf
("%s: fú° chûdÑñó£†wrôêlock\n", 
	`Gf_time
());

22 
	`exô
(0);

25 i‡(
	`F‹k
() == 0) {

27 
	`¶ìp
(3);

28 
	`¥ötf
("%s: sec⁄d chûdÅrõ†tÿobèöÑódÜock\n", 
	`Gf_time
());

29 
	`Ródw_lock
(
fd
, 0, 
SEEK_SET
, 0);

30 
	`¥ötf
("%s: sec⁄d chûd obèö†ªadÜock\n", 
	`Gf_time
());

31 
	`¶ìp
(4);

32 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

33 
	`¥ötf
("%s: sec⁄d chûdÑñó£†ªadÜock\n", 
	`Gf_time
());

34 
	`exô
(0);

38 
	`¶ìp
(5);

39 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

40 
	`¥ötf
("%s:Ö¨íàªÀa£†ªadÜock\n", 
	`Gf_time
());

41 
	`exô
(0);

42 
	}
}

	@lock/test3.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

8 
fd
 = 
	`O≥n
("ã°1.d©a", 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

10 
	`Wrôe_lock
(
fd
, 0, 
SEEK_SET
, 0);

11 
	`¥ötf
("%s:Ö¨íàha†wrôêlock\n", 
	`Gf_time
());

13 i‡(
	`F‹k
() == 0) {

15 
	`¶ìp
(1);

16 
	`¥ötf
("%s: fú° chûdÅrõ†tÿobèö wrôêlock\n", 
	`Gf_time
());

17 
	`Wrôew_lock
(
fd
, 0, 
SEEK_SET
, 0);

18 
	`¥ötf
("%s: fú° chûd obèö†wrôêlock\n", 
	`Gf_time
());

19 
	`¶ìp
(2);

20 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

21 
	`¥ötf
("%s: fú° chûdÑñó£†wrôêlock\n", 
	`Gf_time
());

22 
	`exô
(0);

25 i‡(
	`F‹k
() == 0) {

27 
	`¶ìp
(3);

28 
	`¥ötf
("%s: sec⁄d chûdÅrõ†tÿobèöÑódÜock\n", 
	`Gf_time
());

29 
	`Ródw_lock
(
fd
, 0, 
SEEK_SET
, 0);

30 
	`¥ötf
("%s: sec⁄d chûd obèö†ªadÜock\n", 
	`Gf_time
());

31 
	`¶ìp
(4);

32 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

33 
	`¥ötf
("%s: sec⁄d chûdÑñó£†ªadÜock\n", 
	`Gf_time
());

34 
	`exô
(0);

38 
	`¶ìp
(5);

39 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

40 
	`¥ötf
("%s:Ö¨íàªÀa£†wrôêlock\n", 
	`Gf_time
());

41 
	`exô
(0);

42 
	}
}

	@lock/test4.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
;

8 
fd
 = 
	`O≥n
("ã°1.d©a", 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

10 
	`Wrôe_lock
(
fd
, 0, 
SEEK_SET
, 0);

11 
	`¥ötf
("%s:Ö¨íàha†wrôêlock\n", 
	`Gf_time
());

13 i‡(
	`F‹k
() == 0) {

15 
	`¶ìp
(3);

16 
	`¥ötf
("%s: fú° chûdÅrõ†tÿobèö wrôêlock\n", 
	`Gf_time
());

17 
	`Wrôew_lock
(
fd
, 0, 
SEEK_SET
, 0);

18 
	`¥ötf
("%s: fú° chûd obèö†wrôêlock\n", 
	`Gf_time
());

19 
	`¶ìp
(2);

20 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

21 
	`¥ötf
("%s: fú° chûdÑñó£†wrôêlock\n", 
	`Gf_time
());

22 
	`exô
(0);

25 i‡(
	`F‹k
() == 0) {

27 
	`¶ìp
(1);

28 
	`¥ötf
("%s: sec⁄d chûdÅrõ†tÿobèöÑódÜock\n", 
	`Gf_time
());

29 
	`Ródw_lock
(
fd
, 0, 
SEEK_SET
, 0);

30 
	`¥ötf
("%s: sec⁄d chûd obèö†ªadÜock\n", 
	`Gf_time
());

31 
	`¶ìp
(4);

32 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

33 
	`¥ötf
("%s: sec⁄d chûdÑñó£†ªadÜock\n", 
	`Gf_time
());

34 
	`exô
(0);

38 
	`¶ìp
(5);

39 
	`Un_lock
(
fd
, 0, 
SEEK_SET
, 0);

40 
	`¥ötf
("%s:Ö¨íàªÀa£†wrôêlock\n", 
	`Gf_time
());

41 
	`exô
(0);

42 
	}
}

	@lock/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@mutex/prodcons1.c

2 
	~"u≈ùc.h
"

4 
	#MAXNITEMS
 1000000

	)

5 
	#MAXNTHREADS
 100

	)

7 
	gnôems
;

9 
±hªad_muãx_t
 
	mmuãx
;

10 
	mbuff
[
MAXNITEMS
];

11 
	m≈ut
;

12 
	mnvÆ
;

13 } 
	gsh¨ed
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

15 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

21 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

23 i‡(
¨gc
 != 3)

24 
	`îr_quô
("usage:Örodcons1 <#items> <#threads>");

25 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

26 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

28 
	`Së_c⁄cuºícy
(
¡hªads
);

29 
i
 = 0; i < 
¡hªads
; i++) {

30 
cou¡
[
i
] = 0;

31 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

34 
i
 = 0; i < 
¡hªads
; i++) {

35 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

36 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

39 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

40 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

42 
	`exô
(0);

43 
	}
}

48 
	$¥odu˚
(*
¨g
)

51 i‡(
sh¨ed
.
≈ut
 >
nôems
) {

52 (
NULL
);

54 
sh¨ed
.
buff
[sh¨ed.
≈ut
] = sh¨ed.
nvÆ
;

55 
sh¨ed
.
≈ut
++;

56 
sh¨ed
.
nvÆ
++;

57 *((*Ë
¨g
) += 1;

59 
	}
}

62 
	$c⁄sume
(*
¨g
)

64 
i
;

66 
i
 = 0; i < 
nôems
; i++) {

67 i‡(
sh¨ed
.
buff
[
i
] != i)

68 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[i]);

70 (
NULL
);

71 
	}
}

	@mutex/prodcons2.c

2 
	~"u≈ùc.h
"

4 
	#MAXNITEMS
 1000000

	)

5 
	#MAXNTHREADS
 100

	)

7 
	gnôems
;

9 
±hªad_muãx_t
 
	mmuãx
;

10 
	mbuff
[
MAXNITEMS
];

11 
	m≈ut
;

12 
	mnvÆ
;

13 } 
	gsh¨ed
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

15 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

21 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

23 i‡(
¨gc
 != 3)

24 
	`îr_quô
("usage:Örodcons2 <#items> <#threads>");

25 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

26 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

28 
	`Së_c⁄cuºícy
(
¡hªads
);

30 
i
 = 0; i < 
¡hªads
; i++) {

31 
cou¡
[
i
] = 0;

32 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

36 
i
 = 0; i < 
¡hªads
; i++) {

37 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

38 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

42 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

43 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

45 
	`exô
(0);

46 
	}
}

51 
	$¥odu˚
(*
¨g
)

54 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

55 i‡(
sh¨ed
.
≈ut
 >
nôems
) {

56 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

57 (
NULL
);

59 
sh¨ed
.
buff
[sh¨ed.
≈ut
] = sh¨ed.
nvÆ
;

60 
sh¨ed
.
≈ut
++;

61 
sh¨ed
.
nvÆ
++;

62 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

63 *((*Ë
¨g
) += 1;

65 
	}
}

68 
	$c⁄sume
(*
¨g
)

70 
i
;

72 
i
 = 0; i < 
nôems
; i++) {

73 i‡(
sh¨ed
.
buff
[
i
] != i)

74 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[i]);

76 (
NULL
);

77 
	}
}

	@mutex/prodcons3.c

1 
	~"u≈ùc.h
"

3 
	#MAXNITEMS
 1000000

	)

4 
	#MAXNTHREADS
 100

	)

6 
	gnôems
;

8 
±hªad_muãx_t
 
	mmuãx
;

9 
	mbuff
[
MAXNITEMS
];

10 
	m≈ut
;

11 
	mnvÆ
;

12 } 
	gsh¨ed
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

14 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

21 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

23 i‡(
¨gc
 != 3)

24 
	`îr_quô
("usage:Örodcons3 <#items> <#threads>");

25 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

26 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

29 
	`Së_c⁄cuºícy
(
¡hªads
 + 1);

30 
i
 = 0; i < 
¡hªads
; i++) {

31 
cou¡
[
i
] = 0;

32 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

34 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

37 
i
 = 0; i < 
¡hªads
; i++) {

38 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

39 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

41 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

43 
	`exô
(0);

44 
	}
}

48 
	$¥odu˚
(*
¨g
)

51 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

52 i‡(
sh¨ed
.
≈ut
 >
nôems
) {

53 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

54 (
NULL
);

56 
sh¨ed
.
buff
[sh¨ed.
≈ut
] = sh¨ed.
nvÆ
;

57 
sh¨ed
.
≈ut
++;

58 
sh¨ed
.
nvÆ
++;

59 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

60 *((*Ë
¨g
) += 1;

62 
	}
}

66 
	$c⁄sume_waô
(
i
)

69 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

70 i‡(
i
 < 
sh¨ed
.
≈ut
) {

71 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

74 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

76 
	}
}

79 
	$c⁄sume
(*
¨g
)

81 
i
;

83 
i
 = 0; i < 
nôems
; i++) {

84 
	`c⁄sume_waô
(
i
);

85 i‡(
sh¨ed
.
buff
[
i
] != i)

86 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[i]);

88 (
NULL
);

89 
	}
}

	@mutex/prodcons4.c

1 
	~"u≈ùc.h
"

3 
	#MAXNITEMS
 1000000

	)

4 
	#MAXNTHREADS
 100

	)

6 
	gnôems
;

8 
±hªad_muãx_t
 
	mmuãx
;

9 
	mbuff
[
MAXNITEMS
];

10 
	m≈ut
;

11 
	mnvÆ
;

12 } 
	gsh¨ed
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

14 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

21 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

23 i‡(
¨gc
 != 3)

24 
	`îr_quô
("usage:Örodcons4 <#items> <#threads>");

25 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

26 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

28 
	`Së_c⁄cuºícy
(
¡hªads
 + 1);

30 
i
 = 0; i < 
¡hªads
; i++) {

31 
cou¡
[
i
] = 0;

32 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

34 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

37 
i
 = 0; i < 
¡hªads
; i++) {

38 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

39 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

41 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

43 
	`exô
(0);

44 
	}
}

48 
	$¥odu˚
(*
¨g
)

51 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

52 i‡(
sh¨ed
.
≈ut
 >
nôems
) {

53 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

54 (
NULL
);

56 
sh¨ed
.
buff
[sh¨ed.
≈ut
] = sh¨ed.
nvÆ
;

57 
sh¨ed
.
≈ut
++;

58 
sh¨ed
.
nvÆ
++;

59 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

60 *((*Ë
¨g
) += 1;

62 
	}
}

66 
	$c⁄sume_waô
(
i
)

69 
	`Pthªad_muãx_lock
(&
sh¨ed
.
muãx
);

70 i‡(
i
 < 
sh¨ed
.
≈ut
) {

71 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

74 
	`Pthªad_muãx_u∆ock
(&
sh¨ed
.
muãx
);

75 
	`sched_yõld
();

77 
	}
}

80 
	$c⁄sume
(*
¨g
)

82 
i
;

84 
i
 = 0; i < 
nôems
; i++) {

85 
	`c⁄sume_waô
(
i
);

86 i‡(
sh¨ed
.
buff
[
i
] != i)

87 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[i]);

89 (
NULL
);

90 
	}
}

	@mutex/prodcons5.c

1 
	~"u≈ùc.h
"

3 
	#MAXNITEMS
 1000000

	)

4 
	#MAXNTHREADS
 100

	)

7 
	gnôems
;

8 
	gbuff
[
MAXNITEMS
];

10 
±hªad_muãx_t
 
	mmuãx
;

11 
±hªad_c⁄d_t
 
	mc⁄d
;

12 
	m≈ut
;

13 
	mnvÆ
;

14 
	mƒódy
;

15 } 
	gƒódy
 = { 
PTHREAD_MUTEX_INITIALIZER
, 
PTHREAD_COND_INITIALIZER
 };

17 *
¥odu˚
(*), *
c⁄sume
(*);

21 
	$maö
(
¨gc
, **
¨gv
)

23 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

24 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

26 i‡(
¨gc
 != 3)

27 
	`îr_quô
("usage:Örodcons5 <#items> <#threads>");

28 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

29 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

31 
	`Së_c⁄cuºícy
(
¡hªads
 + 1);

33 
i
 = 0; i < 
¡hªads
; i++) {

34 
cou¡
[
i
] = 0;

35 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

37 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

40 
i
 = 0; i < 
¡hªads
; i++) {

41 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

42 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

44 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

46 
	`exô
(0);

47 
	}
}

51 
	$¥odu˚
(*
¨g
)

54 
	`Pthªad_muãx_lock
(&
ƒódy
.
muãx
);

55 i‡(
ƒódy
.
≈ut
 >
nôems
) {

56 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

57 (
NULL
);

59 
buff
[
ƒódy
.
≈ut
] =Çªady.
nvÆ
;

60 
ƒódy
.
≈ut
++;

61 
ƒódy
.
nvÆ
++;

62 
ƒódy
.nready++;

63 
	`Pthªad_c⁄d_sig«l
(&
ƒódy
.
c⁄d
);

64 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

65 *((*Ë
¨g
) += 1;

67 
	}
}

71 
	$c⁄sume
(*
¨g
)

73 
i
;

75 
i
 = 0; i < 
nôems
; i++) {

76 
	`Pthªad_muãx_lock
(&
ƒódy
.
muãx
);

77 
ƒódy
.nready == 0)

78 
	`Pthªad_c⁄d_waô
(&
ƒódy
.
c⁄d
, &ƒódy.
muãx
);

79 
ƒódy
.nready--;

80 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

82 i‡(
buff
[
i
] != i)

83 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
buff
[i]);

85 (
NULL
);

86 
	}
}

	@mutex/prodcons6.c

2 
	~"u≈ùc.h
"

4 
	#MAXNITEMS
 1000000

	)

5 
	#MAXNTHREADS
 100

	)

8 
	gnôems
;

9 
	gbuff
[
MAXNITEMS
];

11 
±hªad_muãx_t
 
	mmuãx
;

12 
	m≈ut
;

13 
	mnvÆ
;

14 } 
	gput
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

17 
±hªad_muãx_t
 
	mmuãx
;

18 
±hªad_c⁄d_t
 
	mc⁄d
;

19 
	mƒódy
;

20 } 
	gƒódy
 = { 
PTHREAD_MUTEX_INITIALIZER
, 
PTHREAD_COND_INITIALIZER
 };

23 *
¥odu˚
(*), *
c⁄sume
(*);

27 
	$maö
(
¨gc
, **
¨gv
)

29 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

30 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

32 i‡(
¨gc
 != 3)

33 
	`îr_quô
("usage:Örodcons6 <#items> <#threads>");

34 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

35 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

37 
	`Së_c⁄cuºícy
(
¡hªads
 + 1);

39 
i
 = 0; i < 
¡hªads
; i++) {

40 
cou¡
[
i
] = 0;

41 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

43 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

46 
i
 = 0; i < 
¡hªads
; i++) {

47 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

48 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

50 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

52 
	`exô
(0);

53 
	}
}

58 
	$¥odu˚
(*
¨g
)

61 
	`Pthªad_muãx_lock
(&
put
.
muãx
);

62 i‡(
put
.
≈ut
 >
nôems
) {

63 
	`Pthªad_muãx_u∆ock
(&
put
.
muãx
);

64 (
NULL
);

66 
buff
[
put
.
≈ut
] =Öut.
nvÆ
;

67 
put
.
≈ut
++;

68 
put
.
nvÆ
++;

69 
	`Pthªad_muãx_u∆ock
(&
put
.
muãx
);

71 
	`Pthªad_muãx_lock
(&
ƒódy
.
muãx
);

72 i‡(
ƒódy
.nready == 0)

73 
	`Pthªad_c⁄d_sig«l
(&
ƒódy
.
c⁄d
);

74 
ƒódy
.nready++;

75 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

77 *((*Ë
¨g
) += 1;

79 
	}
}

82 
	$c⁄sume
(*
¨g
)

84 
i
;

86 
i
 = 0; i < 
nôems
; i++) {

87 
	`Pthªad_muãx_lock
(&
ƒódy
.
muãx
);

88 
ƒódy
.nready == 0)

89 
	`Pthªad_c⁄d_waô
(&
ƒódy
.
c⁄d
, &ƒódy.
muãx
);

90 
ƒódy
.nready--;

91 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

93 i‡(
buff
[
i
] != i)

94 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
buff
[i]);

96 (
NULL
);

97 
	}
}

	@mutex/prodcons7.c

2 
	~"u≈ùc.h
"

4 
	#MAXNITEMS
 1000000

	)

5 
	#MAXNTHREADS
 100

	)

8 
	gnôems
;

9 
	gbuff
[
MAXNITEMS
];

11 
±hªad_muãx_t
 
	mmuãx
;

12 
	m≈ut
;

13 
	mnvÆ
;

14 } 
	gput
 = { 
PTHREAD_MUTEX_INITIALIZER
 };

17 
±hªad_muãx_t
 
	mmuãx
;

18 
±hªad_c⁄d_t
 
	mc⁄d
;

19 
	mƒódy
;

20 } 
	gƒódy
 = { 
PTHREAD_MUTEX_INITIALIZER
, 
PTHREAD_COND_INITIALIZER
 };

23 
	gnsig«ls
;

25 *
¥odu˚
(*), *
c⁄sume
(*);

29 
	$maö
(
¨gc
, **
¨gv
)

31 
i
, 
¡hªads
, 
cou¡
[
MAXNTHREADS
];

32 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

34 i‡(
¨gc
 != 3)

35 
	`îr_quô
("usage:Örodcons7 <#items> <#threads>");

36 
nôems
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAXNITEMS
);

37 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

39 
	`Së_c⁄cuºícy
(
¡hªads
 + 1);

41 
i
 = 0; i < 
¡hªads
; i++) {

42 
cou¡
[
i
] = 0;

43 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

45 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

48 
i
 = 0; i < 
¡hªads
; i++) {

49 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

50 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

52 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

53 
	`¥ötf
("nsig«l†%d\n", 
nsig«ls
);

55 
	`exô
(0);

56 
	}
}

61 
	$¥odu˚
(*
¨g
)

64 
	`Pthªad_muãx_lock
(&
put
.
muãx
);

65 i‡(
put
.
≈ut
 >
nôems
) {

66 
	`Pthªad_muãx_u∆ock
(&
put
.
muãx
);

67 (
NULL
);

69 
buff
[
put
.
≈ut
] =Öut.
nvÆ
;

70 
put
.
≈ut
++;

71 
put
.
nvÆ
++;

72 
	`Pthªad_muãx_u∆ock
(&
put
.
muãx
);

74 
	`Pthªad_muãx_lock
(&
ƒódy
.
muãx
);

75 i‡(
ƒódy
.nready == 0) {

76 
	`Pthªad_c⁄d_sig«l
(&
ƒódy
.
c⁄d
);

77 
nsig«ls
++;

79 
ƒódy
.nready++;

80 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

82 *((*Ë
¨g
) += 1;

84 
	}
}

87 
	$c⁄sume
(*
¨g
)

89 
i
;

91 
i
 = 0; i < 
nôems
; i++) {

92 
	`Pthªad_muãx_lock
(&
ƒódy
.
muãx
);

93 
ƒódy
.nready == 0)

94 
	`Pthªad_c⁄d_waô
(&
ƒódy
.
c⁄d
, &ƒódy.
muãx
);

95 
ƒódy
.nready--;

96 
	`Pthªad_muãx_u∆ock
(&
ƒódy
.
muãx
);

98 i‡(
buff
[
i
] != i)

99 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
buff
[i]);

101 (
NULL
);

102 
	}
}

	@mutex/test1.c

3 
	~"u≈ùc.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
±hªad_muãx©å_t
 
m©å
;

9 
±hªad_c⁄d©å_t
 
ˇâr
;

12 
	`Pthªad_muãx©å_öô
(&
m©å
);

13 
	`Pthªad_c⁄d©å_öô
(&
ˇâr
);

16 
	`exô
(0);

17 
	}
}

	@mutex/test2.c

3 
	~"u≈ùc.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
±hªad_muãx©å_t
 
m©å
;

9 
±hªad_c⁄d©å_t
 
ˇâr
;

12 
	`Pthªad_muãx©å_öô
(&
m©å
);

13 
	`Pthªad_muãx©å_de°roy
(&
m©å
);

14 
	`Pthªad_c⁄d©å_öô
(&
ˇâr
);

15 
	`Pthªad_c⁄d©å_de°roy
(&
ˇâr
);

18 
	`exô
(0);

19 
	}
}

	@mutex/test3.c

3 
	~"u≈ùc.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
±hªad_©å_t
 
©å
;

11 
	`Pthªad_©å_öô
(&
©å
);

14 
	`exô
(0);

15 
	}
}

	@mutex/test4.c

3 
	~"u≈ùc.h
"

6 
	$maö
(
¨gc
, **
¨gv
)

8 
±hªad_©å_t
 
©å
;

11 
	`Pthªad_©å_öô
(&
©å
);

12 
	`Pthªad_©å_de°roy
(&
©å
);

15 
	`exô
(0);

16 
	}
}

	@mutex/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@my_pxmsg_mmap/mq_close.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

6 
	$mymq_˛o£
(
mymqd_t
 
mqd
)

8 
msgsize
, 
fûesize
;

9 
mymq_hdr
 *
mqhdr
;

10 
mymq_©å
 *
©å
;

11 
mymq_öfo
 *
mqöfo
;

13 
mqöfo
 = 
mqd
;

14 i‡(
mqöfo
->
mqi_magic
 !
MQI_MAGIC
) {

15 
î∫o
 = 
EBADF
;

18 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

19 
©å
 = &
mqhdr
->
mqh_©å
;

21 i‡(
	`mymq_nŸify
(
mqd
, 
NULL
) != 0)

24 
msgsize
 = 
	`MSGSIZE
(
©å
->
mq_msgsize
);

25 
fûesize
 = (
mymq_hdr
Ë+ (
©å
->
mq_maxmsg
 *

26 ((
mymsg_hdr
Ë+ 
msgsize
));

27 i‡(
	`munm≠
(
mqöfo
->
mqi_hdr
, 
fûesize
) == -1)

30 
mqöfo
->
mqi_magic
 = 0;

31 
	`‰ì
(
mqöfo
);

33 
	}
}

37 
	$Mymq_˛o£
(
mymqd_t
 
mqd
)

39 i‡(
	`mymq_˛o£
(
mqd
) == -1)

40 
	`îr_sys
("mymq_closeÉrror");

41 
	}
}

	@my_pxmsg_mmap/mq_getattr.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

6 
	$mymq_gë©å
(
mymqd_t
 
mqd
, 
mymq_©å
 *
mq°©
)

8 
n
;

9 
mymq_hdr
 *
mqhdr
;

10 
mymq_©å
 *
©å
;

11 
mymq_öfo
 *
mqöfo
;

13 
mqöfo
 = 
mqd
;

14 i‡(
mqöfo
->
mqi_magic
 !
MQI_MAGIC
) {

15 
î∫o
 = 
EBADF
;

18 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

19 
©å
 = &
mqhdr
->
mqh_©å
;

20 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
mqhdr
->
mqh_lock
)) != 0) {

21 
î∫o
 = 
n
;

25 
mq°©
->
mq_Êags
 = 
mqöfo
->
mqi_Êags
;

26 
mq°©
->
mq_maxmsg
 = 
©å
->mq_maxmsg;

27 
mq°©
->
mq_msgsize
 = 
©å
->mq_msgsize;

28 
mq°©
->
mq_curmsgs
 = 
©å
->mq_curmsgs;

30 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

32 
	}
}

36 
	$Mymq_gë©å
(
mymqd_t
 
mqd
, 
mymq_©å
 *
mq°©
)

38 i‡(
	`mymq_gë©å
(
mqd
, 
mq°©
) == -1)

39 
	`îr_sys
("mymq_getattrÉrror");

40 
	}
}

	@my_pxmsg_mmap/mq_notify.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

6 
	$mymq_nŸify
(
mymqd_t
 
mqd
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

8 
n
;

9 
pid_t
 
pid
;

10 
mymq_hdr
 *
mqhdr
;

11 
mymq_öfo
 *
mqöfo
;

13 
mqöfo
 = 
mqd
;

14 i‡(
mqöfo
->
mqi_magic
 !
MQI_MAGIC
) {

15 
î∫o
 = 
EBADF
;

18 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

19 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
mqhdr
->
mqh_lock
)) != 0) {

20 
î∫o
 = 
n
;

24 
pid
 = 
	`gëpid
();

25 i‡(
nŸifiˇti⁄
 =
NULL
) {

26 i‡(
mqhdr
->
mqh_pid
 =
pid
) {

27 
mqhdr
->
mqh_pid
 = 0;

30 i‡(
mqhdr
->
mqh_pid
 != 0) {

31 i‡(
	`kûl
(
mqhdr
->
mqh_pid
, 0Ë!-1 || 
î∫o
 !
ESRCH
) {

32 
î∫o
 = 
EBUSY
;

33 
îr
;

36 
mqhdr
->
mqh_pid
 = 
pid
;

37 
mqhdr
->
mqh_evít
 = *
nŸifiˇti⁄
;

39 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

42 
îr
:

43 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

45 
	}
}

49 
	$Mymq_nŸify
(
mymqd_t
 
mqd
, c⁄° 
sigevít
 *
nŸifiˇti⁄
)

51 i‡(
	`mymq_nŸify
(
mqd
, 
nŸifiˇti⁄
) == -1)

52 
	`îr_sys
("mymq_notifyÉrror");

53 
	}
}

	@my_pxmsg_mmap/mq_open.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

5 
	~<°d¨g.h
>

6 
	#MAX_TRIES
 10

	)

8 
mymq_©å
 
	gdeÁâr
 = { 0, 128, 1024, 0 };

10 
mymqd_t


11 
	$mymq_›í
(c⁄° *
∑th«me
, 
oÊag
, ...)

13 
i
, 
fd
, 
n⁄block
, 
¸óãd
, 
ßve_î∫o
;

14 
msgsize
, 
fûesize
, 
ödex
;

15 
va_li°
 
≠
;

16 
mode_t
 
mode
;

17 
öt8_t
 *
m±r
;

18 
°©
 
°©buff
;

19 
mymq_hdr
 *
mqhdr
;

20 
mymsg_hdr
 *
msghdr
;

21 
mymq_©å
 *
©å
;

22 
mymq_öfo
 *
mqöfo
;

23 
±hªad_muãx©å_t
 
m©å
;

24 
±hªad_c⁄d©å_t
 
ˇâr
;

26 
¸óãd
 = 0;

27 
n⁄block
 = 
oÊag
 & 
O_NONBLOCK
;

28 
oÊag
 &~
O_NONBLOCK
;

29 
m±r
 = (
öt8_t
 *Ë
MAP_FAILED
;

30 
mqöfo
 = 
NULL
;

31 
agaö
:

32 i‡(
oÊag
 & 
O_CREAT
) {

33 
	`va_°¨t
(
≠
, 
oÊag
);

34 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
Ë& ~
S_IXUSR
;

35 
©å
 = 
	`va_¨g
(
≠
, 
mymq_©å
 *);

36 
	`va_íd
(
≠
);

39 
fd
 = 
	`›í
(
∑th«me
, 
oÊag
 | 
O_EXCL
 | 
O_RDWR
, 
mode
 | 
S_IXUSR
);

40 i‡(
fd
 < 0) {

41 i‡(
î∫o
 =
EEXIST
 && (
oÊag
 & 
O_EXCL
) == 0)

42 
exi°s
;

44 ((
mymqd_t
) -1);

46 
¸óãd
 = 1;

48 i‡(
©å
 =
NULL
)

49 
©å
 = &
deÁâr
;

51 i‡(
©å
->
mq_maxmsg
 <0 ||áâr->
mq_msgsize
 <= 0) {

52 
î∫o
 = 
EINVAL
;

53 
îr
;

59 
msgsize
 = 
	`MSGSIZE
(
©å
->
mq_msgsize
);

60 
fûesize
 = (
mymq_hdr
Ë+ (
©å
->
mq_maxmsg
 *

61 ((
mymsg_hdr
Ë+ 
msgsize
));

62 i‡(
	`l£ek
(
fd
, 
fûesize
 - 1, 
SEEK_SET
) == -1)

63 
îr
;

64 i‡(
	`wrôe
(
fd
, "", 1) == -1)

65 
îr
;

68 
m±r
 = 
	`mm≠
(
NULL
, 
fûesize
, 
PROT_READ
 | 
PROT_WRITE
,

69 
MAP_SHARED
, 
fd
, 0);

70 i‡(
m±r
 =
MAP_FAILED
)

71 
îr
;

75 i‡–(
mqöfo
 = 
	`mÆloc
((
mymq_öfo
))Ë=
NULL
)

76 
îr
;

78 
mqöfo
->
mqi_hdr
 = 
mqhdr
 = (
mymq_hdr
 *Ë
m±r
;

79 
mqöfo
->
mqi_magic
 = 
MQI_MAGIC
;

80 
mqöfo
->
mqi_Êags
 = 
n⁄block
;

84 
mqhdr
->
mqh_©å
.
mq_Êags
 = 0;

85 
mqhdr
->
mqh_©å
.
mq_maxmsg
 = 
©å
->mq_maxmsg;

86 
mqhdr
->
mqh_©å
.
mq_msgsize
 = 
©å
->mq_msgsize;

87 
mqhdr
->
mqh_©å
.
mq_curmsgs
 = 0;

88 
mqhdr
->
mqh_nwaô
 = 0;

89 
mqhdr
->
mqh_pid
 = 0;

90 
mqhdr
->
mqh_hód
 = 0;

91 
ödex
 = (
mymq_hdr
);

92 
mqhdr
->
mqh_‰ì
 = 
ödex
;

93 
i
 = 0; i < 
©å
->
mq_maxmsg
 - 1; i++) {

94 
msghdr
 = (
mymsg_hdr
 *Ë&
m±r
[
ödex
];

95 
ödex
 +(
mymsg_hdr
Ë+ 
msgsize
;

96 
msghdr
->
msg_√xt
 = 
ödex
;

98 
msghdr
 = (
mymsg_hdr
 *Ë&
m±r
[
ödex
];

99 
msghdr
->
msg_√xt
 = 0;

102 i‡–(
i
 = 
	`±hªad_muãx©å_öô
(&
m©å
)) != 0)

103 
±hªadîr
;

104 
	`±hªad_muãx©å_£çsh¨ed
(&
m©å
, 
PTHREAD_PROCESS_SHARED
);

105 
i
 = 
	`±hªad_muãx_öô
(&
mqhdr
->
mqh_lock
, &
m©å
);

106 
	`±hªad_muãx©å_de°roy
(&
m©å
);

107 i‡(
i
 != 0)

108 
±hªadîr
;

110 i‡–(
i
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
)) != 0)

111 
±hªadîr
;

112 
	`±hªad_c⁄d©å_£çsh¨ed
(&
ˇâr
, 
PTHREAD_PROCESS_SHARED
);

113 
i
 = 
	`±hªad_c⁄d_öô
(&
mqhdr
->
mqh_waô
, &
ˇâr
);

114 
	`±hªad_c⁄d©å_de°roy
(&
ˇâr
);

115 i‡(
i
 != 0)

116 
±hªadîr
;

119 i‡(
	`fchmod
(
fd
, 
mode
) == -1)

120 
îr
;

121 
	`˛o£
(
fd
);

122 ((
mymqd_t
Ë
mqöfo
);

126 
exi°s
:

128 i‡–(
fd
 = 
	`›í
(
∑th«me
, 
O_RDWR
)) < 0) {

129 i‡(
î∫o
 =
ENOENT
 && (
oÊag
 & 
O_CREAT
))

130 
agaö
;

131 
îr
;

135 
i
 = 0; i < 
MAX_TRIES
; i++) {

136 i‡(
	`°©
(
∑th«me
, &
°©buff
) == -1) {

137 i‡(
î∫o
 =
ENOENT
 && (
oÊag
 & 
O_CREAT
)) {

138 
	`˛o£
(
fd
);

139 
agaö
;

141 
îr
;

143 i‡((
°©buff
.
°_mode
 & 
S_IXUSR
) == 0)

145 
	`¶ìp
(1);

147 i‡(
i
 =
MAX_TRIES
) {

148 
î∫o
 = 
ETIMEDOUT
;

149 
îr
;

152 
fûesize
 = 
°©buff
.
°_size
;

153 
m±r
 = 
	`mm≠
(
NULL
, 
fûesize
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

154 i‡(
m±r
 =
MAP_FAILED
)

155 
îr
;

156 
	`˛o£
(
fd
);

160 i‡–(
mqöfo
 = 
	`mÆloc
((
mymq_öfo
))Ë=
NULL
)

161 
îr
;

163 
mqöfo
->
mqi_hdr
 = (
mymq_hdr
 *Ë
m±r
;

164 
mqöfo
->
mqi_magic
 = 
MQI_MAGIC
;

165 
mqöfo
->
mqi_Êags
 = 
n⁄block
;

166 ((
mymqd_t
Ë
mqöfo
);

168 
±hªadîr
:

169 
î∫o
 = 
i
;

170 
îr
:

172 
ßve_î∫o
 = 
î∫o
;

173 i‡(
¸óãd
)

174 
	`u∆ök
(
∑th«me
);

175 i‡(
m±r
 !
MAP_FAILED
)

176 
	`munm≠
(
m±r
, 
fûesize
);

177 i‡(
mqöfo
 !
NULL
)

178 
	`‰ì
(
mqöfo
);

179 
	`˛o£
(
fd
);

180 
î∫o
 = 
ßve_î∫o
;

181 ((
mymqd_t
) -1);

182 
	}
}

185 
mymqd_t


186 
	$Mymq_›í
(c⁄° *
∑th«me
, 
oÊag
, ...)

188 
mymqd_t
 
mqd
;

189 
va_li°
 
≠
;

190 
mode_t
 
mode
;

191 
mymq_©å
 *
©å
;

193 i‡(
oÊag
 & 
O_CREAT
) {

194 
	`va_°¨t
(
≠
, 
oÊag
);

195 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

196 
©å
 = 
	`va_¨g
(
≠
, 
mymq_©å
 *);

197 i‡–(
mqd
 = 
	`mymq_›í
(
∑th«me
, 
oÊag
, 
mode
, 
©å
)Ë=(
mymqd_t
) -1)

198 
	`îr_sys
("mymq_›íÉº‹ f‹ %s", 
∑th«me
);

199 
	`va_íd
(
≠
);

201 i‡–(
mqd
 = 
	`mymq_›í
(
∑th«me
, 
oÊag
)Ë=(
mymqd_t
) -1)

202 
	`îr_sys
("mymq_›íÉº‹ f‹ %s", 
∑th«me
);

204 (
mqd
);

205 
	}
}

	@my_pxmsg_mmap/mq_receive.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

5 
ssize_t


6 
	$mymq_ª˚ive
(
mymqd_t
 
mqd
, *
±r
, 
size_t
 
maxÀn
, *
¥i›
)

8 
n
;

9 
ödex
;

10 
öt8_t
 *
m±r
;

11 
ssize_t
 
Àn
;

12 
mymq_hdr
 *
mqhdr
;

13 
mymq_©å
 *
©å
;

14 
mymsg_hdr
 *
msghdr
;

15 
mymq_öfo
 *
mqöfo
;

17 
mqöfo
 = 
mqd
;

18 i‡(
mqöfo
->
mqi_magic
 !
MQI_MAGIC
) {

19 
î∫o
 = 
EBADF
;

22 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

23 
m±r
 = (
öt8_t
 *Ë
mqhdr
;

24 
©å
 = &
mqhdr
->
mqh_©å
;

25 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
mqhdr
->
mqh_lock
)) != 0) {

26 
î∫o
 = 
n
;

30 i‡(
maxÀn
 < 
©å
->
mq_msgsize
) {

31 
î∫o
 = 
EMSGSIZE
;

32 
îr
;

34 i‡(
©å
->
mq_curmsgs
 == 0) {

35 i‡(
mqöfo
->
mqi_Êags
 & 
O_NONBLOCK
) {

36 
î∫o
 = 
EAGAIN
;

37 
îr
;

40 
mqhdr
->
mqh_nwaô
++;

41 
©å
->
mq_curmsgs
 == 0)

42 
	`±hªad_c⁄d_waô
(&
mqhdr
->
mqh_waô
, &mqhdr->
mqh_lock
);

43 
mqhdr
->
mqh_nwaô
--;

48 i‡–(
ödex
 = 
mqhdr
->
mqh_hód
) == 0)

49 
	`îr_dump
("mymq_ª˚ive: curmsg†%ld; hód = 0", 
©å
->
mq_curmsgs
);

51 
msghdr
 = (
mymsg_hdr
 *Ë&
m±r
[
ödex
];

52 
mqhdr
->
mqh_hód
 = 
msghdr
->
msg_√xt
;

53 
Àn
 = 
msghdr
->
msg_Àn
;

54 
	`mem˝y
(
±r
, 
msghdr
 + 1, 
Àn
);

55 i‡(
¥i›
 !
NULL
)

56 *
¥i›
 = 
msghdr
->
msg_¥io
;

59 
msghdr
->
msg_√xt
 = 
mqhdr
->
mqh_‰ì
;

60 
mqhdr
->
mqh_‰ì
 = 
ödex
;

63 i‡(
©å
->
mq_curmsgs
 =©å->
mq_maxmsg
)

64 
	`±hªad_c⁄d_sig«l
(&
mqhdr
->
mqh_waô
);

65 
©å
->
mq_curmsgs
--;

67 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

68 (
Àn
);

70 
îr
:

71 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

73 
	}
}

76 
ssize_t


77 
	$Mymq_ª˚ive
(
mymqd_t
 
mqd
, *
±r
, 
size_t
 
Àn
, *
¥i›
)

79 
ssize_t
 
n
;

81 i‡–(
n
 = 
	`mymq_ª˚ive
(
mqd
, 
±r
, 
Àn
, 
¥i›
)) == -1)

82 
	`îr_sys
("mymq_receiveÉrror");

83 (
n
);

84 
	}
}

	@my_pxmsg_mmap/mq_send.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

6 
	$mymq_£nd
(
mymqd_t
 
mqd
, c⁄° *
±r
, 
size_t
 
Àn
, 
¥io
)

8 
n
;

9 
ödex
, 
‰ìödex
;

10 
öt8_t
 *
m±r
;

11 
sigevít
 *
sigev
;

12 
mymq_hdr
 *
mqhdr
;

13 
mymq_©å
 *
©å
;

14 
mymsg_hdr
 *
msghdr
, *
nmsghdr
, *
pmsghdr
;

15 
mymq_öfo
 *
mqöfo
;

17 
mqöfo
 = 
mqd
;

18 i‡(
mqöfo
->
mqi_magic
 !
MQI_MAGIC
) {

19 
î∫o
 = 
EBADF
;

22 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

23 
m±r
 = (
öt8_t
 *Ë
mqhdr
;

24 
©å
 = &
mqhdr
->
mqh_©å
;

25 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
mqhdr
->
mqh_lock
)) != 0) {

26 
î∫o
 = 
n
;

30 i‡(
Àn
 > 
©å
->
mq_msgsize
) {

31 
î∫o
 = 
EMSGSIZE
;

32 
îr
;

34 i‡(
©å
->
mq_curmsgs
 == 0) {

35 i‡(
mqhdr
->
mqh_pid
 !0 && mqhdr->
mqh_nwaô
 == 0) {

36 
sigev
 = &
mqhdr
->
mqh_evít
;

37 i‡(
sigev
->
sigev_nŸify
 =
SIGEV_SIGNAL
) {

38 
	`sigqueue
(
mqhdr
->
mqh_pid
, 
sigev
->
sigev_signo
,

39 
sigev
->
sigev_vÆue
);

41 
mqhdr
->
mqh_pid
 = 0;

43 } i‡(
©å
->
mq_curmsgs
 >©å->
mq_maxmsg
) {

45 i‡(
mqöfo
->
mqi_Êags
 & 
O_NONBLOCK
) {

46 
î∫o
 = 
EAGAIN
;

47 
îr
;

50 
©å
->
mq_curmsgs
 >©å->
mq_maxmsg
)

51 
	`±hªad_c⁄d_waô
(&
mqhdr
->
mqh_waô
, &mqhdr->
mqh_lock
);

56 i‡–(
‰ìödex
 = 
mqhdr
->
mqh_‰ì
) == 0)

57 
	`îr_dump
("mymq_£nd: curmsg†%ld; fªê0", 
©å
->
mq_curmsgs
);

58 
nmsghdr
 = (
mymsg_hdr
 *Ë&
m±r
[
‰ìödex
];

59 
nmsghdr
->
msg_¥io
 = 
¥io
;

60 
nmsghdr
->
msg_Àn
 = 
Àn
;

61 
	`mem˝y
(
nmsghdr
 + 1, 
±r
, 
Àn
);

62 
mqhdr
->
mqh_‰ì
 = 
nmsghdr
->
msg_√xt
;

65 
ödex
 = 
mqhdr
->
mqh_hód
;

66 
pmsghdr
 = (
mymsg_hdr
 *Ë&(
mqhdr
->
mqh_hód
);

67 
ödex
 != 0) {

68 
msghdr
 = (
mymsg_hdr
 *Ë&
m±r
[
ödex
];

69 i‡(
¥io
 > 
msghdr
->
msg_¥io
) {

70 
nmsghdr
->
msg_√xt
 = 
ödex
;

71 
pmsghdr
->
msg_√xt
 = 
‰ìödex
;

74 
ödex
 = 
msghdr
->
msg_√xt
;

75 
pmsghdr
 = 
msghdr
;

77 i‡(
ödex
 == 0) {

79 
pmsghdr
->
msg_√xt
 = 
‰ìödex
;

80 
nmsghdr
->
msg_√xt
 = 0;

83 i‡(
©å
->
mq_curmsgs
 == 0)

84 
	`±hªad_c⁄d_sig«l
(&
mqhdr
->
mqh_waô
);

85 
©å
->
mq_curmsgs
++;

87 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

90 
îr
:

91 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

93 
	}
}

97 
	$Mymq_£nd
(
mymqd_t
 
mqd
, c⁄° *
±r
, 
size_t
 
Àn
, 
¥io
)

99 i‡(
	`mymq_£nd
(
mqd
, 
±r
, 
Àn
, 
¥io
) == -1)

100 
	`îr_sys
("mymq_sendÉrror");

101 
	}
}

	@my_pxmsg_mmap/mq_setattr.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

6 
	$mymq_£èâr
(
mymqd_t
 
mqd
, c⁄° 
mymq_©å
 *
mq°©
,

7 
mymq_©å
 *
omq°©
)

9 
n
;

10 
mymq_hdr
 *
mqhdr
;

11 
mymq_©å
 *
©å
;

12 
mymq_öfo
 *
mqöfo
;

14 
mqöfo
 = 
mqd
;

15 i‡(
mqöfo
->
mqi_magic
 !
MQI_MAGIC
) {

16 
î∫o
 = 
EBADF
;

19 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

20 
©å
 = &
mqhdr
->
mqh_©å
;

21 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
mqhdr
->
mqh_lock
)) != 0) {

22 
î∫o
 = 
n
;

26 i‡(
omq°©
 !
NULL
) {

27 
omq°©
->
mq_Êags
 = 
mqöfo
->
mqi_Êags
;

28 
omq°©
->
mq_maxmsg
 = 
©å
->mq_maxmsg;

29 
omq°©
->
mq_msgsize
 = 
©å
->mq_msgsize;

30 
omq°©
->
mq_curmsgs
 = 
©å
->mq_curmsgs;

33 i‡(
mq°©
->
mq_Êags
 & 
O_NONBLOCK
)

34 
mqöfo
->
mqi_Êags
 |
O_NONBLOCK
;

36 
mqöfo
->
mqi_Êags
 &~
O_NONBLOCK
;

38 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

40 
	}
}

44 
	$Mymq_£èâr
(
mymqd_t
 
mqd
, c⁄° 
mymq_©å
 *
mq°©
,

45 
mymq_©å
 *
omq°©
)

47 i‡(
	`mymq_£èâr
(
mqd
, 
mq°©
, 
omq°©
) == -1)

48 
	`îr_sys
("mymq_setattrÉrror");

49 
	}
}

	@my_pxmsg_mmap/mq_unlink.c

2 
	~"u≈ùc.h
"

3 
	~"mqueue.h
"

6 
	$mymq_u∆ök
(c⁄° *
∑th«me
)

8 i‡(
	`u∆ök
(
∑th«me
) == -1)

11 
	}
}

15 
	$Mymq_u∆ök
(c⁄° *
∑th«me
)

17 i‡(
	`mymq_u∆ök
(
∑th«me
) == -1)

18 
	`îr_sys
("mymq_unlinkÉrror");

19 
	}
}

	@my_pxmsg_mmap/mqcreate.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

4 
mq_©å
 
	g©å
;

7 
	$maö
(
¨gc
, **
¨gv
)

9 
c
, 
Êags
;

10 
mqd_t
 
mqd
;

12 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

13  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "em:z:")) != -1) {

14 
c
) {

16 
Êags
 |
O_EXCL
;

20 
©å
.
mq_maxmsg
 = 
	`©ﬁ
(
›èrg
);

24 
©å
.
mq_msgsize
 = 
	`©ﬁ
(
›èrg
);

28 i‡(
›töd
 !
¨gc
 - 1)

29 
	`îr_quô
("usage: mqcreate [ -e ] [ -m maxmsg -z msgsize ] <name>");

31 i‡((
©å
.
mq_maxmsg
 !0 &&áâr.
mq_msgsize
 == 0) ||

32 (
©å
.
mq_maxmsg
 =0 &&áâr.
mq_msgsize
 != 0))

33 
	`îr_quô
("must specify both -m maxmsgánd -z msgsize");

35 
mqd
 = 
	`Mymq_›í
(
¨gv
[
›töd
], 
Êags
, 
FILE_MODE
,

36 (
©å
.
mq_maxmsg
 !0Ë? &©å : 
NULL
);

38 
	`Mymq_˛o£
(
mqd
);

39 
	`exô
(0);

40 
	}
}

	@my_pxmsg_mmap/mqgetattr.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
mqd_t
 
mqd
;

8 
mymq_©å
 
©å
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: mqgetattr <name>");

13 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_RDONLY
);

15 
	`Mymq_gë©å
(
mqd
, &
©å
);

16 
	`¥ötf
("max #msgs = %ld, max #bytes/msg = %ld, "

18 
©å
.
mq_maxmsg
,áâr.
mq_msgsize
,áâr.
mq_curmsgs
);

20 
	`Mymq_˛o£
(
mqd
);

21 
	`exô
(0);

22 
	}
}

	@my_pxmsg_mmap/mqnotify1.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

4 
mymqd_t
 
	gmqd
;

5 
sigevít
 
	gsigev
;

7 
sig_u§1
();

10 
	$maö
(
¨gc
, **
¨gv
)

12 i‡(
¨gc
 != 2)

13 
	`îr_quô
("usage: mqnotify1 <name>");

15 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_RDONLY
);

17 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

19 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

20 
sigev
.
sigev_signo
 = 
SIGUSR1
;

21 
	`Mymq_nŸify
(
mqd
, &
sigev
);

24 
	`∑u£
();

26 
	`exô
(0);

27 
	}
}

30 
	$sig_u§1
(
signo
)

32 
	`¥ötf
("SIGUSR1Ñeceived\n");

33 
	`Mymq_nŸify
(
mqd
, &
sigev
);

35 
	}
}

	@my_pxmsg_mmap/mqreceive.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
c
, 
Êags
;

8 
mqd_t
 
mqd
;

9 
size_t
 
n
;

10 
uöt_t
 
¥io
;

11 *
buff
;

12 
mymq_©å
 
©å
;

14 
Êags
 = 
O_RDONLY
;

15  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "n")) != -1) {

16 
c
) {

18 
Êags
 |
O_NONBLOCK
;

22 i‡(
›töd
 !
¨gc
 - 1)

23 
	`îr_quô
("usage: mqreceive [ -n ] <name>");

25 
mqd
 = 
	`Mymq_›í
(
¨gv
[
›töd
], 
Êags
);

26 
	`Mymq_gë©å
(
mqd
, &
©å
);

28 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

30 
n
 = 
	`Mymq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, &
¥io
);

31 
	`¥ötf
("ªad %d byãs,Öri‹ôy = %u\n", 
n
, 
¥io
);

33 
	`exô
(0);

34 
	}
}

	@my_pxmsg_mmap/mqsend.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
mqd_t
 
mqd
;

8 *
±r
;

9 
size_t
 
Àn
;

10 
uöt_t
 
¥io
;

12 i‡(
¨gc
 != 4)

13 
	`îr_quô
("usage: mqsend <name> <#bytes> <priority>");

14 
Àn
 = 
	`©oi
(
¨gv
[2]);

15 
¥io
 = 
	`©oi
(
¨gv
[3]);

17 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_WRONLY
);

19 
±r
 = 
	`MÆloc
(
Àn
);

20 
	`Mymq_£nd
(
mqd
, 
±r
, 
Àn
, 
¥io
);

22 
	`exô
(0);

23 
	}
}

	@my_pxmsg_mmap/mqueue.h

2 
mymq_öfo
 *
	tmymqd_t
;

4 
	smymq_©å
 {

5 
	mmq_Êags
;

6 
	mmq_maxmsg
;

7 
	mmq_msgsize
;

8 
	mmq_curmsgs
;

12 
	smymq_hdr
 {

13 
mymq_©å
 
	mmqh_©å
;

14 
	mmqh_hód
;

15 
	mmqh_‰ì
;

16 
	mmqh_nwaô
;

17 
pid_t
 
	mmqh_pid
;

18 
sigevít
 
	mmqh_evít
;

19 
±hªad_muãx_t
 
	mmqh_lock
;

20 
±hªad_c⁄d_t
 
	mmqh_waô
;

24 
	smymsg_hdr
 {

25 
	mmsg_√xt
;

27 
ssize_t
 
	mmsg_Àn
;

28 
	mmsg_¥io
;

32 
	smymq_öfo
 {

33 
mymq_hdr
 *
	mmqi_hdr
;

34 
	mmqi_magic
;

35 
	mmqi_Êags
;

37 
	#MQI_MAGIC
 0x98765432

	)

40 
	#MSGSIZE
(
i
Ë((((iË+ ()-1Ë/ ()Ë* ())

	)

44 
mymq_˛o£
(
mymqd_t
);

45 
mymq_gë©å
(
mymqd_t
, 
mymq_©å
 *);

46 
mymq_nŸify
(
mymqd_t
, c⁄° 
sigevít
 *);

47 
mymqd_t
 
mymq_›í
(const *, , ...);

48 
ssize_t
 
mymq_ª˚ive
(
mymqd_t
, *, 
size_t
, *);

49 
mymq_£nd
(
mymqd_t
, c⁄° *, 
size_t
, );

50 
mymq_£èâr
(
mymqd_t
, c⁄° 
mymq_©å
 *, mymq_attr *);

51 
mymq_u∆ök
(c⁄° *
«me
);

54 
Mymq_˛o£
(
mymqd_t
);

55 
Mymq_gë©å
(
mymqd_t
, 
mymq_©å
 *);

56 
Mymq_nŸify
(
mymqd_t
, c⁄° 
sigevít
 *);

57 
mymqd_t
 
Mymq_›í
(const *, , ...);

58 
ssize_t
 
Mymq_ª˚ive
(
mymqd_t
, *, 
size_t
, *);

59 
Mymq_£nd
(
mymqd_t
, c⁄° *, 
size_t
, );

60 
Mymq_£èâr
(
mymqd_t
, c⁄° 
mymq_©å
 *, mymq_attr *);

61 
Mymq_u∆ök
(c⁄° *
«me
);

	@my_pxmsg_mmap/mqunlink.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 i‡(
¨gc
 != 2)

8 
	`îr_quô
("usage: mqunlink <name>");

10 
	`Mymq_u∆ök
(
¨gv
[1]);

12 
	`exô
(0);

13 
	}
}

	@my_pxmsg_mmap/new/mymq_receive.c

2 
	~"u≈ùc.h
"

3 
	~"mymqueue.h
"

5 
mymq_ªcv_waô
(
mymq_hdr
 *);

7 
ssize_t


8 
	$mymq_ª˚ive
(
mymqd_t
 
mqd
, *
±r
, 
size_t
 
maxÀn
, *
¥i›
)

10 
fd
, 
rc
;

11 
ödex
;

12 
öt8_t
 *
m±r
;

13 
ssize_t
 
Àn
;

14 
mymq_hdr
 *
mqhdr
;

15 
mymq_©å
 *
©å
;

16 
mymsg_hdr
 *
msghdr
;

17 
mymq_öfo
 *
mqöfo
;

19 
mqöfo
 = (
mymq_öfo
 *Ë
mqd
;

20 i‡(
mqöfo
->
mqi_magic
 !
MAGIC
)

21 
	`îr_dump
("mymq_ª˚ive: magi¯%x", 
mqöfo
->
mqi_magic
);

23 
fd
 = 
mqöfo
->
mqi_fd
;

24 
mqhdr
 = 
mqöfo
->
mqi_hdr
;

25 
m±r
 = (
öt8_t
 *Ë
mqhdr
;

26 
©å
 = &
mqhdr
->
mqh_©å
;

27 
	`±hªad_muãx_lock
(&
mqhdr
->
mqh_lock
);

29 i‡(
maxÀn
 < 
©å
->
mq_msgsize
) {

30 
î∫o
 = 
EMSGSIZE
;

31 
îr
;

33 i‡(
©å
->
mq_curmsgs
 == 0) {

34 i‡(
mqöfo
->
mqi_Êags
 & 
O_NONBLOCK
) {

35 
î∫o
 = 
EAGAIN
;

36 
îr
;

39 i‡–(
rc
 = 
	`mymq_ªcv_waô
(
mqhdr
)) != 0) {

40 
î∫o
 = 
rc
;

41 
îr
;

45 i‡–(
ödex
 = 
mqhdr
->
mqh_hód
) == 0)

46 
	`îr_dump
("mymq_ª˚ive: curmsg†%ld; hód = 0", 
©å
->
mq_curmsgs
);

48 
msghdr
 = (
mymsg_hdr
 *Ë&
m±r
[
ödex
];

49 
mqhdr
->
mqh_hód
 = 
msghdr
->
msg_√xt
;

50 
Àn
 = 
msghdr
->
msg_Àn
;

51 
	`mem˝y
(
±r
, 
msghdr
 + 1, 
Àn
);

52 i‡(
¥i›
 !
NULL
)

53 *
¥i›
 = 
msghdr
->
msg_¥io
;

56 
msghdr
->
msg_√xt
 = 
mqhdr
->
mqh_‰ì
;

57 
mqhdr
->
mqh_‰ì
 = 
ödex
;

60 i‡(
©å
->
mq_curmsgs
 =©å->
mq_maxmsg
)

61 
	`±hªad_c⁄d_sig«l
(&
mqhdr
->
mqh_waô
);

62 
©å
->
mq_curmsgs
--;

64 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

65 (
Àn
);

67 
îr
:

68 
	`±hªad_muãx_u∆ock
(&
mqhdr
->
mqh_lock
);

70 
	}
}

74 *
mymq_waô_thªad
(*);

75 
	gpùefd
[2];

78 
	$mymq_ªcv_waô
(
mymq_hdr
 *
mqhdr
)

80 
rc
;

81 
c
;

82 
±hªad_t
 
tid
;

84 i‡(
	`pùe
(
pùefd
) == -1)

85 (
î∫o
);

86 i‡–(
rc
 = 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
mymq_waô_thªad
, 
mqhdr
)) != 0) {

87 
	`˛o£
(
pùefd
[0]);

88 
	`˛o£
(
pùefd
[1]);

89 (
rc
);

92 i‡–(
rc
 = 
	`ªad
(
pùefd
[0], &
c
, 1)) != 0)

93 
rc
 = 
î∫o
;

94 
	`˛o£
(
pùefd
[0]);

95 
	`˛o£
(
pùefd
[1]);

96 
	`±hªad_ˇn˚l
(
tid
);

97 (
rc
);

98 
	}
}

101 
	$mymq_waô_thªad
(*
¨g
)

103 
mymq_hdr
 *
mqhdr
;

104 
mymq_©å
 *
©å
;

106 
mqhdr
 = (
mymq_hdr
 *Ë
¨g
;

107 
©å
 = &
mqhdr
->
mqh_©å
;

108 
©å
->
mq_curmsgs
 == 0)

109 
	`±hªad_c⁄d_waô
(&
mqhdr
->
mqh_waô
, &mqhdr->
mqh_lock
);

111 
	`˛o£
(
pùefd
[1]);

112 (
NULL
);

113 
	}
}

116 
ssize_t


117 
	$Mymq_ª˚ive
(
mymqd_t
 
mqd
, *
±r
, 
size_t
 
Àn
, *
¥i›
)

119 
ssize_t
 
n
;

121 i‡–(
n
 = 
	`mymq_ª˚ive
(
mqd
, 
±r
, 
Àn
, 
¥i›
)) == -1)

122 
	`îr_sys
("mymq_receiveÉrror");

123 (
n
);

124 
	}
}

	@my_pxmsg_mmap/test1.c

1 
	~"u≈ùc.h
"

3 
	#BUFFLEN
 100

	)

4 
	gmsg
[
BUFFLEN
];

6 
	gmsg0
[] = "";

7 
	gmsg1
[] = "1";

8 
	gmsg2
[] = "22";

9 
	gmsg3
[] = "333";

10 
	gmsg4
[] = "4444";

11 
	gmsg5
[] = "55555";

12 
	gmsg6
[] = "666666";

13 
	gmsg7
[] = "7777777";

14 
	gmsg8
[] = "88888888";

16 
sig_Ærm
();

17 
sig_u§1
();

18 
	gblocked
, 
	gsigu§1
;

21 
	$maö
(
¨gc
, **
¨gv
)

23 
rc
;

24 
pid_t
 
chûdpid
;

25 
mqd_t
 
mqd
;

26 
¥io
;

27 
sigevít
 
sigev
;

28 
mq_©å
 
©å
, 
öfo
;

30 i‡(
¨gc
 != 2)

31 
	`îr_quô
("usage:Åestmymq <name>");

35 
	`mq_u∆ök
(
¨gv
[1]);

36 i‡––
rc
 = 
	`mq_u∆ök
(
¨gv
[1])Ë=0 || 
î∫o
 !
ENOENT
)

37 
	`îr_sys
("mq_u∆ökÑëu∫ed %d", 
rc
);

41 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
, 
NULL
);

42 
	`Mq_gë©å
(
mqd
, &
öfo
);

43 i‡(
öfo
.
mq_maxmsg
 !128 || info.
mq_msgsize
 != 1024 ||

44 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

45 
	`îr_msg
("message queue defaults:\n"

47 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

48 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

49 
	`Mq_˛o£
(
mqd
);

53 
mqd
 = 
	`mq_›í
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
, 
NULL
);

54 i‡(
mqd
 !(
mqd_t
Ë-1 || 
î∫o
 !
EEXIST
)

55 
	`îr_sys
("mq_›íÑëu∫ed %d", 
rc
);

56 
	`Mq_u∆ök
(
¨gv
[1]);

60 
©å
.
mq_maxmsg
 = 4;

61 
©å
.
mq_msgsize
 = 7;

62 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
, &
©å
);

63 
	`Mq_gë©å
(
mqd
, &
öfo
);

64 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

65 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

66 
	`îr_quô
("1: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

67 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

68 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

72 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

73 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

74 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

75 i‡(
¥io
 != 1)

76 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

79 
	`Mq_£nd
(
mqd
, 
msg0
, 0, 0);

80 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 0)

81 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 0", 
rc
);

82 i‡(
¥io
 != 0)

83 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 0", 
¥io
);

87 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

88 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

89 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

90 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

91 i‡(
¥io
 != 2)

92 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

93 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

94 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

95 i‡(
¥io
 != 1)

96 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

99 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

100 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

101 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

102 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

103 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

104 i‡(
¥io
 != 3)

105 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

106 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

107 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

108 i‡(
¥io
 != 2)

109 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

110 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

111 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

112 i‡(
¥io
 != 1)

113 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

116 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

117 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

118 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

119 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

120 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

121 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

122 i‡(
¥io
 != 4)

123 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

124 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

125 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

126 i‡(
¥io
 != 3)

127 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

128 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

129 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

130 i‡(
¥io
 != 2)

131 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

132 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

133 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

134 i‡(
¥io
 != 1)

135 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

139 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

140 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

141 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

142 i‡(
¥io
 != 4)

143 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

146 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

147 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

148 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

149 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

150 i‡(
¥io
 != 4)

151 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

152 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

153 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

154 i‡(
¥io
 != 3)

155 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

158 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

159 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

160 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

161 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

162 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

163 i‡(
¥io
 != 4)

164 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

165 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

166 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

167 i‡(
¥io
 != 3)

168 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

169 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

170 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

171 i‡(
¥io
 != 2)

172 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

176 i‡–(
rc
 = 
	`mq_£nd
(
mqd
, 
msg4
, 8, 4)Ë=0 || 
î∫o
 !
EMSGSIZE
)

177 
	`îr_sys
("mq_£ndÑëu∫ed %d,Éx≥˘ed EMSGSIZE", 
rc
);

178 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

179 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

180 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

181 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

182 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

183 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

184 i‡(
¥io
 != 4)

185 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

186 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

187 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

188 i‡(
¥io
 != 3)

189 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

190 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

191 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

192 i‡(
¥io
 != 2)

193 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

195 i‡–(
rc
 = 
	`mq_ª˚ive
(
mqd
, 
msg
, 6, &
¥io
)Ë=0 || 
î∫o
 !
EMSGSIZE
)

196 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EMSGSIZE", 
rc
);

197 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

198 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

199 i‡(
¥io
 != 1)

200 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

203 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

204 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

205 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

206 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

207 
	`Mq_˛o£
(
mqd
);

209 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDWR
 | 
O_NONBLOCK
);

210 
	`Mq_gë©å
(
mqd
, &
öfo
);

211 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

212 
öfo
.
mq_Êags
 !
O_NONBLOCK
 || info.
mq_curmsgs
 != 4)

213 
	`îr_quô
("2: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

214 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

215 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

216 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 4)

217 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

218 i‡(
¥io
 != 4)

219 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

220 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

221 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

222 i‡(
¥io
 != 3)

223 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

224 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 2)

225 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

226 i‡(
¥io
 != 2)

227 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

228 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

229 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

230 i‡(
¥io
 != 1)

231 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

233 i‡–(
rc
 = 
	`mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) == 0 ||

234 
î∫o
 !
EAGAIN
)

235 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EAGAIN", 
rc
);

238 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

239 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

240 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

241 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

243 i‡–(
rc
 = 
	`mq_£nd
(
mqd
, 
msg5
, 5, 5)Ë=0 || 
î∫o
 !
EAGAIN
)

244 
	`îr_sys
("mq_£ndÑëu∫ed %d,Éx≥˘ed EAGAIN", 
rc
);

245 
	`Mq_˛o£
(
mqd
);

248 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDWR
);

249 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 4)

250 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

251 i‡(
¥io
 != 4)

252 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

254 
©å
.
mq_Êags
 = 
O_NONBLOCK
;

255 
	`Mq_£èâr
(
mqd
, &
©å
, &
öfo
);

256 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

257 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 3)

258 
	`îr_quô
("3: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

259 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

260 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

261 
	`Mq_gë©å
(
mqd
, &
öfo
);

262 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

263 
öfo
.
mq_Êags
 !
O_NONBLOCK
 || info.
mq_curmsgs
 != 3)

264 
	`îr_quô
("4: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

265 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

266 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

267 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

268 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

269 i‡(
¥io
 != 3)

270 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

271 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 2)

272 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

273 i‡(
¥io
 != 2)

274 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

275 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

276 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

277 i‡(
¥io
 != 1)

278 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

280 i‡–(
rc
 = 
	`mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) == 0 ||

281 
î∫o
 !
EAGAIN
)

282 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EAGAIN", 
rc
);

285 
©å
.
mq_Êags
 = 0;

286 
	`Mq_£èâr
(
mqd
, &
©å
, &
öfo
);

287 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

288 
öfo
.
mq_Êags
 !
O_NONBLOCK
 || info.
mq_curmsgs
 != 0)

289 
	`îr_quô
("5: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

290 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

291 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

292 
	`Mq_gë©å
(
mqd
, &
öfo
);

293 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

294 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

295 
	`îr_quô
("6: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

296 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

297 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

298 #ifdef 
nŸdef


300 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

301 
blocked
 = 1;

302 
	`Æ¨m
(4);

303 i‡–(
rc
 = 
	`mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) == 0 ||

304 
î∫o
 !
EINTR
)

305 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EINTR", 
rc
);

306 
	`Æ¨m
(0);

307 
	`¥ötf
("mq_receive interrupted,ásÉxpected\n");

310 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

311 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

312 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

313 
	`Mq_£nd
(
mqd
, 
msg4
, 4, 4);

314 
	`Mq_gë©å
(
mqd
, &
öfo
);

315 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

316 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 4)

317 
	`îr_quô
("7: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

318 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

319 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

321 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

322 
blocked
 = 1;

323 
	`Æ¨m
(4);

324 
	`¥ötf
("aboutÅo call mq_send\n");

325 i‡–(
rc
 = 
	`mq_£nd
(
mqd
, 
msg5
, 5, 5)Ë=0 || 
î∫o
 !
EINTR
)

326 
	`îr_sys
("mq_£ndÑëu∫ed %d,Éx≥˘ed EINTR", 
rc
);

327 
	`Æ¨m
(0);

328 
	`¥ötf
("mq_send interrupted,ásÉxpected\n");

332 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

333 
sigev
.
sigev_signo
 = 
SIGUSR1
;

334 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

335 
	`Mq_nŸify
(
mqd
, &
sigev
);

337 i‡–(
rc
 = 
	`mq_nŸify
(
mqd
, &
sigev
)Ë=0 || 
î∫o
 !
EBUSY
)

338 
	`îr_sys
("mq_nŸifyÑëu∫ed %d,Éx≥˘ed EBUSY", 
rc
);

340 
	`Mq_nŸify
(
mqd
, 
NULL
);

341 
	`Mq_nŸify
(
mqd
, &
sigev
);

343 i‡–(
rc
 = 
	`mq_nŸify
(
mqd
, &
sigev
)Ë=0 || 
î∫o
 !
EBUSY
)

344 
	`îr_sys
("mq_nŸifyÑëu∫ed %d,Éx≥˘ed EBUSY", 
rc
);

347 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

348 i‡–(
rc
 = 
	`mq_nŸify
(
mqd
, &
sigev
)Ë=0 || 
î∫o
 !
EBUSY
)

349 
	`îr_sys
("mq_nŸifyÑëu∫ed %d,Éx≥˘ed EBUSY", 
rc
);

350 
	`exô
(0);

352 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

355 
sigu§1
 = 0;

356 
	`Mq_£nd
(
mqd
, 
msg5
, 5, 5);

357 
	`¶ìp
(1);

358 i‡(
sigu§1
 != 1)

359 
	`îr_quô
("sigu§1 = %d,Éx≥˘ed 1", 
sigu§1
);

360 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 5)

361 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 5", 
rc
);

362 i‡(
¥io
 != 5)

363 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 5", 
¥io
);

366 
	`Mq_£nd
(
mqd
, 
msg2
, 2, 2);

367 
	`¶ìp
(1);

368 i‡(
sigu§1
 != 1)

369 
	`îr_quô
("sigu§1 = %d,Éx≥˘ed 1", 
sigu§1
);

370 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 2)

371 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

372 i‡(
¥io
 != 2)

373 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

376 
	`Mq_nŸify
(
mqd
, &
sigev
);

377 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

379 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 6)

380 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 6", 
rc
);

381 i‡(
¥io
 != 6)

382 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 6", 
¥io
);

383 
	`exô
(0);

385 
	`¶ìp
(2);

386 
	`Mq_£nd
(
mqd
, 
msg6
, 6, 6);

387 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

388 i‡(
sigu§1
 != 1)

389 
	`îr_quô
("sigu§1 = %d,Éx≥˘ed 1", 
sigu§1
);

392 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

393 
	`¶ìp
(2);

394 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

395 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

396 i‡(
¥io
 != 3)

397 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

398 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

399 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

400 i‡(
¥io
 != 1)

401 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

402 
	`exô
(0);

404 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

405 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

406 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

407 
	`Mq_gë©å
(
mqd
, &
öfo
);

408 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

409 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

410 
	`îr_quô
("8: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

411 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

412 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

414 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

415 
	`Mq_£nd
(
mqd
, 
msg3
, 3, 3);

416 
	`Mq_£nd
(
mqd
, 
msg5
, 5, 5);

417 
	`Mq_£nd
(
mqd
, 
msg1
, 1, 1);

418 
	`exô
(0);

420 
	`¶ìp
(2);

421 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 5)

422 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 5", 
rc
);

423 i‡(
¥io
 != 5)

424 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 5", 
¥io
);

425 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

426 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

427 i‡(
¥io
 != 3)

428 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

429 i‡–(
rc
 = 
	`Mq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

430 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

431 i‡(
¥io
 != 1)

432 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

433 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

434 
	`Mq_gë©å
(
mqd
, &
öfo
);

435 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

436 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

437 
	`îr_quô
("9: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

438 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

439 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

441 
	`¥ötf
("done\n");

442 
	`exô
(0);

443 
	}
}

446 
	$sig_u§1
(
signo
)

448 
sigu§1
++;

450 
	}
}

453 
	$sig_Ærm
(
signo
)

455 
	`¥ötf
("SIGALRM caught\n");

457 
	}
}

	@my_pxmsg_mmap/test2.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
	`¥ötf
("sizeof’thªad_muãx_tË%d\n", (
±hªad_muãx_t
));

7 
	`¥ötf
("sizeof’thªad_c⁄d_tË%d\n", (
±hªad_c⁄d_t
));

8 
	`¥ötf
("sizeof(°ru˘ sigevítË%d\n", (
sigevít
));

9 
	`exô
(0);

10 
	}
}

	@my_pxmsg_mmap/testmq.c

1 
	~"u≈ùc.h
"

2 
	~"mqueue.h
"

4 
	#BUFFLEN
 100

	)

5 
	gmsg
[
BUFFLEN
];

7 
	gmsg0
[] = "";

8 
	gmsg1
[] = "1";

9 
	gmsg2
[] = "22";

10 
	gmsg3
[] = "333";

11 
	gmsg4
[] = "4444";

12 
	gmsg5
[] = "55555";

13 
	gmsg6
[] = "666666";

14 
	gmsg7
[] = "7777777";

15 
	gmsg8
[] = "88888888";

17 
sig_Ærm
();

18 
sig_u§1
();

19 
	gblocked
, 
	gsigu§1
;

22 
	$maö
(
¨gc
, **
¨gv
)

24 
rc
;

25 
pid_t
 
chûdpid
;

26 
mymqd_t
 
mqd
;

27 
¥io
;

28 
sigevít
 
sigev
;

29 
mymq_©å
 
©å
, 
öfo
;

31 i‡(
¨gc
 != 2)

32 
	`îr_quô
("usage:Åestmymq <pathname>");

36 
	`mymq_u∆ök
(
¨gv
[1]);

37 i‡––
rc
 = 
	`mymq_u∆ök
(
¨gv
[1])Ë=0 || 
î∫o
 !
ENOENT
)

38 
	`îr_sys
("mq_u∆ökÑëu∫ed %d", 
rc
);

42 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
, 
NULL
);

43 
	`Mymq_gë©å
(
mqd
, &
öfo
);

44 i‡(
öfo
.
mq_maxmsg
 !128 || info.
mq_msgsize
 != 1024 ||

45 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

46 
	`îr_msg
("message queue defaults:\n"

48 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

49 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

50 
	`Mymq_˛o£
(
mqd
);

54 
mqd
 = 
	`mymq_›í
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
, 
NULL
);

55 i‡(
mqd
 !(
mqd_t
Ë-1 || 
î∫o
 !
EEXIST
)

56 
	`îr_sys
("mq_›íÑëu∫ed %d", 
rc
);

57 
	`Mymq_u∆ök
(
¨gv
[1]);

61 
©å
.
mq_maxmsg
 = 4;

62 
©å
.
mq_msgsize
 = 7;

63 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_CREAT
 | 
O_EXCL
 | 
O_RDWR
, 
FILE_MODE
, &
©å
);

64 
	`Mymq_gë©å
(
mqd
, &
öfo
);

65 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

66 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

67 
	`îr_quô
("1: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

68 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

69 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

73 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

74 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

75 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

76 i‡(
¥io
 != 1)

77 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

80 
	`Mymq_£nd
(
mqd
, 
msg0
, 0, 0);

81 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 0)

82 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 0", 
rc
);

83 i‡(
¥io
 != 0)

84 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 0", 
¥io
);

88 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

89 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

90 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

91 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

92 i‡(
¥io
 != 2)

93 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

94 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

95 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

96 i‡(
¥io
 != 1)

97 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

100 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

101 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

102 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

103 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

104 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

105 i‡(
¥io
 != 3)

106 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

107 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

108 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

109 i‡(
¥io
 != 2)

110 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

111 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

112 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

113 i‡(
¥io
 != 1)

114 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

117 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

118 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

119 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

120 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

121 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

122 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

123 i‡(
¥io
 != 4)

124 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

125 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

126 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

127 i‡(
¥io
 != 3)

128 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

129 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

130 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

131 i‡(
¥io
 != 2)

132 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

133 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

134 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

135 i‡(
¥io
 != 1)

136 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

140 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

141 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

142 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

143 i‡(
¥io
 != 4)

144 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

147 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

148 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

149 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

150 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

151 i‡(
¥io
 != 4)

152 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

153 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

154 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

155 i‡(
¥io
 != 3)

156 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

159 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

160 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

161 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

162 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

163 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

164 i‡(
¥io
 != 4)

165 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

166 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

167 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

168 i‡(
¥io
 != 3)

169 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

170 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

171 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

172 i‡(
¥io
 != 2)

173 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

177 i‡–(
rc
 = 
	`mymq_£nd
(
mqd
, 
msg4
, 8, 4)Ë=0 || 
î∫o
 !
EMSGSIZE
)

178 
	`îr_sys
("mq_£ndÑëu∫ed %d,Éx≥˘ed EMSGSIZE", 
rc
);

179 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

180 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

181 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

182 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

183 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 4)

184 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

185 i‡(
¥io
 != 4)

186 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

187 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 3)

188 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

189 i‡(
¥io
 != 3)

190 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

191 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 2)

192 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

193 i‡(
¥io
 != 2)

194 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

196 i‡–(
rc
 = 
	`mymq_ª˚ive
(
mqd
, 
msg
, 6, &
¥io
)Ë=0 || 
î∫o
 !
EMSGSIZE
)

197 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EMSGSIZE", 
rc
);

198 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
BUFFLEN
, &
¥io
)) != 1)

199 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

200 i‡(
¥io
 != 1)

201 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

204 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

205 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

206 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

207 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

208 
	`Mymq_˛o£
(
mqd
);

210 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_RDWR
 | 
O_NONBLOCK
);

211 
	`Mymq_gë©å
(
mqd
, &
öfo
);

212 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

213 
öfo
.
mq_Êags
 !
O_NONBLOCK
 || info.
mq_curmsgs
 != 4)

214 
	`îr_quô
("2: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

215 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

216 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

217 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 4)

218 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

219 i‡(
¥io
 != 4)

220 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

221 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

222 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

223 i‡(
¥io
 != 3)

224 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

225 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 2)

226 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

227 i‡(
¥io
 != 2)

228 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

229 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

230 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

231 i‡(
¥io
 != 1)

232 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

234 i‡–(
rc
 = 
	`mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) == 0 ||

235 
î∫o
 !
EAGAIN
)

236 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EAGAIN", 
rc
);

239 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

240 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

241 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

242 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

244 i‡–(
rc
 = 
	`mymq_£nd
(
mqd
, 
msg5
, 5, 5)Ë=0 || 
î∫o
 !
EAGAIN
)

245 
	`îr_sys
("mq_£ndÑëu∫ed %d,Éx≥˘ed EAGAIN", 
rc
);

246 
	`Mymq_˛o£
(
mqd
);

249 
mqd
 = 
	`Mymq_›í
(
¨gv
[1], 
O_RDWR
);

250 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 4)

251 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 4", 
rc
);

252 i‡(
¥io
 != 4)

253 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 4", 
¥io
);

255 
©å
.
mq_Êags
 = 
O_NONBLOCK
;

256 
	`Mymq_£èâr
(
mqd
, &
©å
, &
öfo
);

257 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

258 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 3)

259 
	`îr_quô
("3: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

260 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

261 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

262 
	`Mymq_gë©å
(
mqd
, &
öfo
);

263 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

264 
öfo
.
mq_Êags
 !
O_NONBLOCK
 || info.
mq_curmsgs
 != 3)

265 
	`îr_quô
("4: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

266 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

267 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

268 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

269 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

270 i‡(
¥io
 != 3)

271 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

272 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 2)

273 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

274 i‡(
¥io
 != 2)

275 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

276 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

277 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

278 i‡(
¥io
 != 1)

279 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

281 i‡–(
rc
 = 
	`mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) == 0 ||

282 
î∫o
 !
EAGAIN
)

283 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EAGAIN", 
rc
);

286 
©å
.
mq_Êags
 = 0;

287 
	`Mymq_£èâr
(
mqd
, &
©å
, &
öfo
);

288 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

289 
öfo
.
mq_Êags
 !
O_NONBLOCK
 || info.
mq_curmsgs
 != 0)

290 
	`îr_quô
("5: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

291 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

292 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

293 
	`Mymq_gë©å
(
mqd
, &
öfo
);

294 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

295 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

296 
	`îr_quô
("6: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

297 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

298 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

299 #ifdef 
nŸdef


301 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

302 
blocked
 = 1;

303 
	`Æ¨m
(4);

304 i‡–(
rc
 = 
	`mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) == 0 ||

305 
î∫o
 !
EINTR
)

306 
	`îr_sys
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed EINTR", 
rc
);

307 
	`Æ¨m
(0);

308 
	`¥ötf
("mymq_receive interrupted,ásÉxpected\n");

311 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

312 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

313 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

314 
	`Mymq_£nd
(
mqd
, 
msg4
, 4, 4);

315 
	`Mymq_gë©å
(
mqd
, &
öfo
);

316 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

317 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 4)

318 
	`îr_quô
("7: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

319 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

320 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

322 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

323 
blocked
 = 1;

324 
	`Æ¨m
(4);

325 
	`¥ötf
("aboutÅo call mymq_send\n");

326 i‡–(
rc
 = 
	`mymq_£nd
(
mqd
, 
msg5
, 5, 5)Ë=0 || 
î∫o
 !
EINTR
)

327 
	`îr_sys
("mq_£ndÑëu∫ed %d,Éx≥˘ed EINTR", 
rc
);

328 
	`Æ¨m
(0);

329 
	`¥ötf
("mymq_send interrupted,ásÉxpected\n");

333 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

334 
sigev
.
sigev_signo
 = 
SIGUSR1
;

335 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

336 
	`Mymq_nŸify
(
mqd
, &
sigev
);

338 i‡–(
rc
 = 
	`mymq_nŸify
(
mqd
, &
sigev
)Ë=0 || 
î∫o
 !
EBUSY
)

339 
	`îr_sys
("mq_nŸifyÑëu∫ed %d,Éx≥˘ed EBUSY", 
rc
);

341 
	`Mymq_nŸify
(
mqd
, 
NULL
);

342 
	`Mymq_nŸify
(
mqd
, &
sigev
);

344 i‡–(
rc
 = 
	`mymq_nŸify
(
mqd
, &
sigev
)Ë=0 || 
î∫o
 !
EBUSY
)

345 
	`îr_sys
("mq_nŸifyÑëu∫ed %d,Éx≥˘ed EBUSY", 
rc
);

348 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

349 i‡–(
rc
 = 
	`mymq_nŸify
(
mqd
, &
sigev
)Ë=0 || 
î∫o
 !
EBUSY
)

350 
	`îr_sys
("mq_nŸifyÑëu∫ed %d,Éx≥˘ed EBUSY", 
rc
);

351 
	`exô
(0);

353 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

356 
sigu§1
 = 0;

357 
	`Mymq_£nd
(
mqd
, 
msg5
, 5, 5);

358 
	`¶ìp
(1);

359 i‡(
sigu§1
 != 1)

360 
	`îr_quô
("sigu§1 = %d,Éx≥˘ed 1", 
sigu§1
);

361 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 5)

362 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 5", 
rc
);

363 i‡(
¥io
 != 5)

364 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 5", 
¥io
);

367 
	`Mymq_£nd
(
mqd
, 
msg2
, 2, 2);

368 
	`¶ìp
(1);

369 i‡(
sigu§1
 != 1)

370 
	`îr_quô
("sigu§1 = %d,Éx≥˘ed 1", 
sigu§1
);

371 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 2)

372 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 2", 
rc
);

373 i‡(
¥io
 != 2)

374 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 2", 
¥io
);

377 
	`Mymq_nŸify
(
mqd
, &
sigev
);

378 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

380 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 6)

381 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 6", 
rc
);

382 i‡(
¥io
 != 6)

383 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 6", 
¥io
);

384 
	`exô
(0);

386 
	`¶ìp
(2);

387 
	`Mymq_£nd
(
mqd
, 
msg6
, 6, 6);

388 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

389 i‡(
sigu§1
 != 1)

390 
	`îr_quô
("sigu§1 = %d,Éx≥˘ed 1", 
sigu§1
);

393 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

394 
	`¶ìp
(2);

395 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

396 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

397 i‡(
¥io
 != 3)

398 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

399 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

400 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

401 i‡(
¥io
 != 1)

402 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

403 
	`exô
(0);

405 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

406 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

407 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

408 
	`Mymq_gë©å
(
mqd
, &
öfo
);

409 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

410 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

411 
	`îr_quô
("8: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

412 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

413 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

415 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

416 
	`Mymq_£nd
(
mqd
, 
msg3
, 3, 3);

417 
	`Mymq_£nd
(
mqd
, 
msg5
, 5, 5);

418 
	`Mymq_£nd
(
mqd
, 
msg1
, 1, 1);

419 
	`exô
(0);

421 
	`¶ìp
(2);

422 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 5)

423 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 5", 
rc
);

424 i‡(
¥io
 != 5)

425 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 5", 
¥io
);

426 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 3)

427 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 3", 
rc
);

428 i‡(
¥io
 != 3)

429 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 3", 
¥io
);

430 i‡–(
rc
 = 
	`Mymq_ª˚ive
(
mqd
, 
msg
, 
öfo
.
mq_msgsize
, &
¥io
)) != 1)

431 
	`îr_quô
("mq_ª˚ivêªtu∫ed %d,Éx≥˘ed 1", 
rc
);

432 i‡(
¥io
 != 1)

433 
	`îr_quô
("mq_ª˚ivêªtu∫edÖriÿ%d,Éx≥˘ed 1", 
¥io
);

434 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

435 
	`Mymq_gë©å
(
mqd
, &
öfo
);

436 i‡(
öfo
.
mq_maxmsg
 !4 || info.
mq_msgsize
 != 7 ||

437 
öfo
.
mq_Êags
 !0 || info.
mq_curmsgs
 != 0)

438 
	`îr_quô
("9: maxmsg = %ld, msgsize = %ld, flags = %ld, curmsgs = %ld\n",

439 
öfo
.
mq_maxmsg
, info.
mq_msgsize
,

440 
öfo
.
mq_Êags
, info.
mq_curmsgs
);

442 
	`¥ötf
("done\n");

443 
	`exô
(0);

444 
	}
}

447 
	$sig_u§1
(
signo
)

449 
sigu§1
++;

451 
	}
}

454 
	$sig_Ærm
(
signo
)

456 
	`¥ötf
("SIGALRM caught\n");

458 
	}
}

	@my_pxmsg_mmap/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@my_pxsem_fifo/prodcons1.c

10 
	~"u≈ùc.h
"

11 
	~"£m≠h‹e.h
"

13 
	#NBUFF
 10

	)

14 
	#SEM_MUTEX
 "muãx"

	)

15 
	#SEM_NEMPTY
 "√m±y"

	)

16 
	#SEM_NSTORED
 "n°‹ed"

	)

18 
	gnôems
;

20 
	mbuff
[
NBUFF
];

21 
my£m_t
 *
	mmuãx
, *
	m√m±y
, *
	mn°‹ed
;

22 } 
	gsh¨ed
;

24 *
¥odu˚
(*), *
c⁄sume
(*);

27 
	$maö
(
¨gc
, **
¨gv
)

29 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

31 i‡(
¨gc
 != 2)

32 
	`îr_quô
("usage:Örodcons1 <#items>");

33 
nôems
 = 
	`©oi
(
¨gv
[1]);

36 
sh¨ed
.
muãx
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_MUTEX
), 
O_CREAT
 | 
O_EXCL
,

37 
FILE_MODE
, 1);

38 
sh¨ed
.
√m±y
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_NEMPTY
), 
O_CREAT
 | 
O_EXCL
,

39 
FILE_MODE
, 
NBUFF
);

40 
sh¨ed
.
n°‹ed
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_NSTORED
), 
O_CREAT
 | 
O_EXCL
,

41 
FILE_MODE
, 0);

43 
	`Së_c⁄cuºícy
(2);

44 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

45 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

47 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

48 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

50 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_MUTEX
));

51 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_NEMPTY
));

52 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_NSTORED
));

53 
	`exô
(0);

54 
	}
}

59 
	$¥odu˚
(*
¨g
)

61 
i
;

63 
i
 = 0; i < 
nôems
; i++) {

64 
	`My£m_waô
(
sh¨ed
.
√m±y
);

65 
	`My£m_waô
(
sh¨ed
.
muãx
);

66 
sh¨ed
.
buff
[
i
 % 
NBUFF
] = i;

67 
	`My£m_po°
(
sh¨ed
.
muãx
);

68 
	`My£m_po°
(
sh¨ed
.
n°‹ed
);

70 (
NULL
);

71 
	}
}

74 
	$c⁄sume
(*
¨g
)

76 
i
;

78 
i
 = 0; i < 
nôems
; i++) {

79 
	`My£m_waô
(
sh¨ed
.
n°‹ed
);

80 
	`My£m_waô
(
sh¨ed
.
muãx
);

81 i‡(
sh¨ed
.
buff
[
i
 % 
NBUFF
] != i)

82 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[ò% 
NBUFF
]);

83 
	`My£m_po°
(
sh¨ed
.
muãx
);

84 
	`My£m_po°
(
sh¨ed
.
√m±y
);

86 (
NULL
);

87 
	}
}

	@my_pxsem_fifo/sem_close.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_˛o£
(
my£m_t
 *
£m
)

8 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

9 
î∫o
 = 
EINVAL
;

13 
£m
->
£m_magic
 = 0;

14 i‡(
	`˛o£
(
£m
->
£m_fd
[0]) == -1 || close(sem->sem_fd[1]) == -1) {

15 
	`‰ì
(
£m
);

18 
	`‰ì
(
£m
);

20 
	}
}

24 
	$My£m_˛o£
(
my£m_t
 *
£m
)

26 i‡(
	`my£m_˛o£
(
£m
) == -1)

27 
	`îr_sys
("mysem_closeÉrror");

28 
	}
}

	@my_pxsem_fifo/sem_open.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

5 
	~<°d¨g.h
>

7 
my£m_t
 *

8 
	$my£m_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

10 
i
, 
Êags
, 
ßve_î∫o
;

11 
c
;

12 
mode_t
 
mode
;

13 
va_li°
 
≠
;

14 
my£m_t
 *
£m
;

15 
vÆue
;

17 i‡(
oÊag
 & 
O_CREAT
) {

18 
	`va_°¨t
(
≠
, 
oÊag
);

19 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

20 
vÆue
 = 
	`va_¨g
(
≠
, );

21 
	`va_íd
(
≠
);

23 i‡(
	`mkfifo
(
∑th«me
, 
mode
) < 0) {

24 i‡(
î∫o
 =
EEXIST
 && (
oÊag
 & 
O_EXCL
) == 0)

25 
oÊag
 &~
O_CREAT
;

27 (
SEM_FAILED
);

32 i‡–(
£m
 = 
	`mÆloc
((
my£m_t
))Ë=
NULL
)

33 (
SEM_FAILED
);

34 
£m
->
£m_fd
[0] = sem->sem_fd[1] = -1;

36 i‡–(
£m
->
£m_fd
[0] = 
	`›í
(
∑th«me
, 
O_RDONLY
 | 
O_NONBLOCK
)) < 0)

37 
îr‹
;

38 i‡–(
£m
->
£m_fd
[1] = 
	`›í
(
∑th«me
, 
O_WRONLY
 | 
O_NONBLOCK
)) < 0)

39 
îr‹
;

43 i‡–(
Êags
 = 
	`f˙é
(
£m
->
£m_fd
[0], 
F_GETFL
, 0)) < 0)

44 
îr‹
;

45 
Êags
 &~
O_NONBLOCK
;

46 i‡(
	`f˙é
(
£m
->
£m_fd
[0], 
F_SETFL
, 
Êags
) < 0)

47 
îr‹
;

49 i‡(
oÊag
 & 
O_CREAT
) {

50 
i
 = 0; i < 
vÆue
; i++)

51 i‡(
	`wrôe
(
£m
->
£m_fd
[1], &
c
, 1) != 1)

52 
îr‹
;

55 
£m
->
£m_magic
 = 
SEM_MAGIC
;

56 (
£m
);

58 
îr‹
:

59 
ßve_î∫o
 = 
î∫o
;

60 i‡(
oÊag
 & 
O_CREAT
)

61 
	`u∆ök
(
∑th«me
);

62 
	`˛o£
(
£m
->
£m_fd
[0]);

63 
	`˛o£
(
£m
->
£m_fd
[1]);

64 
	`‰ì
(
£m
);

65 
î∫o
 = 
ßve_î∫o
;

66 (
SEM_FAILED
);

67 
	}
}

70 
my£m_t
 *

71 
	$My£m_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

73 
va_li°
 
≠
;

74 
mode_t
 
mode
;

75 
my£m_t
 *
£m
;

76 
vÆue
;

78 i‡(
oÊag
 & 
O_CREAT
) {

79 
	`va_°¨t
(
≠
, 
oÊag
);

80 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

81 
vÆue
 = 
	`va_¨g
(
≠
, );

82 i‡–(
£m
 = 
	`my£m_›í
(
∑th«me
, 
oÊag
, 
mode
, 
vÆue
)Ë=
SEM_FAILED
)

83 
	`îr_sys
("my£m_›íÉº‹ f‹ %s", 
∑th«me
);

84 
	`va_íd
(
≠
);

86 i‡–(
£m
 = 
	`my£m_›í
(
∑th«me
, 
oÊag
)Ë=
SEM_FAILED
)

87 
	`îr_sys
("my£m_›íÉº‹ f‹ %s", 
∑th«me
);

90 (
£m
);

91 
	}
}

	@my_pxsem_fifo/sem_post.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_po°
(
my£m_t
 *
£m
)

8 
c
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡(
	`wrôe
(
£m
->
£m_fd
[1], &
c
, 1) == 1)

18 
	}
}

22 
	$My£m_po°
(
my£m_t
 *
£m
)

24 i‡(
	`my£m_po°
(
£m
) == -1)

25 
	`îr_sys
("mysem_postÉrror");

26 
	}
}

	@my_pxsem_fifo/sem_unlink.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_u∆ök
(c⁄° *
∑th«me
)

8 (
	`u∆ök
(
∑th«me
));

9 
	}
}

13 
	$My£m_u∆ök
(c⁄° *
∑th«me
)

15 i‡(
	`my£m_u∆ök
(
∑th«me
) == -1)

16 
	`îr_sys
("mysem_unlinkÉrror");

17 
	}
}

	@my_pxsem_fifo/sem_wait.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_waô
(
my£m_t
 *
£m
)

8 
c
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡(
	`ªad
(
£m
->
£m_fd
[0], &
c
, 1) == 1)

18 
	}
}

22 
	$My£m_waô
(
my£m_t
 *
£m
)

24 i‡(
	`my£m_waô
(
£m
) == -1)

25 
	`îr_sys
("mysem_waitÉrror");

26 
	}
}

	@my_pxsem_fifo/semaphore.h

4 
	m£m_fd
[2];

5 
	m£m_magic
;

6 } 
	tmy£m_t
;

8 
	#SEM_MAGIC
 0x89674523

	)

10 #ifdef 
SEM_FAILED


11 #unde‡
SEM_FAILED


12 
	#SEM_FAILED
 ((
my£m_t
 *)(-1)Ë

	)

17 
my£m_˛o£
(
my£m_t
 *);

18 
my£m_t
 *
my£m_›í
(const *, , ... );

19 
my£m_po°
(
my£m_t
 *);

20 
my£m_u∆ök
(const *);

21 
my£m_waô
(
my£m_t
 *);

24 
My£m_˛o£
(
my£m_t
 *);

25 
my£m_t
 *
My£m_›í
(const *, , ... );

26 
My£m_po°
(
my£m_t
 *);

27 
My£m_u∆ök
(const *);

28 
My£m_waô
(
my£m_t
 *);

	@my_pxsem_fifo/testeintr.c

1 
	~"u≈ùc.h
"

2 
	~"£m≠h‹e.h
"

4 
	#NAME
 "ã°eöå"

	)

6 
sig_Ærm
();

9 
	$maö
(
¨gc
, **
¨gv
)

11 
my£m_t
 *
£m1
;

14 
	`my£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

15 
£m1
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
NAME
), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
,

16 
FILE_MODE
, 0);

18 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

19 
	`Æ¨m
(2);

20 i‡(
	`my£m_waô
(
£m1
) == 0)

21 
	`¥ötf
("mysem_waitÑeturned 0?\n");

23 
	`îr_ªt
("mysem_waitÉrror");

24 
	`My£m_˛o£
(
£m1
);

26 
	`exô
(0);

27 
	}
}

30 
	$sig_Ærm
(
signo
)

32 
	`¥ötf
("SIGALRM caught\n");

34 
	}
}

	@my_pxsem_fifo/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@my_pxsem_mmap/prodcons1.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

5 
	#NBUFF
 10

	)

6 
	#SEM_MUTEX
 "muãx"

	)

7 
	#SEM_NEMPTY
 "√m±y"

	)

8 
	#SEM_NSTORED
 "n°‹ed"

	)

10 
	gnôems
;

12 
	mbuff
[
NBUFF
];

13 
my£m_t
 *
	mmuãx
, *
	m√m±y
, *
	mn°‹ed
;

14 } 
	gsh¨ed
;

16 *
¥odu˚
(*), *
c⁄sume
(*);

19 
	$maö
(
¨gc
, **
¨gv
)

21 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

23 i‡(
¨gc
 != 2)

24 
	`îr_quô
("usage:Örodcons1 <#items>");

25 
nôems
 = 
	`©oi
(
¨gv
[1]);

28 
sh¨ed
.
muãx
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_MUTEX
), 
O_CREAT
 | 
O_EXCL
,

29 
FILE_MODE
, 1);

30 
sh¨ed
.
√m±y
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_NEMPTY
), 
O_CREAT
 | 
O_EXCL
,

31 
FILE_MODE
, 
NBUFF
);

32 
sh¨ed
.
n°‹ed
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_NSTORED
), 
O_CREAT
 | 
O_EXCL
,

33 
FILE_MODE
, 0);

35 
	`Së_c⁄cuºícy
(2);

36 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

37 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

39 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

40 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

42 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_MUTEX
));

43 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_NEMPTY
));

44 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_NSTORED
));

45 
	`exô
(0);

46 
	}
}

51 
	$¥odu˚
(*
¨g
)

53 
i
;

55 
i
 = 0; i < 
nôems
; i++) {

56 
	`My£m_waô
(
sh¨ed
.
√m±y
);

57 
	`My£m_waô
(
sh¨ed
.
muãx
);

58 
sh¨ed
.
buff
[
i
 % 
NBUFF
] = i;

59 
	`My£m_po°
(
sh¨ed
.
muãx
);

60 
	`My£m_po°
(
sh¨ed
.
n°‹ed
);

62 (
NULL
);

63 
	}
}

66 
	$c⁄sume
(*
¨g
)

68 
i
;

70 
i
 = 0; i < 
nôems
; i++) {

71 
	`My£m_waô
(
sh¨ed
.
n°‹ed
);

72 
	`My£m_waô
(
sh¨ed
.
muãx
);

73 i‡(
sh¨ed
.
buff
[
i
 % 
NBUFF
] != i)

74 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[ò% 
NBUFF
]);

75 
	`My£m_po°
(
sh¨ed
.
muãx
);

76 
	`My£m_po°
(
sh¨ed
.
√m±y
);

78 (
NULL
);

79 
	}
}

	@my_pxsem_mmap/sem_close.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_˛o£
(
my£m_t
 *
£m
)

8 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

9 
î∫o
 = 
EINVAL
;

14 i‡(
	`munm≠
(
£m
, (
my£m_t
)) == -1)

18 
	}
}

22 
	$My£m_˛o£
(
my£m_t
 *
£m
)

24 i‡(
	`my£m_˛o£
(
£m
) == -1)

25 
	`îr_sys
("mysem_closeÉrror");

26 
	}
}

	@my_pxsem_mmap/sem_getvalue.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_gëvÆue
(
my£m_t
 *
£m
, *
pvÆue
)

8 
n
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
£m
->
£m_muãx
)) != 0) {

16 
î∫o
 = 
n
;

19 *
pvÆue
 = 
£m
->
£m_cou¡
;

20 
	`±hªad_muãx_u∆ock
(&
£m
->
£m_muãx
);

22 
	}
}

26 
	$My£m_gëvÆue
(
my£m_t
 *
£m
, *
pvÆue
)

28 i‡(
	`my£m_gëvÆue
(
£m
, 
pvÆue
) == -1)

29 
	`îr_sys
("mysem_getvalueÉrror");

30 
	}
}

	@my_pxsem_mmap/sem_open.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

5 
	~<°d¨g.h
>

6 
	#MAX_TRIES
 10

	)

8 
my£m_t
 *

9 
	$my£m_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

11 
fd
, 
i
, 
¸óãd
, 
ßve_î∫o
;

12 
mode_t
 
mode
;

13 
va_li°
 
≠
;

14 
my£m_t
 *
£m
, 
£möô
;

15 
°©
 
°©buff
;

16 
vÆue
;

17 
±hªad_muãx©å_t
 
m©å
;

18 
±hªad_c⁄d©å_t
 
ˇâr
;

20 
¸óãd
 = 0;

21 
£m
 = 
MAP_FAILED
;

22 
agaö
:

23 i‡(
oÊag
 & 
O_CREAT
) {

24 
	`va_°¨t
(
≠
, 
oÊag
);

25 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
Ë& ~
S_IXUSR
;

26 
vÆue
 = 
	`va_¨g
(
≠
, );

27 
	`va_íd
(
≠
);

30 
fd
 = 
	`›í
(
∑th«me
, 
oÊag
 | 
O_EXCL
 | 
O_RDWR
, 
mode
 | 
S_IXUSR
);

31 i‡(
fd
 < 0) {

32 i‡(
î∫o
 =
EEXIST
 && (
oÊag
 & 
O_EXCL
) == 0)

33 
exi°s
;

35 (
SEM_FAILED
);

37 
¸óãd
 = 1;

40 
	`bzîo
(&
£möô
, (seminit));

41 i‡(
	`wrôe
(
fd
, &
£möô
, (seminit)) != (seminit))

42 
îr
;

45 
£m
 = 
	`mm≠
(
NULL
, (
my£m_t
), 
PROT_READ
 | 
PROT_WRITE
,

46 
MAP_SHARED
, 
fd
, 0);

47 i‡(
£m
 =
MAP_FAILED
)

48 
îr
;

51 i‡–(
i
 = 
	`±hªad_muãx©å_öô
(&
m©å
)) != 0)

52 
±hªadîr
;

53 
	`±hªad_muãx©å_£çsh¨ed
(&
m©å
, 
PTHREAD_PROCESS_SHARED
);

54 
i
 = 
	`±hªad_muãx_öô
(&
£m
->
£m_muãx
, &
m©å
);

55 
	`±hªad_muãx©å_de°roy
(&
m©å
);

56 i‡(
i
 != 0)

57 
±hªadîr
;

59 i‡–(
i
 = 
	`±hªad_c⁄d©å_öô
(&
ˇâr
)) != 0)

60 
±hªadîr
;

61 
	`±hªad_c⁄d©å_£çsh¨ed
(&
ˇâr
, 
PTHREAD_PROCESS_SHARED
);

62 
i
 = 
	`±hªad_c⁄d_öô
(&
£m
->
£m_c⁄d
, &
ˇâr
);

63 
	`±hªad_c⁄d©å_de°roy
(&
ˇâr
);

64 i‡(
i
 != 0)

65 
±hªadîr
;

67 i‡–(
£m
->
£m_cou¡
 = 
vÆue
Ë> 
	`sysc⁄f
(
_SC_SEM_VALUE_MAX
)) {

68 
î∫o
 = 
EINVAL
;

69 
îr
;

72 i‡(
	`fchmod
(
fd
, 
mode
) == -1)

73 
îr
;

74 
	`˛o£
(
fd
);

75 
£m
->
£m_magic
 = 
SEM_MAGIC
;

76 (
£m
);

80 
exi°s
:

81 i‡–(
fd
 = 
	`›í
(
∑th«me
, 
O_RDWR
)) < 0) {

82 i‡(
î∫o
 =
ENOENT
 && (
oÊag
 & 
O_CREAT
))

83 
agaö
;

84 
îr
;

87 
£m
 = 
	`mm≠
(
NULL
, (
my£m_t
), 
PROT_READ
 | 
PROT_WRITE
,

88 
MAP_SHARED
, 
fd
, 0);

89 i‡(
£m
 =
MAP_FAILED
)

90 
îr
;

93 
i
 = 0; i < 
MAX_TRIES
; i++) {

94 i‡(
	`°©
(
∑th«me
, &
°©buff
) == -1) {

95 i‡(
î∫o
 =
ENOENT
 && (
oÊag
 & 
O_CREAT
)) {

96 
	`˛o£
(
fd
);

97 
agaö
;

99 
îr
;

101 i‡((
°©buff
.
°_mode
 & 
S_IXUSR
) == 0) {

102 
	`˛o£
(
fd
);

103 
£m
->
£m_magic
 = 
SEM_MAGIC
;

104 (
£m
);

106 
	`¶ìp
(1);

108 
î∫o
 = 
ETIMEDOUT
;

109 
îr
;

111 
±hªadîr
:

112 
î∫o
 = 
i
;

113 
îr
:

115 
ßve_î∫o
 = 
î∫o
;

116 i‡(
¸óãd
)

117 
	`u∆ök
(
∑th«me
);

118 i‡(
£m
 !
MAP_FAILED
)

119 
	`munm≠
(
£m
, (
my£m_t
));

120 
	`˛o£
(
fd
);

121 
î∫o
 = 
ßve_î∫o
;

122 (
SEM_FAILED
);

123 
	}
}

126 
my£m_t
 *

127 
	$My£m_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

129 
va_li°
 
≠
;

130 
mode_t
 
mode
;

131 
my£m_t
 *
£m
;

132 
vÆue
;

134 i‡(
oÊag
 & 
O_CREAT
) {

135 
	`va_°¨t
(
≠
, 
oÊag
);

136 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

137 
vÆue
 = 
	`va_¨g
(
≠
, );

138 
	`va_íd
(
≠
);

139 i‡–(
£m
 = 
	`my£m_›í
(
∑th«me
, 
oÊag
, 
mode
, 
vÆue
)Ë=
SEM_FAILED
)

140 
	`îr_sys
("my£m_›íÉº‹ f‹ %s", 
∑th«me
);

142 i‡–(
£m
 = 
	`my£m_›í
(
∑th«me
, 
oÊag
)Ë=
SEM_FAILED
)

143 
	`îr_sys
("my£m_›íÉº‹ f‹ %s", 
∑th«me
);

146 (
£m
);

147 
	}
}

	@my_pxsem_mmap/sem_post.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_po°
(
my£m_t
 *
£m
)

8 
n
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
£m
->
£m_muãx
)) != 0) {

16 
î∫o
 = 
n
;

19 i‡(
£m
->
£m_cou¡
 == 0)

20 
	`±hªad_c⁄d_sig«l
(&
£m
->
£m_c⁄d
);

21 
£m
->
£m_cou¡
++;

22 
	`±hªad_muãx_u∆ock
(&
£m
->
£m_muãx
);

24 
	}
}

28 
	$My£m_po°
(
my£m_t
 *
£m
)

30 i‡(
	`my£m_po°
(
£m
) == -1)

31 
	`îr_sys
("mysem_postÉrror");

32 
	}
}

	@my_pxsem_mmap/sem_trywait.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_åywaô
(
my£m_t
 *
£m
)

8 
n
, 
rc
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
£m
->
£m_muãx
)) != 0) {

16 
î∫o
 = 
n
;

19 i‡(
£m
->
£m_cou¡
 > 0) {

20 
£m
->
£m_cou¡
--;

21 
rc
 = 0;

23 
rc
 = -1;

24 
î∫o
 = 
EAGAIN
;

26 
	`±hªad_muãx_u∆ock
(&
£m
->
£m_muãx
);

27 (
rc
);

28 
	}
}

32 
	$My£m_åywaô
(
my£m_t
 *
£m
)

34 
rc
;

36 i‡–(
rc
 = 
	`my£m_åywaô
(
£m
)Ë=-1 && 
î∫o
 !
EAGAIN
)

37 
	`îr_sys
("mysem_trywaitÉrror");

38 (
rc
);

39 
	}
}

	@my_pxsem_mmap/sem_unlink.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_u∆ök
(c⁄° *
∑th«me
)

8 i‡(
	`u∆ök
(
∑th«me
) == -1)

11 
	}
}

15 
	$My£m_u∆ök
(c⁄° *
∑th«me
)

17 i‡(
	`my£m_u∆ök
(
∑th«me
) == -1)

18 
	`îr_sys
("mysem_unlinkÉrror");

19 
	}
}

	@my_pxsem_mmap/sem_wait.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_waô
(
my£m_t
 *
£m
)

8 
n
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡–(
n
 = 
	`±hªad_muãx_lock
(&
£m
->
£m_muãx
)) != 0) {

16 
î∫o
 = 
n
;

19 
£m
->
£m_cou¡
 == 0)

20 
	`±hªad_c⁄d_waô
(&
£m
->
£m_c⁄d
, &£m->
£m_muãx
);

21 
£m
->
£m_cou¡
--;

22 
	`±hªad_muãx_u∆ock
(&
£m
->
£m_muãx
);

24 
	}
}

28 
	$My£m_waô
(
my£m_t
 *
£m
)

30 i‡(
	`my£m_waô
(
£m
) == -1)

31 
	`îr_sys
("mysem_waitÉrror");

32 
	}
}

	@my_pxsem_mmap/semaphore.h

4 
±hªad_muãx_t
 
	m£m_muãx
;

5 
±hªad_c⁄d_t
 
	m£m_c⁄d
;

6 
	m£m_cou¡
;

7 
	m£m_magic
;

8 } 
	tmy£m_t
;

10 
	#SEM_MAGIC
 0x67458923

	)

12 #ifdef 
SEM_FAILED


13 #unde‡
SEM_FAILED


14 
	#SEM_FAILED
 ((
my£m_t
 *)(-1)Ë

	)

19 
my£m_˛o£
(
my£m_t
 *);

20 
my£m_gëvÆue
(
my£m_t
 *, *);

21 
my£m_t
 *
my£m_›í
(const *, , ... );

22 
my£m_po°
(
my£m_t
 *);

23 
my£m_åywaô
(
my£m_t
 *);

24 
my£m_u∆ök
(const *);

25 
my£m_waô
(
my£m_t
 *);

28 
My£m_˛o£
(
my£m_t
 *);

29 
My£m_gëvÆue
(
my£m_t
 *, *);

30 
my£m_t
 *
My£m_›í
(const *, , ... );

31 
My£m_po°
(
my£m_t
 *);

32 
My£m_åywaô
(
my£m_t
 *);

33 
My£m_u∆ök
(const *);

34 
My£m_waô
(
my£m_t
 *);

	@my_pxsem_mmap/testeintr.c

1 
	~"u≈ùc.h
"

2 
	~"£m≠h‹e.h
"

4 
	#NAME
 "ã°eöå"

	)

6 
sig_Ærm
();

9 
	$maö
(
¨gc
, **
¨gv
)

11 
my£m_t
 *
£m1
;

14 
	`my£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

15 
£m1
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
NAME
), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
,

16 
FILE_MODE
, 0);

18 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

19 
	`Æ¨m
(2);

20 i‡(
	`my£m_waô
(
£m1
) == 0)

21 
	`¥ötf
("mysem_waitÑeturned 0?\n");

23 
	`îr_ªt
("mysem_waitÉrror");

24 
	`My£m_˛o£
(
£m1
);

26 
	`exô
(0);

27 
	}
}

30 
	$sig_Ærm
(
signo
)

32 
	`¥ötf
("SIGALRM caught\n");

34 
	}
}

	@my_pxsem_mmap/testsem.c

5 
	~"u≈ùc.h
"

6 
	~"£m≠h‹e.h
"

8 
	#SEM1
 "£m1"

	)

9 
	#SEM2
 "£m2"

	)

10 
	#SEM3
 "£m3"

	)

11 
	#SEM4
 "£m4"

	)

12 
	#SEM5
 "£m5"

	)

13 
	#MAX_NTHREADS
 1000

	)

14 
	#MAX_NSEMS
 1000

	)

16 
my£m_t
 *
	g£m
[
MAX_NSEMS
];

17 
	gn£ms
, 
	g¡hªads
, 
	gnwaôs
, 
	göôvÆ
;

20 
	$maö
(
¨gc
, **
¨gv
)

22 
i
, 
vÆ
;

23 *
	`doô
(*);

24 
«me
[255];

25 
±hªad_t
 
tid
[
MAX_NTHREADS
];

27 i‡(
¨gc
 != 4)

28 
	`îr_quô
("usage:Åestmysem <#semaphores> <#threads> <initvalue>");

29 
n£ms
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAX_NTHREADS
);

30 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAX_NTHREADS
);

31 i‡–(
öôvÆ
 = 
	`©oi
(
¨gv
[3])) == 0)

32 
öôvÆ
 = 
	`Sysc⁄f
(
_SC_SEM_VALUE_MAX
);

33 
nwaôs
 = 
öôvÆ
 / 
¡hªads
;

34 
	`¥ötf
("initval = %d, #waits = %d, final values should be %d\n",

35 
öôvÆ
, 
nwaôs
, inôvÆ - (nwaô†* 
¡hªads
));

38 
i
 = 0; i < 
n£ms
; i++) {

39 
	`¢¥ötf
(
«me
, “ame), "£m%d", 
i
);

40 
	`my£m_u∆ök
(
	`Px_ùc_«me
(
«me
));

43 
	`Së_c⁄cuºícy
(
¡hªads
);

44 
i
 = 0; i < 
¡hªads
; i++)

45 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
doô
, NULL);

47 
i
 = 0; i < 
¡hªads
; i++)

48 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

50 
i
 = 0; i < 
n£ms
; i++) {

51 
	`My£m_gëvÆue
(
£m
[
i
], &
vÆ
);

52 
	`¥ötf
("SEM%d = %d\n", 
i
, 
vÆ
);

55 
i
 = 0; i < 
n£ms
; i++) {

56 
	`¢¥ötf
(
«me
, “ame), "£m%d", 
i
);

57 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
«me
));

59 
	`exô
(0);

60 
	}
}

64 
	$doô
(*
¨g
)

66 
i
, 
j
;

67 
«me
[255];

74 
i
 = 0; i < 
n£ms
; i++) {

75 
	`¢¥ötf
(
«me
, “ame), "£m%d", 
i
);

76 
£m
[
i
] = 
	`My£m_›í
(
	`Px_ùc_«me
(
«me
), 
O_CREAT
, 
FILE_MODE
, 
öôvÆ
);

80 
i
 = 0; i < 
nwaôs
; i++) {

81 
j
 = 0; j < 
n£ms
; j++)

82 
	`My£m_waô
(
£m
[
j
]);

84 (
NULL
);

85 
	}
}

	@my_pxsem_mmap/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@my_pxsem_svsem/prodcons1.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

5 
	#NBUFF
 10

	)

6 
	#SEM_MUTEX
 "muãx"

	)

7 
	#SEM_NEMPTY
 "√m±y"

	)

8 
	#SEM_NSTORED
 "n°‹ed"

	)

10 
	gnôems
;

12 
	mbuff
[
NBUFF
];

13 
my£m_t
 *
	mmuãx
, *
	m√m±y
, *
	mn°‹ed
;

14 } 
	gsh¨ed
;

16 *
¥odu˚
(*), *
c⁄sume
(*);

19 
	$maö
(
¨gc
, **
¨gv
)

21 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

23 i‡(
¨gc
 != 2)

24 
	`îr_quô
("usage:Örodcons1 <#items>");

25 
nôems
 = 
	`©oi
(
¨gv
[1]);

28 
sh¨ed
.
muãx
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_MUTEX
), 
O_CREAT
 | 
O_EXCL
,

29 
FILE_MODE
, 1);

30 
sh¨ed
.
√m±y
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_NEMPTY
), 
O_CREAT
 | 
O_EXCL
,

31 
FILE_MODE
, 
NBUFF
);

32 
sh¨ed
.
n°‹ed
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
SEM_NSTORED
), 
O_CREAT
 | 
O_EXCL
,

33 
FILE_MODE
, 0);

35 
	`Së_c⁄cuºícy
(2);

36 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

37 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

39 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

40 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

42 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_MUTEX
));

43 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_NEMPTY
));

44 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
SEM_NSTORED
));

45 
	`exô
(0);

46 
	}
}

51 
	$¥odu˚
(*
¨g
)

53 
i
;

55 
i
 = 0; i < 
nôems
; i++) {

56 
	`My£m_waô
(
sh¨ed
.
√m±y
);

57 
	`My£m_waô
(
sh¨ed
.
muãx
);

58 
sh¨ed
.
buff
[
i
 % 
NBUFF
] = i;

59 
	`My£m_po°
(
sh¨ed
.
muãx
);

60 
	`My£m_po°
(
sh¨ed
.
n°‹ed
);

62 (
NULL
);

63 
	}
}

66 
	$c⁄sume
(*
¨g
)

68 
i
;

70 
i
 = 0; i < 
nôems
; i++) {

71 
	`My£m_waô
(
sh¨ed
.
n°‹ed
);

72 
	`My£m_waô
(
sh¨ed
.
muãx
);

73 i‡(
sh¨ed
.
buff
[
i
 % 
NBUFF
] != i)

74 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[ò% 
NBUFF
]);

75 
	`My£m_po°
(
sh¨ed
.
muãx
);

76 
	`My£m_po°
(
sh¨ed
.
√m±y
);

78 (
NULL
);

79 
	}
}

	@my_pxsem_svsem/sem_close.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_˛o£
(
my£m_t
 *
£m
)

8 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

9 
î∫o
 = 
EINVAL
;

12 
£m
->
£m_magic
 = 0;

14 
	`‰ì
(
£m
);

16 
	}
}

20 
	$My£m_˛o£
(
my£m_t
 *
£m
)

22 i‡(
	`my£m_˛o£
(
£m
) == -1)

23 
	`îr_sys
("mysem_closeÉrror");

24 
	}
}

	@my_pxsem_svsem/sem_getvalue.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_gëvÆue
(
my£m_t
 *
£m
, *
pvÆue
)

8 
vÆ
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 i‡–(
vÆ
 = 
	`£m˘l
(
£m
->
£m_£mid
, 0, 
GETVAL
)) < 0)

17 *
pvÆue
 = 
vÆ
;

19 
	}
}

23 
	$My£m_gëvÆue
(
my£m_t
 *
£m
, *
pvÆue
)

25 i‡(
	`my£m_gëvÆue
(
£m
, 
pvÆue
) == -1)

26 
	`îr_sys
("mysem_getvalueÉrror");

27 
	}
}

	@my_pxsem_svsem/sem_open.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

5 
	~<°d¨g.h
>

6 
	#MAX_TRIES
 10

	)

8 
my£m_t
 *

9 
	$my£m_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

11 
i
, 
fd
, 
£mÊag
, 
£mid
, 
ßve_î∫o
;

12 
key_t
 
key
;

13 
mode_t
 
mode
;

14 
va_li°
 
≠
;

15 
my£m_t
 *
£m
;

16 
£mun
 
¨g
;

17 
vÆue
;

18 
£mid_ds
 
£möfo
;

19 
£mbuf
 
öô›
;

22 
£mÊag
 = 
SVSEM_MODE
;

23 
£mid
 = -1;

25 i‡(
oÊag
 & 
O_CREAT
) {

26 
	`va_°¨t
(
≠
, 
oÊag
);

27 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

28 
vÆue
 = 
	`va_¨g
(
≠
, );

29 
	`va_íd
(
≠
);

32 i‡–(
fd
 = 
	`›í
(
∑th«me
, 
oÊag
, 
mode
)) == -1)

33 (
SEM_FAILED
);

34 
	`˛o£
(
fd
);

35 i‡–(
key
 = 
	`·ok
(
∑th«me
, 0)Ë=(
key_t
) -1)

36 (
SEM_FAILED
);

38 
£mÊag
 = 
IPC_CREAT
 | (
mode
 & 0777);

39 i‡(
oÊag
 & 
O_EXCL
)

40 
£mÊag
 |
IPC_EXCL
;

43 i‡–(
£mid
 = 
	`£mgë
(
key
, 1, 
£mÊag
 | 
IPC_EXCL
)) >= 0) {

45 
¨g
.
vÆ
 = 0;

46 i‡(
	`£m˘l
(
£mid
, 0, 
SETVAL
, 
¨g
) == -1)

47 
îr
;

49 i‡(
vÆue
 > 
SEMVMX
) {

50 
î∫o
 = 
EINVAL
;

51 
îr
;

53 
öô›
.
£m_num
 = 0;

54 
öô›
.
£m_›
 = 
vÆue
;

55 
öô›
.
£m_Êg
 = 0;

56 i‡(
	`£m›
(
£mid
, &
öô›
, 1) == -1)

57 
îr
;

58 
föish
;

60 } i‡(
î∫o
 !
EEXIST
 || (
£mÊag
 & 
IPC_EXCL
) != 0)

61 
îr
;

71 i‡–(
key
 = 
	`·ok
(
∑th«me
, 0)Ë=(
key_t
) -1)

72 
îr
;

73 i‡–(
£mid
 = 
	`£mgë
(
key
, 0, 
£mÊag
)) == -1)

74 
îr
;

76 
¨g
.
buf
 = &
£möfo
;

77 
i
 = 0; i < 
MAX_TRIES
; i++) {

78 i‡(
	`£m˘l
(
£mid
, 0, 
IPC_STAT
, 
¨g
) == -1)

79 
îr
;

80 i‡(
¨g
.
buf
->
£m_Ÿime
 != 0)

81 
föish
;

82 
	`¶ìp
(1);

84 
î∫o
 = 
ETIMEDOUT
;

85 
îr
:

86 
ßve_î∫o
 = 
î∫o
;

87 i‡(
£mid
 != -1)

88 
	`£m˘l
(
£mid
, 0, 
IPC_RMID
);

89 
î∫o
 = 
ßve_î∫o
;

90 (
SEM_FAILED
);

92 
föish
:

94 i‡–(
£m
 = 
	`mÆloc
((
my£m_t
))Ë=
NULL
)

95 
îr
;

97 
£m
->
£m_£mid
 = 
£mid
;

98 
£m
->
£m_magic
 = 
SEM_MAGIC
;

99 (
£m
);

100 
	}
}

103 
my£m_t
 *

104 
	$My£m_›í
(c⁄° *
∑th«me
, 
oÊag
, ... )

106 
va_li°
 
≠
;

107 
mode_t
 
mode
;

108 
my£m_t
 *
£m
;

109 
vÆue
;

111 i‡(
oÊag
 & 
O_CREAT
) {

112 
	`va_°¨t
(
≠
, 
oÊag
);

113 
mode
 = 
	`va_¨g
(
≠
, 
va_mode_t
);

114 
vÆue
 = 
	`va_¨g
(
≠
, );

115 i‡–(
£m
 = 
	`my£m_›í
(
∑th«me
, 
oÊag
, 
mode
, 
vÆue
)Ë=
SEM_FAILED
)

116 
	`îr_sys
("my£m_›íÉº‹ f‹ %s", 
∑th«me
);

117 
	`va_íd
(
≠
);

119 i‡–(
£m
 = 
	`my£m_›í
(
∑th«me
, 
oÊag
)Ë=
SEM_FAILED
)

120 
	`îr_sys
("my£m_›íÉº‹ f‹ %s", 
∑th«me
);

123 (
£m
);

124 
	}
}

	@my_pxsem_svsem/sem_post.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_po°
(
my£m_t
 *
£m
)

8 
£mbuf
 
›
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 
›
.
£m_num
 = 0;

16 
›
.
£m_›
 = 1;

17 
›
.
£m_Êg
 = 0;

18 i‡(
	`£m›
(
£m
->
£m_£mid
, &
›
, 1) < 0)

21 
	}
}

25 
	$My£m_po°
(
my£m_t
 *
£m
)

27 i‡(
	`my£m_po°
(
£m
) == -1)

28 
	`îr_sys
("mysem_postÉrror");

29 
	}
}

	@my_pxsem_svsem/sem_trywait.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_åywaô
(
my£m_t
 *
£m
)

8 
£mbuf
 
›
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 
›
.
£m_num
 = 0;

16 
›
.
£m_›
 = -1;

17 
›
.
£m_Êg
 = 
IPC_NOWAIT
;

18 i‡(
	`£m›
(
£m
->
£m_£mid
, &
›
, 1) < 0)

21 
	}
}

25 
	$My£m_åywaô
(
my£m_t
 *
£m
)

27 
rc
;

29 i‡–(
rc
 = 
	`my£m_åywaô
(
£m
)Ë=-1 && 
î∫o
 !
EAGAIN
)

30 
	`îr_sys
("mysem_trywaitÉrror");

31 (
rc
);

32 
	}
}

	@my_pxsem_svsem/sem_unlink.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_u∆ök
(c⁄° *
∑th«me
)

8 
£mid
;

9 
key_t
 
key
;

11 i‡–(
key
 = 
	`·ok
(
∑th«me
, 0)Ë=(
key_t
) -1)

13 i‡(
	`u∆ök
(
∑th«me
) == -1)

15 i‡–(
£mid
 = 
	`£mgë
(
key
, 1, 
SVSEM_MODE
)) == -1)

17 i‡(
	`£m˘l
(
£mid
, 0, 
IPC_RMID
) == -1)

20 
	}
}

24 
	$My£m_u∆ök
(c⁄° *
∑th«me
)

26 i‡(
	`my£m_u∆ök
(
∑th«me
) == -1)

27 
	`îr_sys
("mysem_unlinkÉrror");

28 
	}
}

	@my_pxsem_svsem/sem_wait.c

2 
	~"u≈ùc.h
"

3 
	~"£m≠h‹e.h
"

6 
	$my£m_waô
(
my£m_t
 *
£m
)

8 
£mbuf
 
›
;

10 i‡(
£m
->
£m_magic
 !
SEM_MAGIC
) {

11 
î∫o
 = 
EINVAL
;

15 
›
.
£m_num
 = 0;

16 
›
.
£m_›
 = -1;

17 
›
.
£m_Êg
 = 0;

18 i‡(
	`£m›
(
£m
->
£m_£mid
, &
›
, 1) < 0)

21 
	}
}

25 
	$My£m_waô
(
my£m_t
 *
£m
)

27 i‡(
	`my£m_waô
(
£m
) == -1)

28 
	`îr_sys
("mysem_waitÉrror");

29 
	}
}

	@my_pxsem_svsem/semaphore.h

4 
	m£m_£mid
;

5 
	m£m_magic
;

6 } 
	tmy£m_t
;

8 
	#SEM_MAGIC
 0x45678923

	)

10 #ifdef 
SEM_FAILED


11 #unde‡
SEM_FAILED


12 
	#SEM_FAILED
 ((
my£m_t
 *)(-1)Ë

	)

15 #i‚def 
SEMVMX


16 
	#SEMVMX
 32767

	)

21 
my£m_˛o£
(
my£m_t
 *);

22 
my£m_gëvÆue
(
my£m_t
 *, *);

23 
my£m_t
 *
my£m_›í
(const *, , ... );

24 
my£m_po°
(
my£m_t
 *);

25 
my£m_åywaô
(
my£m_t
 *);

26 
my£m_u∆ök
(const *);

27 
my£m_waô
(
my£m_t
 *);

30 
My£m_˛o£
(
my£m_t
 *);

31 
My£m_gëvÆue
(
my£m_t
 *, *);

32 
my£m_t
 *
My£m_›í
(const *, , ... );

33 
My£m_po°
(
my£m_t
 *);

34 
My£m_åywaô
(
my£m_t
 *);

35 
My£m_u∆ök
(const *);

36 
My£m_waô
(
my£m_t
 *);

	@my_pxsem_svsem/testeintr.c

1 
	~"u≈ùc.h
"

2 
	~"£m≠h‹e.h
"

4 
	#NAME
 "ã°eöå"

	)

6 
sig_Ærm
();

9 
	$maö
(
¨gc
, **
¨gv
)

11 
my£m_t
 *
£m1
;

14 
	`my£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

15 
£m1
 = 
	`My£m_›í
(
	`Px_ùc_«me
(
NAME
), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
,

16 
FILE_MODE
, 0);

18 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

19 
	`Æ¨m
(2);

20 i‡(
	`my£m_waô
(
£m1
) == 0)

21 
	`¥ötf
("mysem_waitÑeturned 0?\n");

23 
	`îr_ªt
("mysem_waitÉrror");

24 
	`My£m_˛o£
(
£m1
);

26 
	`exô
(0);

27 
	}
}

30 
	$sig_Ærm
(
signo
)

32 
	`¥ötf
("SIGALRM caught\n");

34 
	}
}

	@my_pxsem_svsem/testsem.c

5 
	~"u≈ùc.h
"

6 
	~"£m≠h‹e.h
"

8 
	#SEM1
 "£m1"

	)

9 
	#SEM2
 "£m2"

	)

10 
	#SEM3
 "£m3"

	)

11 
	#SEM4
 "£m4"

	)

12 
	#SEM5
 "£m5"

	)

13 
	#MAX_NTHREADS
 1000

	)

14 
	#MAX_NSEMS
 1000

	)

16 
my£m_t
 *
	g£m
[
MAX_NSEMS
];

17 
	gn£ms
, 
	g¡hªads
, 
	gnwaôs
, 
	göôvÆ
;

20 
	$maö
(
¨gc
, **
¨gv
)

22 
i
, 
vÆ
;

23 *
	`doô
(*);

24 
«me
[255];

25 
±hªad_t
 
tid
[
MAX_NTHREADS
];

27 i‡(
¨gc
 != 4)

28 
	`îr_quô
("usage:Åestmysem <#semaphores> <#threads> <initvalue>");

29 
n£ms
 = 
	`mö
(
	`©oi
(
¨gv
[1]), 
MAX_NTHREADS
);

30 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAX_NTHREADS
);

31 i‡–(
öôvÆ
 = 
	`©oi
(
¨gv
[3])) == 0)

32 
öôvÆ
 = 
	`Sysc⁄f
(
_SC_SEM_VALUE_MAX
);

33 
nwaôs
 = 
öôvÆ
 / 
¡hªads
;

34 
	`¥ötf
("initval = %d, #waits = %d, final values should be %d\n",

35 
öôvÆ
, 
nwaôs
, inôvÆ - (nwaô†* 
¡hªads
));

38 
i
 = 0; i < 
n£ms
; i++) {

39 
	`¢¥ötf
(
«me
, “ame), "£m%d", 
i
);

40 
	`my£m_u∆ök
(
	`Px_ùc_«me
(
«me
));

43 
	`Së_c⁄cuºícy
(
¡hªads
);

44 
i
 = 0; i < 
¡hªads
; i++)

45 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
doô
, NULL);

47 
i
 = 0; i < 
¡hªads
; i++)

48 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

50 
i
 = 0; i < 
n£ms
; i++) {

51 
	`My£m_gëvÆue
(
£m
[
i
], &
vÆ
);

52 
	`¥ötf
("SEM%d = %d\n", 
i
, 
vÆ
);

55 
i
 = 0; i < 
n£ms
; i++) {

56 
	`¢¥ötf
(
«me
, “ame), "£m%d", 
i
);

57 
	`My£m_u∆ök
(
	`Px_ùc_«me
(
«me
));

59 
	`exô
(0);

60 
	}
}

64 
	$doô
(*
¨g
)

66 
i
, 
j
;

67 
«me
[255];

74 
i
 = 0; i < 
n£ms
; i++) {

75 
	`¢¥ötf
(
«me
, “ame), "£m%d", 
i
);

76 
£m
[
i
] = 
	`My£m_›í
(
	`Px_ùc_«me
(
«me
), 
O_CREAT
, 
FILE_MODE
, 
öôvÆ
);

80 
i
 = 0; i < 
nwaôs
; i++) {

81 
j
 = 0; j < 
n£ms
; j++)

82 
	`My£m_waô
(
£m
[
j
]);

84 (
NULL
);

85 
	}
}

	@my_pxsem_svsem/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@my_rwlock/incr_rwlock1.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

5 
	#MAXNTHREADS
 100

	)

7 
	g∆o›
;

10 
±hªad_rwlock_t
 
	mrwlock
;

11 
	mcou¡î
;

12 } 
	gsh¨ed
 = { 
PTHREAD_RWLOCK_INITIALIZER
 };

14 *
ö¸
(*);

17 
	$maö
(
¨gc
, **
¨gv
)

19 
i
, 
¡hªads
;

20 
±hªad_t
 
tid
[
MAXNTHREADS
];

22 i‡(
¨gc
 != 3)

23 
	`îr_quô
("usage: incr_rwlock1 <#loops> <#threads>");

24 
∆o›
 = 
	`©oi
(
¨gv
[1]);

25 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

28 
	`Pthªad_rwlock_wæock
(&
sh¨ed
.
rwlock
);

31 
	`Së_c⁄cuºícy
(
¡hªads
);

32 
i
 = 0; i < 
¡hªads
; i++) {

33 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

36 
	`Sèπ_time
();

37 
	`Pthªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

40 
i
 = 0; i < 
¡hªads
; i++) {

41 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

43 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

44 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

45 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

47 
	`exô
(0);

48 
	}
}

53 
	$ö¸
(*
¨g
)

55 
i
;

57 
i
 = 0; i < 
∆o›
; i++) {

58 
	`Pthªad_rwlock_wæock
(&
sh¨ed
.
rwlock
);

59 
sh¨ed
.
cou¡î
++;

60 
	`Pthªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

62 (
NULL
);

63 
	}
}

	@my_rwlock/pthread_rwlock.h

2 #i‚def 
__±hªad_rwlock_h


3 
	#__±hªad_rwlock_h


	)

6 
±hªad_muãx_t
 
	mrw_muãx
;

7 
±hªad_c⁄d_t
 
	mrw_c⁄dªadîs
;

8 
±hªad_c⁄d_t
 
	mrw_c⁄dwrôîs
;

9 
	mrw_magic
;

10 
	mrw_nwaôªadîs
;

11 
	mrw_nwaôwrôîs
;

12 
	mrw_ªfcou¡
;

14 } 
	t±hªad_rwlock_t
;

16 
	#RW_MAGIC
 0x19283746

	)

19 
	#PTHREAD_RWLOCK_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, \

20 
PTHREAD_COND_INITIALIZER
, PTHREAD_COND_INITIALIZER, \

21 
RW_MAGIC
, 0, 0, 0 }

	)

23 
	t±hªad_rwlock©å_t
;

26 
±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

27 
±hªad_rwlock_öô
(
±hªad_rwlock_t
 *, 
±hªad_rwlock©å_t
 *);

28 
±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

29 
±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

30 
±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

31 
±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

32 
±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

35 
Pthªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

36 
Pthªad_rwlock_öô
(
±hªad_rwlock_t
 *, 
±hªad_rwlock©å_t
 *);

37 
Pthªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

38 
Pthªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

39 
Pthªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

40 
Pthªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

41 
Pthªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

	@my_rwlock/pthread_rwlock_destroy.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rw
)

8 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

9 (
EINVAL
);

10 i‡(
rw
->
rw_ªfcou¡
 != 0 ||

11 
rw
->
rw_nwaôªadîs
 !0 ||Ñw->
rw_nwaôwrôîs
 != 0)

12 (
EBUSY
);

14 
	`±hªad_muãx_de°roy
(&
rw
->
rw_muãx
);

15 
	`±hªad_c⁄d_de°roy
(&
rw
->
rw_c⁄dªadîs
);

16 
	`±hªad_c⁄d_de°roy
(&
rw
->
rw_c⁄dwrôîs
);

17 
rw
->
rw_magic
 = 0;

20 
	}
}

24 
	$Pthªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rw
)

26 
n
;

28 i‡–(
n
 = 
	`±hªad_rwlock_de°roy
(
rw
)) == 0)

30 
î∫o
 = 
n
;

31 
	`îr_sys
("pthread_rwlock_destroyÉrror");

32 
	}
}

	@my_rwlock/pthread_rwlock_init.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_öô
(
±hªad_rwlock_t
 *
rw
, 
±hªad_rwlock©å_t
 *
©å
)

8 
ªsu…
;

10 i‡(
©å
 !
NULL
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_öô
(&
rw
->
rw_muãx
, 
NULL
)) != 0)

14 
îr1
;

15 i‡–(
ªsu…
 = 
	`±hªad_c⁄d_öô
(&
rw
->
rw_c⁄dªadîs
, 
NULL
)) != 0)

16 
îr2
;

17 i‡–(
ªsu…
 = 
	`±hªad_c⁄d_öô
(&
rw
->
rw_c⁄dwrôîs
, 
NULL
)) != 0)

18 
îr3
;

19 
rw
->
rw_nwaôªadîs
 = 0;

20 
rw
->
rw_nwaôwrôîs
 = 0;

21 
rw
->
rw_ªfcou¡
 = 0;

22 
rw
->
rw_magic
 = 
RW_MAGIC
;

26 
îr3
:

27 
	`±hªad_c⁄d_de°roy
(&
rw
->
rw_c⁄dªadîs
);

28 
îr2
:

29 
	`±hªad_muãx_de°roy
(&
rw
->
rw_muãx
);

30 
îr1
:

31 (
ªsu…
);

32 
	}
}

36 
	$Pthªad_rwlock_öô
(
±hªad_rwlock_t
 *
rw
, 
±hªad_rwlock©å_t
 *
©å
)

38 
n
;

40 i‡–(
n
 = 
	`±hªad_rwlock_öô
(
rw
, 
©å
)) == 0)

42 
î∫o
 = 
n
;

43 
	`îr_sys
("pthread_rwlock_initÉrror");

44 
	}
}

	@my_rwlock/pthread_rwlock_rdlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

17 
rw
->
rw_ªfcou¡
 < 0 ||Ñw->
rw_nwaôwrôîs
 > 0) {

18 
rw
->
rw_nwaôªadîs
++;

19 
ªsu…
 = 
	`±hªad_c⁄d_waô
(&
rw
->
rw_c⁄dªadîs
, &rw->
rw_muãx
);

20 
rw
->
rw_nwaôªadîs
--;

21 i‡(
ªsu…
 != 0)

24 i‡(
ªsu…
 == 0)

25 
rw
->
rw_ªfcou¡
++;

27 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

28  (
ªsu…
);

29 
	}
}

33 
	$Pthªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rw
)

35 
n
;

37 i‡–(
n
 = 
	`±hªad_rwlock_rdlock
(
rw
)) == 0)

39 
î∫o
 = 
n
;

40 
	`îr_sys
("pthread_rwlock_rdlockÉrror");

41 
	}
}

	@my_rwlock/pthread_rwlock_tryrdlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 i‡(
rw
->
rw_ªfcou¡
 < 0 ||Ñw->
rw_nwaôwrôîs
 > 0)

17 
ªsu…
 = 
EBUSY
;

19 
rw
->
rw_ªfcou¡
++;

21 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

22 (
ªsu…
);

23 
	}
}

27 
	$Pthªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rw
)

29 
n
;

31 i‡–(
n
 = 
	`±hªad_rwlock_åyrdlock
(
rw
)) != 0) {

32 
î∫o
 = 
n
;

33 
	`îr_sys
("pthread_rwlock_tryrdlockÉrror");

35 (
n
);

36 
	}
}

	@my_rwlock/pthread_rwlock_trywrlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 i‡(
rw
->
rw_ªfcou¡
 != 0)

17 
ªsu…
 = 
EBUSY
;

19 
rw
->
rw_ªfcou¡
 = -1;

21 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

22 (
ªsu…
);

23 
	}
}

27 
	$Pthªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rw
)

29 
n
;

31 i‡–(
n
 = 
	`±hªad_rwlock_åywæock
(
rw
)) != 0) {

32 
î∫o
 = 
n
;

33 
	`îr_sys
("pthread_rwlock_trywrlockÉrror");

35 (
n
);

36 
	}
}

	@my_rwlock/pthread_rwlock_unlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 i‡(
rw
->
rw_ªfcou¡
 > 0)

17 
rw
->
rw_ªfcou¡
--;

18 i‡(
rw
->
rw_ªfcou¡
 == -1)

19 
rw
->
rw_ªfcou¡
 = 0;

21 
	`îr_dump
("rw_ªfcou¡ = %d", 
rw
->
rw_ªfcou¡
);

24 i‡(
rw
->
rw_nwaôwrôîs
 > 0) {

25 i‡(
rw
->
rw_ªfcou¡
 == 0)

26 
ªsu…
 = 
	`±hªad_c⁄d_sig«l
(&
rw
->
rw_c⁄dwrôîs
);

27 } i‡(
rw
->
rw_nwaôªadîs
 > 0)

28 
ªsu…
 = 
	`±hªad_c⁄d_brﬂdˇ°
(&
rw
->
rw_c⁄dªadîs
);

30 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

31 (
ªsu…
);

32 
	}
}

36 
	$Pthªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rw
)

38 
n
;

40 i‡–(
n
 = 
	`±hªad_rwlock_u∆ock
(
rw
)) == 0)

42 
î∫o
 = 
n
;

43 
	`îr_sys
("pthread_rwlock_unlockÉrror");

44 
	}
}

	@my_rwlock/pthread_rwlock_wrlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 
rw
->
rw_ªfcou¡
 != 0) {

17 
rw
->
rw_nwaôwrôîs
++;

18 
ªsu…
 = 
	`±hªad_c⁄d_waô
(&
rw
->
rw_c⁄dwrôîs
, &rw->
rw_muãx
);

19 
rw
->
rw_nwaôwrôîs
--;

20 i‡(
ªsu…
 != 0)

23 i‡(
ªsu…
 == 0)

24 
rw
->
rw_ªfcou¡
 = -1;

26 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

27 (
ªsu…
);

28 
	}
}

32 
	$Pthªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rw
)

34 
n
;

36 i‡–(
n
 = 
	`±hªad_rwlock_wæock
(
rw
)) == 0)

38 
î∫o
 = 
n
;

39 
	`îr_sys
("pthread_rwlock_wrlockÉrror");

40 
	}
}

	@my_rwlock/test1.c

1 
	~"u≈ùc.h
"

2 
	~"±hªad_rwlock.h
"

4 
	#MAXNTHREADS
 100

	)

6 *
ªadî
(*), *
wrôî
(*);

8 
	g∆o›
 = 1000, 
	gƒódîs
 = 6, 
	gnwrôîs
 = 4;

11 
±hªad_rwlock_t
 
	mrwlock
;

12 
±hªad_muãx_t
 
	mrcou¡lock
;

13 
	mƒódîs
;

14 
	mnwrôîs
;

15 } 
	gsh¨ed
 = { 
PTHREAD_RWLOCK_INITIALIZER
, 
PTHREAD_MUTEX_INITIALIZER
 };

18 
	$maö
(
¨gc
, **
¨gv
)

20 
c
, 
i
;

21 
±hªad_t
 
tid_ªadîs
[
MAXNTHREADS
], 
tid_wrôîs
[MAXNTHREADS];

23  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "n:r:w:")) != -1) {

24 
c
) {

26 
∆o›
 = 
	`©oi
(
›èrg
);

30 
ƒódîs
 = 
	`©oi
(
›èrg
);

34 
nwrôîs
 = 
	`©oi
(
›èrg
);

38 i‡(
›töd
 !
¨gc
)

39 
	`îr_quô
("usage:Åest1 [-n #loops ] [ -r #readers ] [ -w #writers ]");

42 
	`Së_c⁄cuºícy
(
ƒódîs
 + 
nwrôîs
);

43 
i
 = 0; i < 
ƒódîs
; i++)

44 
	`Pthªad_¸óã
(&
tid_ªadîs
[
i
], 
NULL
, 
ªadî
, NULL);

45 
i
 = 0; i < 
nwrôîs
; i++)

46 
	`Pthªad_¸óã
(&
tid_wrôîs
[
i
], 
NULL
, 
wrôî
, NULL);

49 
i
 = 0; i < 
ƒódîs
; i++)

50 
	`Pthªad_joö
(
tid_ªadîs
[
i
], 
NULL
);

51 
i
 = 0; i < 
nwrôîs
; i++)

52 
	`Pthªad_joö
(
tid_wrôîs
[
i
], 
NULL
);

54 
	`exô
(0);

55 
	}
}

58 
	$ªadî
(*
¨g
)

60 
i
;

62 
i
 = 0; i < 
∆o›
; i++) {

63 
	`±hªad_rwlock_rdlock
(&
sh¨ed
.
rwlock
);

65 
	`±hªad_muãx_lock
(&
sh¨ed
.
rcou¡lock
);

66 
sh¨ed
.
ƒódîs
++;

67 
	`±hªad_muãx_u∆ock
(&
sh¨ed
.
rcou¡lock
);

69 i‡(
sh¨ed
.
nwrôîs
 > 0)

70 
	`îr_quô
("ªadî: %d wrôî†found", 
sh¨ed
.
nwrôîs
);

72 
	`±hªad_muãx_lock
(&
sh¨ed
.
rcou¡lock
);

73 
sh¨ed
.
ƒódîs
--;

74 
	`±hªad_muãx_u∆ock
(&
sh¨ed
.
rcou¡lock
);

76 
	`±hªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

78 (
NULL
);

79 
	}
}

82 
	$wrôî
(*
¨g
)

84 
i
;

86 
i
 = 0; i < 
∆o›
; i++) {

87 
	`±hªad_rwlock_wæock
(&
sh¨ed
.
rwlock
);

88 
sh¨ed
.
nwrôîs
++;

90 i‡(
sh¨ed
.
nwrôîs
 > 1)

91 
	`îr_quô
("wrôî: %d wrôî†found", 
sh¨ed
.
nwrôîs
);

92 i‡(
sh¨ed
.
ƒódîs
 > 0)

93 
	`îr_quô
("wrôî: %dÑódî†found", 
sh¨ed
.
ƒódîs
);

95 
sh¨ed
.
nwrôîs
--;

96 
	`±hªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

98 (
NULL
);

99 
	}
}

	@my_rwlock/testcancel.c

1 
	~"u≈ùc.h
"

2 
	~"±hªad_rwlock.h
"

4 
±hªad_rwlock_t
 
	grwlock
 = 
PTHREAD_RWLOCK_INITIALIZER
;

6 *
thªad1
(*), *
thªad2
(*);

7 
±hªad_t
 
	gtid1
, 
	gtid2
;

10 
	$maö
(
¨gc
, **
¨gv
)

12 *
°©us
;

13 
	`Pthªad_rwlock_öô
(&
rwlock
, 
NULL
);

15 
	`Së_c⁄cuºícy
(2);

16 
	`Pthªad_¸óã
(&
tid1
, 
NULL
, 
thªad1
, NULL);

17 
	`¶ìp
(1);

18 
	`Pthªad_¸óã
(&
tid2
, 
NULL
, 
thªad2
, NULL);

20 
	`Pthªad_joö
(
tid2
, &
°©us
);

21 i‡(
°©us
 !
PTHREAD_CANCELED
)

22 
	`¥ötf
("thªad2 sètu†%p\n", 
°©us
);

23 
	`Pthªad_joö
(
tid1
, &
°©us
);

24 i‡(
°©us
 !
NULL
)

25 
	`¥ötf
("thªad1 sètu†%p\n", 
°©us
);

27 
	`¥ötf
("rw_refcount = %d,Ñw_nwaitreaders = %d,Ñw_nwaitwriters = %d\n",

28 
rwlock
.
rw_ªfcou¡
,Ñwlock.
rw_nwaôªadîs
,

29 
rwlock
.
rw_nwaôwrôîs
);

30 
	`Pthªad_rwlock_de°roy
(&
rwlock
);

33 
	`exô
(0);

34 
	}
}

37 
	$thªad1
(*
¨g
)

39 
	`Pthªad_rwlock_rdlock
(&
rwlock
);

40 
	`¥ötf
("thread1() gotáÑeadÜock\n");

41 
	`¶ìp
(3);

42 
	`±hªad_ˇn˚l
(
tid2
);

43 
	`¶ìp
(3);

44 
	`Pthªad_rwlock_u∆ock
(&
rwlock
);

45 (
NULL
);

46 
	}
}

49 
	$thªad2
(*
¨g
)

51 
	`¥ötf
("thread2()ÅryingÅo obtainá writeÜock\n");

52 
	`Pthªad_rwlock_wæock
(&
rwlock
);

53 
	`¥ötf
("thread2() gotá writeÜock\n");

54 
	`¶ìp
(1);

55 
	`Pthªad_rwlock_u∆ock
(&
rwlock
);

56 (
NULL
);

57 
	}
}

	@my_rwlock/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@my_rwlock_cancel/incr_rwlock1.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

5 
	#MAXNTHREADS
 100

	)

7 
	g∆o›
;

10 
±hªad_rwlock_t
 
	mrwlock
;

11 
	mcou¡î
;

12 } 
	gsh¨ed
 = { 
PTHREAD_RWLOCK_INITIALIZER
 };

14 *
ö¸
(*);

17 
	$maö
(
¨gc
, **
¨gv
)

19 
i
, 
¡hªads
;

20 
±hªad_t
 
tid
[
MAXNTHREADS
];

22 i‡(
¨gc
 != 3)

23 
	`îr_quô
("usage: incr_rwlock1 <#loops> <#threads>");

24 
∆o›
 = 
	`©oi
(
¨gv
[1]);

25 
¡hªads
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

28 
	`Pthªad_rwlock_wæock
(&
sh¨ed
.
rwlock
);

31 
	`Së_c⁄cuºícy
(
¡hªads
);

32 
i
 = 0; i < 
¡hªads
; i++) {

33 
	`Pthªad_¸óã
(&
tid
[
i
], 
NULL
, 
ö¸
, NULL);

36 
	`Sèπ_time
();

37 
	`Pthªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

40 
i
 = 0; i < 
¡hªads
; i++) {

41 
	`Pthªad_joö
(
tid
[
i
], 
NULL
);

43 
	`¥ötf
("mi¸o£c⁄ds: %.0‡u£c\n", 
	`St›_time
());

44 i‡(
sh¨ed
.
cou¡î
 !
∆o›
 * 
¡hªads
)

45 
	`¥ötf
("îr‹: cou¡î = %ld\n", 
sh¨ed
.
cou¡î
);

47 
	`exô
(0);

48 
	}
}

53 
	$ö¸
(*
¨g
)

55 
i
;

57 
i
 = 0; i < 
∆o›
; i++) {

58 
	`Pthªad_rwlock_wæock
(&
sh¨ed
.
rwlock
);

59 
sh¨ed
.
cou¡î
++;

60 
	`Pthªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

62 (
NULL
);

63 
	}
}

	@my_rwlock_cancel/pthread_rwlock.h

2 #i‚def 
__±hªad_rwlock_h


3 
	#__±hªad_rwlock_h


	)

6 
±hªad_muãx_t
 
	mrw_muãx
;

7 
±hªad_c⁄d_t
 
	mrw_c⁄dªadîs
;

8 
±hªad_c⁄d_t
 
	mrw_c⁄dwrôîs
;

9 
	mrw_magic
;

10 
	mrw_nwaôªadîs
;

11 
	mrw_nwaôwrôîs
;

12 
	mrw_ªfcou¡
;

14 } 
	t±hªad_rwlock_t
;

16 
	#RW_MAGIC
 0x19283746

	)

19 
	#PTHREAD_RWLOCK_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, \

20 
PTHREAD_COND_INITIALIZER
, PTHREAD_COND_INITIALIZER, \

21 
RW_MAGIC
, 0, 0, 0 }

	)

23 
	t±hªad_rwlock©å_t
;

26 
±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

27 
±hªad_rwlock_öô
(
±hªad_rwlock_t
 *, 
±hªad_rwlock©å_t
 *);

28 
±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

29 
±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

30 
±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

31 
±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

32 
±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

35 
Pthªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

36 
Pthªad_rwlock_öô
(
±hªad_rwlock_t
 *, 
±hªad_rwlock©å_t
 *);

37 
Pthªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

38 
Pthªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

39 
Pthªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

40 
Pthªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

41 
Pthªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

	@my_rwlock_cancel/pthread_rwlock_destroy.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rw
)

8 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

9 (
EINVAL
);

10 i‡(
rw
->
rw_ªfcou¡
 != 0 ||

11 
rw
->
rw_nwaôªadîs
 !0 ||Ñw->
rw_nwaôwrôîs
 != 0)

12 (
EBUSY
);

14 
	`±hªad_muãx_de°roy
(&
rw
->
rw_muãx
);

15 
	`±hªad_c⁄d_de°roy
(&
rw
->
rw_c⁄dªadîs
);

16 
	`±hªad_c⁄d_de°roy
(&
rw
->
rw_c⁄dwrôîs
);

17 
rw
->
rw_magic
 = 0;

20 
	}
}

24 
	$Pthªad_rwlock_de°roy
(
±hªad_rwlock_t
 *
rw
)

26 
n
;

28 i‡–(
n
 = 
	`±hªad_rwlock_de°roy
(
rw
)) == 0)

30 
î∫o
 = 
n
;

31 
	`îr_sys
("pthread_rwlock_destroyÉrror");

32 
	}
}

	@my_rwlock_cancel/pthread_rwlock_init.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_öô
(
±hªad_rwlock_t
 *
rw
, 
±hªad_rwlock©å_t
 *
©å
)

8 
ªsu…
;

10 i‡(
©å
 !
NULL
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_öô
(&
rw
->
rw_muãx
, 
NULL
)) != 0)

14 
îr1
;

15 i‡–(
ªsu…
 = 
	`±hªad_c⁄d_öô
(&
rw
->
rw_c⁄dªadîs
, 
NULL
)) != 0)

16 
îr2
;

17 i‡–(
ªsu…
 = 
	`±hªad_c⁄d_öô
(&
rw
->
rw_c⁄dwrôîs
, 
NULL
)) != 0)

18 
îr3
;

19 
rw
->
rw_nwaôªadîs
 = 0;

20 
rw
->
rw_nwaôwrôîs
 = 0;

21 
rw
->
rw_ªfcou¡
 = 0;

22 
rw
->
rw_magic
 = 
RW_MAGIC
;

26 
îr3
:

27 
	`±hªad_c⁄d_de°roy
(&
rw
->
rw_c⁄dªadîs
);

28 
îr2
:

29 
	`±hªad_muãx_de°roy
(&
rw
->
rw_muãx
);

30 
îr1
:

31 (
ªsu…
);

32 
	}
}

36 
	$Pthªad_rwlock_öô
(
±hªad_rwlock_t
 *
rw
, 
±hªad_rwlock©å_t
 *
©å
)

38 
n
;

40 i‡–(
n
 = 
	`±hªad_rwlock_öô
(
rw
, 
©å
)) == 0)

42 
î∫o
 = 
n
;

43 
	`îr_sys
("pthread_rwlock_initÉrror");

44 
	}
}

	@my_rwlock_cancel/pthread_rwlock_rdlock.c

1 
	~"u≈ùc.h
"

2 
	~"±hªad_rwlock.h
"

6 
	$rwlock_ˇn˚Ãdwaô
(*
¨g
)

8 
±hªad_rwlock_t
 *
rw
;

10 
rw
 = 
¨g
;

11 
rw
->
rw_nwaôªadîs
--;

12 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

13 
	}
}

17 
	$±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rw
)

19 
ªsu…
;

21 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

22 (
EINVAL
);

24 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

25 (
ªsu…
);

28 
rw
->
rw_ªfcou¡
 < 0 ||Ñw->
rw_nwaôwrôîs
 > 0) {

29 
rw
->
rw_nwaôªadîs
++;

30 
	`±hªad_˛ónup_push
(
rwlock_ˇn˚Ãdwaô
, (*Ë
rw
);

31 
ªsu…
 = 
	`±hªad_c⁄d_waô
(&
rw
->
rw_c⁄dªadîs
, &rw->
rw_muãx
);

32 
	`±hªad_˛ónup_p›
(0);

33 
rw
->
rw_nwaôªadîs
--;

34 i‡(
ªsu…
 != 0)

37 i‡(
ªsu…
 == 0)

38 
rw
->
rw_ªfcou¡
++;

40 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

42 
	}
}

45 
	$Pthªad_rwlock_rdlock
(
±hªad_rwlock_t
 *
rw
)

47 
n
;

49 i‡–(
n
 = 
	`±hªad_rwlock_rdlock
(
rw
)) == 0)

51 
î∫o
 = 
n
;

52 
	`îr_sys
("pthread_rwlock_rdlockÉrror");

53 
	}
}

	@my_rwlock_cancel/pthread_rwlock_tryrdlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 i‡(
rw
->
rw_ªfcou¡
 =-1 ||Ñw->
rw_nwaôwrôîs
 > 0)

17 
ªsu…
 = 
EBUSY
;

19 
rw
->
rw_ªfcou¡
++;

21 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

22 (
ªsu…
);

23 
	}
}

27 
	$Pthªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *
rw
)

29 
n
;

31 i‡–(
n
 = 
	`±hªad_rwlock_åyrdlock
(
rw
)) != 0) {

32 
î∫o
 = 
n
;

33 
	`îr_sys
("pthread_rwlock_tryrdlockÉrror");

35 (
n
);

36 
	}
}

	@my_rwlock_cancel/pthread_rwlock_trywrlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 i‡(
rw
->
rw_ªfcou¡
 != 0)

17 
ªsu…
 = 
EBUSY
;

19 
rw
->
rw_ªfcou¡
 = -1;

21 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

22 (
ªsu…
);

23 
	}
}

27 
	$Pthªad_rwlock_åywæock
(
±hªad_rwlock_t
 *
rw
)

29 
n
;

31 i‡–(
n
 = 
	`±hªad_rwlock_åywæock
(
rw
)) != 0) {

32 
î∫o
 = 
n
;

33 
	`îr_sys
("pthread_rwlock_trywrlockÉrror");

35 (
n
);

36 
	}
}

	@my_rwlock_cancel/pthread_rwlock_unlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

6 
	$±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rw
)

8 
ªsu…
;

10 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

11 (
EINVAL
);

13 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) != 0)

14 (
ªsu…
);

16 i‡(
rw
->
rw_ªfcou¡
 > 0)

17 
rw
->
rw_ªfcou¡
--;

18 i‡(
rw
->
rw_ªfcou¡
 == -1)

19 
rw
->
rw_ªfcou¡
 = 0;

21 
	`îr_dump
("rw_ªfcou¡ = %d", 
rw
->
rw_ªfcou¡
);

25 i‡(
rw
->
rw_nwaôwrôîs
 > 0)

26 
ªsu…
 = 
	`±hªad_c⁄d_sig«l
(&
rw
->
rw_c⁄dwrôîs
);

27 i‡(
rw
->
rw_nwaôªadîs
 > 0)

28 
ªsu…
 = 
	`±hªad_c⁄d_brﬂdˇ°
(&
rw
->
rw_c⁄dªadîs
);

30 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

31 (
ªsu…
);

32 
	}
}

36 
	$Pthªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *
rw
)

38 
n
;

40 i‡–(
n
 = 
	`±hªad_rwlock_u∆ock
(
rw
)) == 0)

42 
î∫o
 = 
n
;

43 
	`îr_sys
("pthread_rwlock_unlockÉrror");

44 
	}
}

	@my_rwlock_cancel/pthread_rwlock_wrlock.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

7 
	$rwlock_ˇn˚lwrwaô
(*
¨g
)

9 
±hªad_rwlock_t
 *
rw
;

11 
rw
 = 
¨g
;

12 
rw
->
rw_nwaôwrôîs
--;

13 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

14 
	}
}

18 
	$±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rw
)

20 
ªsu…
;

22 i‡(
rw
->
rw_magic
 !
RW_MAGIC
)

23 (
EINVAL
);

25 i‡–(
ªsu…
 = 
	`±hªad_muãx_lock
(&
rw
->
rw_muãx
)) == -1)

26 (
ªsu…
);

28 
rw
->
rw_ªfcou¡
 != 0) {

29 
rw
->
rw_nwaôwrôîs
++;

30 
	`±hªad_˛ónup_push
(
rwlock_ˇn˚lwrwaô
, (*Ë
rw
);

31 
ªsu…
 = 
	`±hªad_c⁄d_waô
(&
rw
->
rw_c⁄dwrôîs
, &rw->
rw_muãx
);

32 
	`±hªad_˛ónup_p›
(0);

33 
rw
->
rw_nwaôwrôîs
--;

34 i‡(
ªsu…
 != 0)

37 i‡(
ªsu…
 == 0)

38 
rw
->
rw_ªfcou¡
 = -1;

40 
	`±hªad_muãx_u∆ock
(&
rw
->
rw_muãx
);

42 
	}
}

46 
	$Pthªad_rwlock_wæock
(
±hªad_rwlock_t
 *
rw
)

48 
n
;

50 i‡–(
n
 = 
	`±hªad_rwlock_wæock
(
rw
)) == 0)

52 
î∫o
 = 
n
;

53 
	`îr_sys
("pthread_rwlock_wrlockÉrror");

54 
	}
}

	@my_rwlock_cancel/test1.c

1 
	~"u≈ùc.h
"

2 
	~"±hªad_rwlock.h
"

4 
	#MAXNTHREADS
 100

	)

6 *
ªadî
(*), *
wrôî
(*);

8 
	g∆o›
 = 1000, 
	gƒódîs
 = 6, 
	gnwrôîs
 = 4;

11 
±hªad_rwlock_t
 
	mrwlock
;

12 
±hªad_muãx_t
 
	mrcou¡lock
;

13 
	mƒódîs
;

14 
	mnwrôîs
;

15 } 
	gsh¨ed
 = { 
PTHREAD_RWLOCK_INITIALIZER
, 
PTHREAD_MUTEX_INITIALIZER
 };

18 
	$maö
(
¨gc
, **
¨gv
)

20 
c
, 
i
;

21 
±hªad_t
 
tid_ªadîs
[
MAXNTHREADS
], 
tid_wrôîs
[MAXNTHREADS];

23  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "n:r:w:")) != -1) {

24 
c
) {

26 
∆o›
 = 
	`©oi
(
›èrg
);

30 
ƒódîs
 = 
	`©oi
(
›èrg
);

34 
nwrôîs
 = 
	`©oi
(
›èrg
);

38 i‡(
›töd
 !
¨gc
)

39 
	`îr_quô
("usage:Åest1 [-n #loops ] [ -r #readers ] [ -w #writers ]");

42 
	`Së_c⁄cuºícy
(
ƒódîs
 + 
nwrôîs
);

43 
i
 = 0; i < 
ƒódîs
; i++)

44 
	`Pthªad_¸óã
(&
tid_ªadîs
[
i
], 
NULL
, 
ªadî
, NULL);

45 
i
 = 0; i < 
nwrôîs
; i++)

46 
	`Pthªad_¸óã
(&
tid_wrôîs
[
i
], 
NULL
, 
wrôî
, NULL);

49 
i
 = 0; i < 
ƒódîs
; i++)

50 
	`Pthªad_joö
(
tid_ªadîs
[
i
], 
NULL
);

51 
i
 = 0; i < 
nwrôîs
; i++)

52 
	`Pthªad_joö
(
tid_wrôîs
[
i
], 
NULL
);

54 
	`exô
(0);

55 
	}
}

58 
	$ªadî
(*
¨g
)

60 
i
;

62 
i
 = 0; i < 
∆o›
; i++) {

63 
	`±hªad_rwlock_rdlock
(&
sh¨ed
.
rwlock
);

65 
	`±hªad_muãx_lock
(&
sh¨ed
.
rcou¡lock
);

66 
sh¨ed
.
ƒódîs
++;

67 
	`±hªad_muãx_u∆ock
(&
sh¨ed
.
rcou¡lock
);

69 i‡(
sh¨ed
.
nwrôîs
 > 0)

70 
	`îr_quô
("ªadî: %d wrôî†found", 
sh¨ed
.
nwrôîs
);

72 
	`±hªad_muãx_lock
(&
sh¨ed
.
rcou¡lock
);

73 
sh¨ed
.
ƒódîs
--;

74 
	`±hªad_muãx_u∆ock
(&
sh¨ed
.
rcou¡lock
);

76 
	`±hªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

78 (
NULL
);

79 
	}
}

82 
	$wrôî
(*
¨g
)

84 
i
;

86 
i
 = 0; i < 
∆o›
; i++) {

87 
	`±hªad_rwlock_wæock
(&
sh¨ed
.
rwlock
);

88 
sh¨ed
.
nwrôîs
++;

90 i‡(
sh¨ed
.
nwrôîs
 > 1)

91 
	`îr_quô
("wrôî: %d wrôî†found", 
sh¨ed
.
nwrôîs
);

92 i‡(
sh¨ed
.
ƒódîs
 > 0)

93 
	`îr_quô
("wrôî: %dÑódî†found", 
sh¨ed
.
ƒódîs
);

95 
sh¨ed
.
nwrôîs
--;

96 
	`±hªad_rwlock_u∆ock
(&
sh¨ed
.
rwlock
);

98 (
NULL
);

99 
	}
}

	@my_rwlock_cancel/testcancel.c

2 
	~"u≈ùc.h
"

3 
	~"±hªad_rwlock.h
"

5 
±hªad_rwlock_t
 
	grwlock
 = 
PTHREAD_RWLOCK_INITIALIZER
;

6 
±hªad_t
 
	gtid1
, 
	gtid2
;

7 *
thªad1
(*), *
thªad2
(*);

10 
	$maö
(
¨gc
, **
¨gv
)

12 *
°©us
;

14 
	`Së_c⁄cuºícy
(2);

15 
	`Pthªad_¸óã
(&
tid1
, 
NULL
, 
thªad1
, NULL);

16 
	`¶ìp
(1);

17 
	`Pthªad_¸óã
(&
tid2
, 
NULL
, 
thªad2
, NULL);

19 
	`Pthªad_joö
(
tid2
, &
°©us
);

20 i‡(
°©us
 !
PTHREAD_CANCELED
)

21 
	`¥ötf
("thªad2 sètu†%p\n", 
°©us
);

22 
	`Pthªad_joö
(
tid1
, &
°©us
);

23 i‡(
°©us
 !
NULL
)

24 
	`¥ötf
("thªad1 sètu†%p\n", 
°©us
);

26 
	`¥ötf
("rw_refcount = %d,Ñw_nwaitreaders = %d,Ñw_nwaitwriters = %d\n",

27 
rwlock
.
rw_ªfcou¡
,Ñwlock.
rw_nwaôªadîs
,

28 
rwlock
.
rw_nwaôwrôîs
);

29 
	`Pthªad_rwlock_de°roy
(&
rwlock
);

31 
	`exô
(0);

32 
	}
}

35 
	$thªad1
(*
¨g
)

37 
	`Pthªad_rwlock_rdlock
(&
rwlock
);

38 
	`¥ötf
("thread1() gotáÑeadÜock\n");

39 
	`¶ìp
(3);

40 
	`±hªad_ˇn˚l
(
tid2
);

41 
	`¶ìp
(3);

42 
	`Pthªad_rwlock_u∆ock
(&
rwlock
);

43 (
NULL
);

44 
	}
}

47 
	$thªad2
(*
¨g
)

49 
	`¥ötf
("thread2()ÅryingÅo obtainá writeÜock\n");

50 
	`Pthªad_rwlock_wæock
(&
rwlock
);

51 
	`¥ötf
("thread2() gotá writeÜock\n");

52 
	`¶ìp
(1);

53 
	`Pthªad_rwlock_u∆ock
(&
rwlock
);

54 (
NULL
);

55 
	}
}

	@my_rwlock_cancel/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@pipe/client.c

1 
	~"u≈ùc.h
"

4 
	$˛õ¡
(
ªadfd
, 
wrôefd
)

6 
size_t
 
Àn
;

7 
ssize_t
 
n
;

8 
buff
[
MAXLINE
];

11 
	`Fgës
(
buff
, 
MAXLINE
, 
°dö
);

12 
Àn
 = 
	`°æí
(
buff
);

13 i‡(
buff
[
Àn
-1] == '\n')

14 
Àn
--;

17 
	`Wrôe
(
wrôefd
, 
buff
, 
Àn
);

20  (
n
 = 
	`Ród
(
ªadfd
, 
buff
, 
MAXLINE
)) > 0)

21 
	`Wrôe
(
STDOUT_FILENO
, 
buff
, 
n
);

22 
	}
}

	@pipe/client_main.c

1 
	~"fifo.h
"

3 
˛õ¡
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
ªadfd
, 
wrôefd
;

10 
wrôefd
 = 
	`O≥n
(
FIFO1
, 
O_WRONLY
, 0);

11 
ªadfd
 = 
	`O≥n
(
FIFO2
, 
O_RDONLY
, 0);

13 
	`˛õ¡
(
ªadfd
, 
wrôefd
);

15 
	`Clo£
(
ªadfd
);

16 
	`Clo£
(
wrôefd
);

18 
	`U∆ök
(
FIFO1
);

19 
	`U∆ök
(
FIFO2
);

20 
	`exô
(0);

21 
	}
}

	@pipe/fduplex.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
[2], 
n
;

7 
c
;

8 
pid_t
 
chûdpid
;

10 
	`Pùe
(
fd
);

11 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

12 
	`¶ìp
(3);

13 i‡–(
n
 = 
	`Ród
(
fd
[0], &
c
, 1)) != 1)

14 
	`îr_quô
("chûd:ÑódÑëu∫ed %d", 
n
);

15 
	`¥ötf
("chûdÑód %c\n", 
c
);

16 
	`Wrôe
(
fd
[0], "c", 1);

17 
	`exô
(0);

20 
	`Wrôe
(
fd
[1], "p", 1);

21 i‡–(
n
 = 
	`Ród
(
fd
[1], &
c
, 1)) != 1)

22 
	`îr_quô
("∑ª¡:ÑódÑëu∫ed %d", 
n
);

23 
	`¥ötf
("∑ª¡Ñód %c\n", 
c
);

24 
	`exô
(0);

25 
	}
}

	@pipe/fifo.h

1 
	~"u≈ùc.h
"

3 
	#FIFO1
 "/tmp/fifo.1"

	)

4 
	#FIFO2
 "/tmp/fifo.2"

	)

	@pipe/mainfifo.c

1 
	~"u≈ùc.h
"

3 
	#FIFO1
 "/tmp/fifo.1"

	)

4 
	#FIFO2
 "/tmp/fifo.2"

	)

6 
˛õ¡
(, ), 
£rvî
(, );

9 
	$maö
(
¨gc
, **
¨gv
)

11 
ªadfd
, 
wrôefd
;

12 
pid_t
 
chûdpid
;

15 i‡((
	`mkfifo
(
FIFO1
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
))

16 
	`îr_sys
("ˇn'à¸óã %s", 
FIFO1
);

17 i‡((
	`mkfifo
(
FIFO2
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
)) {

18 
	`u∆ök
(
FIFO1
);

19 
	`îr_sys
("ˇn'à¸óã %s", 
FIFO2
);

22 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

23 
ªadfd
 = 
	`O≥n
(
FIFO1
, 
O_RDONLY
, 0);

24 
wrôefd
 = 
	`O≥n
(
FIFO2
, 
O_WRONLY
, 0);

26 
	`£rvî
(
ªadfd
, 
wrôefd
);

27 
	`exô
(0);

30 
wrôefd
 = 
	`O≥n
(
FIFO1
, 
O_WRONLY
, 0);

31 
ªadfd
 = 
	`O≥n
(
FIFO2
, 
O_RDONLY
, 0);

33 
	`˛õ¡
(
ªadfd
, 
wrôefd
);

35 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

37 
	`Clo£
(
ªadfd
);

38 
	`Clo£
(
wrôefd
);

40 
	`U∆ök
(
FIFO1
);

41 
	`U∆ök
(
FIFO2
);

42 
	`exô
(0);

43 
	}
}

	@pipe/mainpipe.c

1 
	~"u≈ùc.h
"

3 
˛õ¡
(, ), 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
pùe1
[2], 
pùe2
[2];

9 
pid_t
 
chûdpid
;

11 
	`Pùe
(
pùe1
);

12 
	`Pùe
(
pùe2
);

14 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

15 
	`Clo£
(
pùe1
[1]);

16 
	`Clo£
(
pùe2
[0]);

18 
	`£rvî
(
pùe1
[0], 
pùe2
[1]);

19 
	`exô
(0);

22 
	`Clo£
(
pùe1
[0]);

23 
	`Clo£
(
pùe2
[1]);

25 
	`˛õ¡
(
pùe2
[0], 
pùe1
[1]);

27 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

28 
	`exô
(0);

29 
	}
}

	@pipe/mainpopen.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
size_t
 
n
;

7 
buff
[
MAXLINE
], 
comm™d
[MAXLINE];

8 
FILE
 *
Â
;

11 
	`Fgës
(
buff
, 
MAXLINE
, 
°dö
);

12 
n
 = 
	`°æí
(
buff
);

13 i‡(
buff
[
n
-1] == '\n')

14 
n
--;

16 
	`¢¥ötf
(
comm™d
, (comm™d), "ˇà%s", 
buff
);

17 
Â
 = 
	`P›í
(
comm™d
, "r");

20 
	`Fgës
(
buff
, 
MAXLINE
, 
Â
Ë!
NULL
)

21 
	`Fputs
(
buff
, 
°dout
);

23 
	`P˛o£
(
Â
);

24 
	`exô
(0);

25 
	}
}

	@pipe/pipeconf.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 i‡(
¨gc
 != 2)

7 
	`îr_quô
("usage:Öipeconf <pathname>");

9 
	`¥ötf
("PIPE_BUF = %ld, OPEN_MAX = %ld\n",

10 
	`P©hc⁄f
(
¨gv
[1], 
_PC_PIPE_BUF
), 
	`Sysc⁄f
(
_SC_OPEN_MAX
));

11 
	`exô
(0);

12 
	}
}

	@pipe/server.c

1 
	~"u≈ùc.h
"

4 
	$£rvî
(
ªadfd
, 
wrôefd
)

6 
fd
;

7 
ssize_t
 
n
;

8 
buff
[
MAXLINE
+1];

11 i‡–(
n
 = 
	`Ród
(
ªadfd
, 
buff
, 
MAXLINE
)) == 0)

12 
	`îr_quô
("end-of-file whileÑeadingÖathname");

13 
buff
[
n
] = '\0';

15 i‡–(
fd
 = 
	`›í
(
buff
, 
O_RDONLY
)) < 0) {

17 
	`¢¥ötf
(
buff
 + 
n
, (buff) -Ç, ": can't open, %s\n",

18 
	`°ªº‹
(
î∫o
));

19 
n
 = 
	`°æí
(
buff
);

20 
	`Wrôe
(
wrôefd
, 
buff
, 
n
);

24  (
n
 = 
	`Ród
(
fd
, 
buff
, 
MAXLINE
)) > 0)

25 
	`Wrôe
(
wrôefd
, 
buff
, 
n
);

26 
	`Clo£
(
fd
);

28 
	}
}

	@pipe/server_main.c

1 
	~"fifo.h
"

3 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
ªadfd
, 
wrôefd
;

11 i‡((
	`mkfifo
(
FIFO1
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
))

12 
	`îr_sys
("ˇn'à¸óã %s", 
FIFO1
);

13 i‡((
	`mkfifo
(
FIFO2
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
)) {

14 
	`u∆ök
(
FIFO1
);

15 
	`îr_sys
("ˇn'à¸óã %s", 
FIFO2
);

18 
ªadfd
 = 
	`O≥n
(
FIFO1
, 
O_RDONLY
, 0);

19 
wrôefd
 = 
	`O≥n
(
FIFO2
, 
O_WRONLY
, 0);

21 
	`£rvî
(
ªadfd
, 
wrôefd
);

22 
	`exô
(0);

23 
	}
}

	@pipe/test1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
[2];

7 
buff
[7];

8 
°©
 
öfo
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage:Åest1 <pathname>");

13 
	`Mkfifo
(
¨gv
[1], 
FILE_MODE
);

14 
fd
[0] = 
	`O≥n
(
¨gv
[1], 
O_RDONLY
 | 
O_NONBLOCK
);

15 
fd
[1] = 
	`O≥n
(
¨gv
[1], 
O_WRONLY
 | 
O_NONBLOCK
);

18 
	`F°©
(
fd
[0], &
öfo
);

19 
	`¥ötf
("fd[0]: st_sizê%ld\n", (Ë
öfo
.
°_size
);

20 
	`F°©
(
fd
[1], &
öfo
);

21 
	`¥ötf
("fd[1]: st_sizê%ld\n", (Ë
öfo
.
°_size
);

23 
	`Wrôe
(
fd
[1], 
buff
, (buff));

26 
	`F°©
(
fd
[0], &
öfo
);

27 
	`¥ötf
("fd[0]: st_sizê%ld\n", (Ë
öfo
.
°_size
);

28 
	`F°©
(
fd
[1], &
öfo
);

29 
	`¥ötf
("fd[1]: st_sizê%ld\n", (Ë
öfo
.
°_size
);

31 
	`exô
(0);

32 
	}
}

	@pipe/test2.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
[2], 
n
;

7 
pid_t
 
chûdpid
;

8 
fd_£t
 
w£t
;

10 
	`Pùe
(
fd
);

11 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

12 
	`¥ötf
("child closingÖipeÑead descriptor\n");

13 
	`Clo£
(
fd
[0]);

14 
	`¶ìp
(6);

15 
	`exô
(0);

18 
	`Clo£
(
fd
[0]);

19 
	`¶ìp
(3);

20 
	`FD_ZERO
(&
w£t
);

21 
	`FD_SET
(
fd
[1], &
w£t
);

22 
n
 = 
	`£À˘
(
fd
[1] + 1, 
NULL
, &
w£t
, NULL, NULL);

23 
	`¥ötf
("£À˘Ñëu∫ed %d\n", 
n
);

25 i‡(
	`FD_ISSET
(
fd
[1], &
w£t
)) {

26 
	`¥ötf
("fd[1] writable\n");

27 
	`Wrôe
(
fd
[1], "hello", 5);

30 
	`exô
(0);

31 
	}
}

	@pipe/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@pipemesg/client.c

1 
	~"mesg.h
"

4 
	$˛õ¡
(
ªadfd
, 
wrôefd
)

6 
size_t
 
Àn
;

7 
ssize_t
 
n
;

8 
mymesg
 
mesg
;

11 
	`Fgës
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, 
°dö
);

12 
Àn
 = 
	`°æí
(
mesg
.
mesg_d©a
);

13 i‡(
mesg
.
mesg_d©a
[
Àn
-1] == '\n')

14 
Àn
--;

15 
mesg
.
mesg_Àn
 = 
Àn
;

16 
mesg
.
mesg_ty≥
 = 1;

19 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

22  (
n
 = 
	`Mesg_ªcv
(
ªadfd
, &
mesg
)) > 0)

23 
	`Wrôe
(
STDOUT_FILENO
, 
mesg
.
mesg_d©a
, 
n
);

24 
	}
}

	@pipemesg/mainfifo.c

1 
	~"u≈ùc.h
"

3 
	#FIFO1
 "/tmp/fifo.1"

	)

4 
	#FIFO2
 "/tmp/fifo.2"

	)

6 
˛õ¡
(, ), 
£rvî
(, );

9 
	$maö
(
¨gc
, **
¨gv
)

11 
ªadfd
, 
wrôefd
;

12 
pid_t
 
chûdpid
;

15 i‡((
	`mkfifo
(
FIFO1
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
))

16 
	`îr_sys
("ˇn'à¸óã %s", 
FIFO1
);

17 i‡((
	`mkfifo
(
FIFO2
, 
FILE_MODE
Ë< 0Ë&& (
î∫o
 !
EEXIST
)) {

18 
	`u∆ök
(
FIFO1
);

19 
	`îr_sys
("ˇn'à¸óã %s", 
FIFO2
);

22 i‡–(
chûdpid
 = 
	`F‹k
()) > 0) {

23 
wrôefd
 = 
	`O≥n
(
FIFO1
, 
O_WRONLY
, 0);

24 
ªadfd
 = 
	`O≥n
(
FIFO2
, 
O_RDONLY
, 0);

26 
	`˛õ¡
(
ªadfd
, 
wrôefd
);

28 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

30 
	`Clo£
(
ªadfd
);

31 
	`Clo£
(
wrôefd
);

33 
	`U∆ök
(
FIFO1
);

34 
	`U∆ök
(
FIFO2
);

35 
	`exô
(0);

39 
ªadfd
 = 
	`O≥n
(
FIFO1
, 
O_RDONLY
, 0);

40 
wrôefd
 = 
	`O≥n
(
FIFO2
, 
O_WRONLY
, 0);

42 
	`£rvî
(
ªadfd
, 
wrôefd
);

43 
	`exô
(0);

44 
	}
}

	@pipemesg/mainpipe.c

1 
	~"u≈ùc.h
"

3 
˛õ¡
(, ), 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
pùe1
[2], 
pùe2
[2];

9 
pid_t
 
chûdpid
;

11 
	`Pùe
(
pùe1
);

12 
	`Pùe
(
pùe2
);

14 i‡–(
chûdpid
 = 
	`F‹k
()) > 0) {

15 
	`Clo£
(
pùe1
[0]);

16 
	`Clo£
(
pùe2
[1]);

18 
	`˛õ¡
(
pùe2
[0], 
pùe1
[1]);

20 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

21 
	`exô
(0);

24 
	`Clo£
(
pùe1
[1]);

25 
	`Clo£
(
pùe2
[0]);

27 
	`£rvî
(
pùe1
[0], 
pùe2
[1]);

28 
	`exô
(0);

29 
	}
}

	@pipemesg/mesg.h

1 
	~"u≈ùc.h
"

6 
	#MAXMESGDATA
 (
PIPE_BUF
 - 2*())

	)

9 
	#MESGHDRSIZE
 ((
mymesg
Ë- 
MAXMESGDATA
)

	)

11 
	smymesg
 {

12 
	mmesg_Àn
;

13 
	mmesg_ty≥
;

14 
	mmesg_d©a
[
MAXMESGDATA
];

17 
ssize_t
 
mesg_£nd
(, 
mymesg
 *);

18 
Mesg_£nd
(, 
mymesg
 *);

19 
ssize_t
 
mesg_ªcv
(, 
mymesg
 *);

20 
ssize_t
 
Mesg_ªcv
(, 
mymesg
 *);

	@pipemesg/mesg_recv.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_ªcv
(
fd
, 
mymesg
 *
m±r
)

7 
size_t
 
Àn
;

8 
ssize_t
 
n
;

11 i‡–(
n
 = 
	`Ród
(
fd
, 
m±r
, 
MESGHDRSIZE
)) == 0)

13 i‡(
n
 !
MESGHDRSIZE
)

14 
	`îr_quô
("mesßgêhódî:Éx≥˘ed %d, gŸ %d", 
MESGHDRSIZE
, 
n
);

16 i‡–(
Àn
 = 
m±r
->
mesg_Àn
) > 0)

17 i‡–(
n
 = 
	`Ród
(
fd
, 
m±r
->
mesg_d©a
, 
Àn
)) !=Üen)

18 
	`îr_quô
("mesßgêd©a:Éx≥˘ed %d, gŸ %d", 
Àn
, 
n
);

19 (
Àn
);

20 
	}
}

23 
ssize_t


24 
	$Mesg_ªcv
(
fd
, 
mymesg
 *
m±r
)

26 (
	`mesg_ªcv
(
fd
, 
m±r
));

27 
	}
}

	@pipemesg/mesg_send.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_£nd
(
fd
, 
mymesg
 *
m±r
)

7 (
	`wrôe
(
fd
, 
m±r
, 
MESGHDRSIZE
 + m±r->
mesg_Àn
));

8 
	}
}

12 
	$Mesg_£nd
(
fd
, 
mymesg
 *
m±r
)

14 
ssize_t
 
n
;

16 i‡–(
n
 = 
	`mesg_£nd
(
fd
, 
m±r
)Ë!m±r->
mesg_Àn
)

17 
	`îr_quô
("mesg_sendÉrror");

18 
	}
}

	@pipemesg/server.c

1 
	~"mesg.h
"

4 
	$£rvî
(
ªadfd
, 
wrôefd
)

6 
FILE
 *
Â
;

7 
ssize_t
 
n
;

8 
mymesg
 
mesg
;

11 
mesg
.
mesg_ty≥
 = 1;

12 i‡–(
n
 = 
	`Mesg_ªcv
(
ªadfd
, &
mesg
)) == 0)

13 
	`îr_quô
("pathname missing");

14 
mesg
.
mesg_d©a
[
n
] = '\0';

16 i‡–(
Â
 = 
	`f›í
(
mesg
.
mesg_d©a
, "r")Ë=
NULL
) {

18 
	`¢¥ötf
(
mesg
.
mesg_d©a
 + 
n
, (mesg.mesg_data) -Ç,

19 ": c™'à›í, %s\n", 
	`°ªº‹
(
î∫o
));

20 
mesg
.
mesg_Àn
 = 
	`°æí
(mesg.
mesg_d©a
);

21 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

25 
	`Fgës
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, 
Â
Ë!
NULL
) {

26 
mesg
.
mesg_Àn
 = 
	`°æí
(mesg.
mesg_d©a
);

27 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

29 
	`F˛o£
(
Â
);

33 
mesg
.
mesg_Àn
 = 0;

34 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

35 
	}
}

	@pipemesg/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@pxmsg/mqcreate.c

1 
	~"u≈ùc.h
"

3 
mq_©å
 
	g©å
;

6 
	$maö
(
¨gc
, **
¨gv
)

8 
c
, 
Êags
;

9 
mqd_t
 
mqd
;

11 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

12  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "em:z:")) != -1) {

13 
c
) {

15 
Êags
 |
O_EXCL
;

19 
©å
.
mq_maxmsg
 = 
	`©ﬁ
(
›èrg
);

23 
©å
.
mq_msgsize
 = 
	`©ﬁ
(
›èrg
);

27 i‡(
›töd
 !
¨gc
 - 1)

28 
	`îr_quô
("usage: mqcreate [ -e ] [ -m maxmsg -z msgsize ] <name>");

30 i‡((
©å
.
mq_maxmsg
 !0 &&áâr.
mq_msgsize
 == 0) ||

31 (
©å
.
mq_maxmsg
 =0 &&áâr.
mq_msgsize
 != 0))

32 
	`îr_quô
("must specify both -m maxmsgánd -z msgsize");

34 
mqd
 = 
	`Mq_›í
(
¨gv
[
›töd
], 
Êags
, 
FILE_MODE
,

35 (
©å
.
mq_maxmsg
 !0Ë? &©å : 
NULL
);

37 
	`Mq_˛o£
(
mqd
);

38 
	`exô
(0);

39 
	}
}

	@pxmsg/mqcreate1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
Êags
;

7 
mqd_t
 
mqd
;

9 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

10  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "e")) != -1) {

11 
c
) {

13 
Êags
 |
O_EXCL
;

17 i‡(
›töd
 !
¨gc
 - 1)

18 
	`îr_quô
("usage: mqcreate [ -e ] <name>");

20 
mqd
 = 
	`Mq_›í
(
¨gv
[
›töd
], 
Êags
, 
FILE_MODE
, 
NULL
);

22 
	`Mq_˛o£
(
mqd
);

23 
	`exô
(0);

24 
	}
}

	@pxmsg/mqgetattr.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
mqd_t
 
mqd
;

7 
mq_©å
 
©å
;

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage: mqgetattr <name>");

12 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
);

14 
	`Mq_gë©å
(
mqd
, &
©å
);

15 
	`¥ötf
("max #msgs = %ld, max #bytes/msg = %ld, "

17 
©å
.
mq_maxmsg
,áâr.
mq_msgsize
,áâr.
mq_curmsgs
);

19 
	`Mq_˛o£
(
mqd
);

20 
	`exô
(0);

21 
	}
}

	@pxmsg/mqnotify3.c

1 
	~"u≈ùc.h
"

3 
	#MYSIG_NOTIFY
 (
SIGRTMIN
+2)

	)

5 
sigevít
 
	gsigev
;

7 
Sigfunc_π
 
	gsig_nŸify
;

10 
	$maö
(
¨gc
, **
¨gv
)

12 
mqd_t
 
mqd
;

14 i‡(
¨gc
 != 2)

15 
	`îr_quô
("usage: mqnotify3 <name>");

17 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
);

19 
	`Sig«l_π
(
MYSIG_NOTIFY
, 
sig_nŸify
);

21 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

22 
sigev
.
sigev_signo
 = 
MYSIG_NOTIFY
;

23 
sigev
.
sigev_vÆue
.
sivÆ_±r
 = &
mqd
;

24 
	`Mq_nŸify
(
mqd
, &
sigev
);

27 
	`∑u£
();

29 
	`exô
(0);

30 
	}
}

33 
	$sig_nŸify
(
signo
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

35 
	`¥ötf
("MYSIG_NOTIFYÑeceived\n");

36 i‡(
öfo
->
si_code
 !
SI_MESGQ
)

37 
	`îr_quô
("si_codê%d", 
öfo
->
si_code
);

38 
	`Mq_nŸify
(*((
mqd_t
 *Ë
öfo
->
si_vÆue
.
sivÆ_±r
), &
sigev
);

40 
	}
}

	@pxmsg/mqnotifysig1.c

1 
	~"u≈ùc.h
"

3 
mqd_t
 
	gmqd
;

4 *
	gbuff
;

5 
mq_©å
 
	g©å
;

6 
sigevít
 
	gsigev
;

8 
sig_u§1
();

11 
	$maö
(
¨gc
, **
¨gv
)

13 i‡(
¨gc
 != 2)

14 
	`îr_quô
("usage: mqnotifysig1 <name>");

17 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
);

18 
	`Mq_gë©å
(
mqd
, &
©å
);

19 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

22 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

23 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

24 
sigev
.
sigev_signo
 = 
SIGUSR1
;

25 
	`Mq_nŸify
(
mqd
, &
sigev
);

28 
	`∑u£
();

29 
	`exô
(0);

30 
	}
}

33 
	$sig_u§1
(
signo
)

35 
ssize_t
 
n
;

37 
	`Mq_nŸify
(
mqd
, &
sigev
);

38 
n
 = 
	`Mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, 
NULL
);

39 
	`¥ötf
("SIGUSR1Ñe˚ived,Ñód %ld byãs\n", (Ë
n
);

41 
	}
}

	@pxmsg/mqnotifysig2.c

1 
	~"u≈ùc.h
"

3 vﬁ©ûê
sig_©omic_t
 
	gmqÊag
;

4 
sig_u§1
();

7 
	$maö
(
¨gc
, **
¨gv
)

9 
mqd_t
 
mqd
;

10 *
buff
;

11 
ssize_t
 
n
;

12 
sig£t_t
 
zîomask
, 
√wmask
, 
ﬁdmask
;

13 
mq_©å
 
©å
;

14 
sigevít
 
sigev
;

16 i‡(
¨gc
 != 2)

17 
	`îr_quô
("usage: mqnotifysig2 <name>");

20 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
);

21 
	`Mq_gë©å
(
mqd
, &
©å
);

22 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

24 
	`Sigem±y£t
(&
zîomask
);

25 
	`Sigem±y£t
(&
√wmask
);

26 
	`Sigem±y£t
(&
ﬁdmask
);

27 
	`Sigadd£t
(&
√wmask
, 
SIGUSR1
);

30 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

31 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

32 
sigev
.
sigev_signo
 = 
SIGUSR1
;

33 
	`Mq_nŸify
(
mqd
, &
sigev
);

36 
	`Sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
);

37 
mqÊag
 == 0)

38 
	`sigsu•íd
(&
zîomask
);

39 
mqÊag
 = 0;

41 
	`Mq_nŸify
(
mqd
, &
sigev
);

42 
n
 = 
	`Mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, 
NULL
);

43 
	`¥ötf
("ªad %ld byãs\n", (Ë
n
);

44 
	`Sig¥ocmask
(
SIG_UNBLOCK
, &
√wmask
, 
NULL
);

46 
	`exô
(0);

47 
	}
}

50 
	$sig_u§1
(
signo
)

52 
mqÊag
 = 1;

54 
	}
}

	@pxmsg/mqnotifysig3.c

1 
	~"u≈ùc.h
"

3 vﬁ©ûê
sig_©omic_t
 
	gmqÊag
;

4 
sig_u§1
();

7 
	$maö
(
¨gc
, **
¨gv
)

9 
mqd_t
 
mqd
;

10 *
buff
;

11 
ssize_t
 
n
;

12 
sig£t_t
 
zîomask
, 
√wmask
, 
ﬁdmask
;

13 
mq_©å
 
©å
;

14 
sigevít
 
sigev
;

16 i‡(
¨gc
 != 2)

17 
	`îr_quô
("usage: mqnotifysig3 <name>");

20 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
 | 
O_NONBLOCK
);

21 
	`Mq_gë©å
(
mqd
, &
©å
);

22 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

24 
	`Sigem±y£t
(&
zîomask
);

25 
	`Sigem±y£t
(&
√wmask
);

26 
	`Sigem±y£t
(&
ﬁdmask
);

27 
	`Sigadd£t
(&
√wmask
, 
SIGUSR1
);

29 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

30 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

31 
sigev
.
sigev_signo
 = 
SIGUSR1
;

32 
	`Mq_nŸify
(
mqd
, &
sigev
);

35 
	`Sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, &
ﬁdmask
);

36 
mqÊag
 == 0)

37 
	`sigsu•íd
(&
zîomask
);

38 
mqÊag
 = 0;

40 
	`Mq_nŸify
(
mqd
, &
sigev
);

41  (
n
 = 
	`mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, 
NULL
)) >= 0) {

42 
	`¥ötf
("ªad %ld byãs\n", (Ë
n
);

44 i‡(
î∫o
 !
EAGAIN
)

45 
	`îr_sys
("mq_receiveÉrror");

46 
	`Sig¥ocmask
(
SIG_UNBLOCK
, &
√wmask
, 
NULL
);

48 
	`exô
(0);

49 
	}
}

52 
	$sig_u§1
(
signo
)

54 
mqÊag
 = 1;

56 
	}
}

	@pxmsg/mqnotifysig4.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
signo
;

7 
mqd_t
 
mqd
;

8 *
buff
;

9 
ssize_t
 
n
;

10 
sig£t_t
 
√wmask
;

11 
mq_©å
 
©å
;

12 
sigevít
 
sigev
;

14 i‡(
¨gc
 != 2)

15 
	`îr_quô
("usage: mqnotifysig4 <name>");

18 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
 | 
O_NONBLOCK
);

19 
	`Mq_gë©å
(
mqd
, &
©å
);

20 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

22 
	`Sigem±y£t
(&
√wmask
);

23 
	`Sigadd£t
(&
√wmask
, 
SIGUSR1
);

24 
	`Sig¥ocmask
(
SIG_BLOCK
, &
√wmask
, 
NULL
);

27 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

28 
sigev
.
sigev_signo
 = 
SIGUSR1
;

29 
	`Mq_nŸify
(
mqd
, &
sigev
);

32 
	`Sigwaô
(&
√wmask
, &
signo
);

33 i‡(
signo
 =
SIGUSR1
) {

34 
	`Mq_nŸify
(
mqd
, &
sigev
);

35  (
n
 = 
	`mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, 
NULL
)) >= 0) {

36 
	`¥ötf
("ªad %ld byãs\n", (Ë
n
);

38 i‡(
î∫o
 !
EAGAIN
)

39 
	`îr_sys
("mq_receiveÉrror");

42 
	`exô
(0);

43 
	}
}

	@pxmsg/mqnotifysig5.c

1 
	~"u≈ùc.h
"

3 
	gpùefd
[2];

4 
sig_u§1
();

7 
	$maö
(
¨gc
, **
¨gv
)

9 
nfds
;

10 
c
;

11 
fd_£t
 
r£t
;

12 
mqd_t
 
mqd
;

13 *
buff
;

14 
ssize_t
 
n
;

15 
mq_©å
 
©å
;

16 
sigevít
 
sigev
;

18 i‡(
¨gc
 != 2)

19 
	`îr_quô
("usage: mqnotifysig5 <name>");

22 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
 | 
O_NONBLOCK
);

23 
	`Mq_gë©å
(
mqd
, &
©å
);

24 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

26 
	`Pùe
(
pùefd
);

29 
	`Sig«l
(
SIGUSR1
, 
sig_u§1
);

30 
sigev
.
sigev_nŸify
 = 
SIGEV_SIGNAL
;

31 
sigev
.
sigev_signo
 = 
SIGUSR1
;

32 
	`Mq_nŸify
(
mqd
, &
sigev
);

34 
	`FD_ZERO
(&
r£t
);

36 
	`FD_SET
(
pùefd
[0], &
r£t
);

37 
nfds
 = 
	`Sñe˘
(
pùefd
[0] + 1, &
r£t
, 
NULL
, NULL, NULL);

39 i‡(
	`FD_ISSET
(
pùefd
[0], &
r£t
)) {

40 
	`Ród
(
pùefd
[0], &
c
, 1);

41 
	`Mq_nŸify
(
mqd
, &
sigev
);

42  (
n
 = 
	`mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, 
NULL
)) >= 0) {

43 
	`¥ötf
("ªad %ld byãs\n", (Ë
n
);

45 i‡(
î∫o
 !
EAGAIN
)

46 
	`îr_sys
("mq_receiveÉrror");

49 
	`exô
(0);

50 
	}
}

53 
	$sig_u§1
(
signo
)

55 
	`Wrôe
(
pùefd
[1], "", 1);

57 
	}
}

	@pxmsg/mqnotifythread1.c

1 
	~"u≈ùc.h
"

3 
mqd_t
 
	gmqd
;

4 
mq_©å
 
	g©å
;

5 
sigevít
 
	gsigev
;

7 
nŸify_thªad
(
sigvÆ
);

10 
	$maö
(
¨gc
, **
¨gv
)

12 i‡(
¨gc
 != 2)

13 
	`îr_quô
("usage: mqnotifythread1 <name>");

15 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_RDONLY
 | 
O_NONBLOCK
);

16 
	`Mq_gë©å
(
mqd
, &
©å
);

18 
sigev
.
sigev_nŸify
 = 
SIGEV_THREAD
;

19 
sigev
.
sigev_vÆue
.
sivÆ_±r
 = 
NULL
;

20 
sigev
.
sigev_nŸify_fun˘i⁄
 = 
nŸify_thªad
;

21 
sigev
.
sigev_nŸify_©åibuãs
 = 
NULL
;

22 
	`Mq_nŸify
(
mqd
, &
sigev
);

25 
	`∑u£
();

27 
	`exô
(0);

28 
	}
}

31 
	$nŸify_thªad
(
sigvÆ
 
¨g
)

33 
ssize_t
 
n
;

34 *
buff
;

36 
	`¥ötf
("notify_thread started\n");

37 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

38 
	`Mq_nŸify
(
mqd
, &
sigev
);

40  (
n
 = 
	`mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, 
NULL
)) >= 0) {

41 
	`¥ötf
("ªad %ld byãs\n", (Ë
n
);

43 i‡(
î∫o
 !
EAGAIN
)

44 
	`îr_sys
("mq_receiveÉrror");

46 
	`‰ì
(
buff
);

47 
	`±hªad_exô
(
NULL
);

48 
	}
}

	@pxmsg/mqreceive.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
Êags
;

7 
mqd_t
 
mqd
;

8 
ssize_t
 
n
;

9 
uöt_t
 
¥io
;

10 *
buff
;

11 
mq_©å
 
©å
;

13 
Êags
 = 
O_RDONLY
;

14  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "n")) != -1) {

15 
c
) {

17 
Êags
 |
O_NONBLOCK
;

21 i‡(
›töd
 !
¨gc
 - 1)

22 
	`îr_quô
("usage: mqreceive [ -n ] <name>");

24 
mqd
 = 
	`Mq_›í
(
¨gv
[
›töd
], 
Êags
);

25 
	`Mq_gë©å
(
mqd
, &
©å
);

27 
buff
 = 
	`MÆloc
(
©å
.
mq_msgsize
);

29 
n
 = 
	`Mq_ª˚ive
(
mqd
, 
buff
, 
©å
.
mq_msgsize
, &
¥io
);

30 
	`¥ötf
("ªad %ld byãs,Öri‹ôy = %u\n", (Ë
n
, 
¥io
);

32 
	`exô
(0);

33 
	}
}

	@pxmsg/mqsend.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
mqd_t
 
mqd
;

7 *
±r
;

8 
size_t
 
Àn
;

9 
uöt_t
 
¥io
;

11 i‡(
¨gc
 != 4)

12 
	`îr_quô
("usage: mqsend <name> <#bytes> <priority>");

13 
Àn
 = 
	`©oi
(
¨gv
[2]);

14 
¥io
 = 
	`©oi
(
¨gv
[3]);

16 
mqd
 = 
	`Mq_›í
(
¨gv
[1], 
O_WRONLY
);

18 
±r
 = 
	`CÆloc
(
Àn
, ());

19 
	`Mq_£nd
(
mqd
, 
±r
, 
Àn
, 
¥io
);

21 
	`exô
(0);

22 
	}
}

	@pxmsg/mqsysconf.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
	`¥ötf
("MQ_OPEN_MAX = %ld, MQ_PRIO_MAX = %ld\n",

7 
	`Sysc⁄f
(
_SC_MQ_OPEN_MAX
), Sysc⁄f(
_SC_MQ_PRIO_MAX
));

8 
	`exô
(0);

9 
	}
}

	@pxmsg/mqunlink.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 i‡(
¨gc
 != 2)

7 
	`îr_quô
("usage: mqunlink <name>");

9 
	`Mq_u∆ök
(
¨gv
[1]);

11 
	`exô
(0);

12 
	}
}

	@pxmsg/test1.c

1 
	~"u≈ùc.h
"

3 
mq_©å
 
	g©å
;

6 
	$maö
(
¨gc
, **
¨gv
)

8 
c
, 
Êags
;

9 
mqd_t
 
mqd
;

11 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

12  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "em:z:")) != -1) {

13 
c
) {

15 
Êags
 |
O_EXCL
;

19 
©å
.
mq_maxmsg
 = 
	`©ﬁ
(
›èrg
);

23 
©å
.
mq_msgsize
 = 
	`©ﬁ
(
›èrg
);

27 i‡(
›töd
 !
¨gc
 - 1)

28 
	`îr_quô
("usage: mqcreate [ -e ] [ -m maxmsg -z msgsize ] <name>");

30 i‡((
©å
.
mq_maxmsg
 !0 &&áâr.
mq_msgsize
 == 0) ||

31 (
©å
.
mq_maxmsg
 =0 &&áâr.
mq_msgsize
 != 0))

32 
	`îr_quô
("must specify both -m maxmsgánd -z msgsize");

34 
	`¥ötf
("aboutÅo sleep for 30 seconds before mq_open\n");

35 
	`¶ìp
(30);

37 
mqd
 = 
	`Mq_›í
(
¨gv
[
›töd
], 
Êags
, 
FILE_MODE
,

38 (
©å
.
mq_maxmsg
 !0Ë? &©å : 
NULL
);

40 
	`¥ötf
("mq_open OK,áboutÅo sleep for 30 more seconds\n");

41 
	`¶ìp
(30);

43 
	`Mq_˛o£
(
mqd
);

44 
	`exô
(0);

45 
	}
}

	@pxmsg/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@pxsem/deadlock.c

2 
	~"u≈ùc.h
"

4 
	#NBUFF
 2

	)

5 
	#SEM_MUTEX
 "muãx"

	)

6 
	#SEM_NEMPTY
 "√m±y"

	)

7 
	#SEM_NSTORED
 "n°‹ed"

	)

9 
	gnôems
;

11 
	mbuff
[
NBUFF
];

12 
£m_t
 *
	mmuãx
, *
	m√m±y
, *
	mn°‹ed
;

13 } 
	gsh¨ed
;

15 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

22 i‡(
¨gc
 != 1)

23 
	`îr_quô
("usage: deadlock <#items>");

24 
nôems
 = 
	`©oi
(
¨gv
[1]);

27 
sh¨ed
.
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_MUTEX
), 
O_CREAT
 | 
O_EXCL
,

28 
FILE_MODE
, 1);

29 
sh¨ed
.
√m±y
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NEMPTY
), 
O_CREAT
 | 
O_EXCL
,

30 
FILE_MODE
, 
NBUFF
);

31 
sh¨ed
.
n°‹ed
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NSTORED
), 
O_CREAT
 | 
O_EXCL
,

32 
FILE_MODE
, 0);

34 
	`Së_c⁄cuºícy
(2);

35 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

36 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

38 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

39 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

41 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_MUTEX
));

42 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NEMPTY
));

43 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NSTORED
));

44 
	`exô
(0);

45 
	}
}

50 
	$¥odu˚
(*
¨g
)

52 
i
;

54 
i
 = 0; i < 
nôems
; i++) {

55 
	`¥ötf
("prod: calling sem_wait(nempty)\n");

56 
	`Sem_waô
(
sh¨ed
.
√m±y
);

57 
	`¥ötf
("prod: got sem_wait(nempty)\n");

58 
	`¥ötf
("prod: calling sem_wait(mutex)\n");

59 
	`Sem_waô
(
sh¨ed
.
muãx
);

60 
	`¥ötf
("¥od: gŸ sem_waô(muãx), st‹ög %d\n", 
i
);

61 
sh¨ed
.
buff
[
i
 % 
NBUFF
] = i;

62 
	`Sem_po°
(
sh¨ed
.
muãx
);

63 
	`Sem_po°
(
sh¨ed
.
n°‹ed
);

65 (
NULL
);

66 
	}
}

69 
	$c⁄sume
(*
¨g
)

71 
i
;

73 
i
 = 0; i < 
nôems
; i++) {

74 
	`¥ötf
("cons: calling sem_wait(mutex)\n");

75 
	`Sem_waô
(
sh¨ed
.
muãx
);

76 
	`¥ötf
("cons: got sem_wait(mutex)\n");

77 
	`¥ötf
("cons: calling sem_wait(nstored)\n");

78 
	`Sem_waô
(
sh¨ed
.
n°‹ed
);

79 
	`¥ötf
("cons: got sem_wait(nstored)\n");

80 
	`¥ötf
("c⁄s: fëched %d\n", 
sh¨ed
.
buff
[
i
 % 
NBUFF
]);

81 
	`Sem_po°
(
sh¨ed
.
muãx
);

82 
	`Sem_po°
(
sh¨ed
.
√m±y
);

84 
	`¥ötf
("\n");

85 (
NULL
);

86 
	}
}

	@pxsem/mycat1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
, 
n
;

7 
buff
[
BUFFSIZE
];

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage: mycat1 <pathname>");

12 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDONLY
);

14  (
n
 = 
	`Ród
(
fd
, 
buff
, 
BUFFSIZE
)) > 0)

15 
	`Wrôe
(
STDOUT_FILENO
, 
buff
, 
n
);

17 
	`exô
(0);

18 
	}
}

	@pxsem/mycat2.c

2 
	~"u≈ùc.h
"

4 
	#NBUFF
 8

	)

8 
	md©a
[
BUFFSIZE
];

9 
ssize_t
 
	mn
;

10 } 
	mbuff
[
NBUFF
];

11 
£m_t
 
	mmuãx
, 
	m√m±y
, 
	mn°‹ed
;

12 } 
	gsh¨ed
;

14 
	gfd
;

15 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

22 i‡(
¨gc
 != 2)

23 
	`îr_quô
("usage: mycat2 <pathname>");

25 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDONLY
);

28 
	`Sem_öô
(&
sh¨ed
.
muãx
, 0, 1);

29 
	`Sem_öô
(&
sh¨ed
.
√m±y
, 0, 
NBUFF
);

30 
	`Sem_öô
(&
sh¨ed
.
n°‹ed
, 0, 0);

33 
	`Së_c⁄cuºícy
(2);

34 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

35 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

37 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

38 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

40 
	`Sem_de°roy
(&
sh¨ed
.
muãx
);

41 
	`Sem_de°roy
(&
sh¨ed
.
√m±y
);

42 
	`Sem_de°roy
(&
sh¨ed
.
n°‹ed
);

43 
	`exô
(0);

44 
	}
}

49 
	$¥odu˚
(*
¨g
)

51 
i
;

53 
i
 = 0; ; ) {

54 
	`Sem_waô
(&
sh¨ed
.
√m±y
);

56 
	`Sem_waô
(&
sh¨ed
.
muãx
);

58 
	`Sem_po°
(&
sh¨ed
.
muãx
);

60 
sh¨ed
.
buff
[
i
].
n
 = 
	`Ród
(
fd
, sh¨ed.buff[i].
d©a
, 
BUFFSIZE
);

61 i‡(
sh¨ed
.
buff
[
i
].
n
 == 0) {

62 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

63 (
NULL
);

65 i‡(++
i
 >
NBUFF
)

66 
i
 = 0;

68 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

70 
	}
}

73 
	$c⁄sume
(*
¨g
)

75 
i
;

77 
i
 = 0; ; ) {

78 
	`Sem_waô
(&
sh¨ed
.
n°‹ed
);

80 
	`Sem_waô
(&
sh¨ed
.
muãx
);

82 
	`Sem_po°
(&
sh¨ed
.
muãx
);

84 i‡(
sh¨ed
.
buff
[
i
].
n
 == 0)

85 (
NULL
);

86 
	`Wrôe
(
STDOUT_FILENO
, 
sh¨ed
.
buff
[
i
].
d©a
, sh¨ed.buff[i].
n
);

87 i‡(++
i
 >
NBUFF
)

88 
i
 = 0;

90 
	`Sem_po°
(&
sh¨ed
.
√m±y
);

92 
	}
}

	@pxsem/prodcons1.c

2 
	~"u≈ùc.h
"

4 
	#NBUFF
 10

	)

5 
	#SEM_MUTEX
 "muãx"

	)

6 
	#SEM_NEMPTY
 "√m±y"

	)

7 
	#SEM_NSTORED
 "n°‹ed"

	)

9 
	gnôems
;

11 
	mbuff
[
NBUFF
];

12 
£m_t
 *
	mmuãx
, *
	m√m±y
, *
	mn°‹ed
;

13 } 
	gsh¨ed
;

15 *
¥odu˚
(*), *
c⁄sume
(*);

18 
	$maö
(
¨gc
, **
¨gv
)

20 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

22 i‡(
¨gc
 != 2)

23 
	`îr_quô
("usage:Örodcons1 <#items>");

24 
nôems
 = 
	`©oi
(
¨gv
[1]);

27 
sh¨ed
.
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_MUTEX
), 
O_CREAT
 | 
O_EXCL
,

28 
FILE_MODE
, 1);

29 
sh¨ed
.
√m±y
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NEMPTY
), 
O_CREAT
 | 
O_EXCL
,

30 
FILE_MODE
, 
NBUFF
);

31 
sh¨ed
.
n°‹ed
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NSTORED
), 
O_CREAT
 | 
O_EXCL
,

32 
FILE_MODE
, 0);

35 
	`Së_c⁄cuºícy
(2);

36 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

37 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

40 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

41 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

44 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_MUTEX
));

45 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NEMPTY
));

46 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NSTORED
));

47 
	`exô
(0);

48 
	}
}

53 
	$¥odu˚
(*
¨g
)

55 
i
;

57 
i
 = 0; i < 
nôems
; i++) {

58 
	`Sem_waô
(
sh¨ed
.
√m±y
);

59 
	`Sem_waô
(
sh¨ed
.
muãx
);

60 
sh¨ed
.
buff
[
i
 % 
NBUFF
] = i;

61 
	`Sem_po°
(
sh¨ed
.
muãx
);

62 
	`Sem_po°
(
sh¨ed
.
n°‹ed
);

64 (
NULL
);

65 
	}
}

68 
	$c⁄sume
(*
¨g
)

70 
i
;

72 
i
 = 0; i < 
nôems
; i++) {

73 
	`Sem_waô
(
sh¨ed
.
n°‹ed
);

74 
	`Sem_waô
(
sh¨ed
.
muãx
);

75 i‡(
sh¨ed
.
buff
[
i
 % 
NBUFF
] != i)

76 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[ò% 
NBUFF
]);

77 
	`Sem_po°
(
sh¨ed
.
muãx
);

78 
	`Sem_po°
(
sh¨ed
.
√m±y
);

80 (
NULL
);

81 
	}
}

	@pxsem/prodcons2.c

1 
	~"u≈ùc.h
"

3 
	#NBUFF
 10

	)

5 
	gnôems
;

7 
	mbuff
[
NBUFF
];

8 
£m_t
 
	mmuãx
, 
	m√m±y
, 
	mn°‹ed
;

9 } 
	gsh¨ed
;

11 *
¥odu˚
(*), *
c⁄sume
(*);

14 
	$maö
(
¨gc
, **
¨gv
)

16 
±hªad_t
 
tid_¥odu˚
, 
tid_c⁄sume
;

18 i‡(
¨gc
 != 2)

19 
	`îr_quô
("usage:Örodcons2 <#items>");

20 
nôems
 = 
	`©oi
(
¨gv
[1]);

23 
	`Sem_öô
(&
sh¨ed
.
muãx
, 0, 1);

24 
	`Sem_öô
(&
sh¨ed
.
√m±y
, 0, 
NBUFF
);

25 
	`Sem_öô
(&
sh¨ed
.
n°‹ed
, 0, 0);

27 
	`Së_c⁄cuºícy
(2);

28 
	`Pthªad_¸óã
(&
tid_¥odu˚
, 
NULL
, 
¥odu˚
, NULL);

29 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

31 
	`Pthªad_joö
(
tid_¥odu˚
, 
NULL
);

32 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

34 
	`Sem_de°roy
(&
sh¨ed
.
muãx
);

35 
	`Sem_de°roy
(&
sh¨ed
.
√m±y
);

36 
	`Sem_de°roy
(&
sh¨ed
.
n°‹ed
);

37 
	`exô
(0);

38 
	}
}

41 
	$¥odu˚
(*
¨g
)

43 
i
;

45 
i
 = 0; i < 
nôems
; i++) {

46 
	`Sem_waô
(&
sh¨ed
.
√m±y
);

47 
	`Sem_waô
(&
sh¨ed
.
muãx
);

48 
sh¨ed
.
buff
[
i
 % 
NBUFF
] = i;

49 
	`Sem_po°
(&
sh¨ed
.
muãx
);

50 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

52 (
NULL
);

53 
	}
}

56 
	$c⁄sume
(*
¨g
)

58 
i
;

60 
i
 = 0; i < 
nôems
; i++) {

61 
	`Sem_waô
(&
sh¨ed
.
n°‹ed
);

62 
	`Sem_waô
(&
sh¨ed
.
muãx
);

63 i‡(
sh¨ed
.
buff
[
i
 % 
NBUFF
] != i)

64 
	`¥ötf
("buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[ò% 
NBUFF
]);

65 
	`Sem_po°
(&
sh¨ed
.
muãx
);

66 
	`Sem_po°
(&
sh¨ed
.
√m±y
);

68 (
NULL
);

69 
	}
}

	@pxsem/prodcons3.c

2 
	~"u≈ùc.h
"

4 
	#NBUFF
 10

	)

5 
	#MAXNTHREADS
 100

	)

7 
	gnôems
, 
	g≈rodu˚rs
;

10 
	mbuff
[
NBUFF
];

11 
	m≈ut
;

12 
	m≈utvÆ
;

13 
£m_t
 
	mmuãx
, 
	m√m±y
, 
	mn°‹ed
;

14 } 
	gsh¨ed
;

16 *
¥odu˚
(*), *
c⁄sume
(*);

19 
	$maö
(
¨gc
, **
¨gv
)

21 
i
, 
cou¡
[
MAXNTHREADS
];

22 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
;

24 i‡(
¨gc
 != 3)

25 
	`îr_quô
("usage:Örodcons3 <#items> <#producers>");

26 
nôems
 = 
	`©oi
(
¨gv
[1]);

27 
≈rodu˚rs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

30 
	`Sem_öô
(&
sh¨ed
.
muãx
, 0, 1);

31 
	`Sem_öô
(&
sh¨ed
.
√m±y
, 0, 
NBUFF
);

32 
	`Sem_öô
(&
sh¨ed
.
n°‹ed
, 0, 0);

35 
	`Së_c⁄cuºícy
(
≈rodu˚rs
 + 1);

36 
i
 = 0; i < 
≈rodu˚rs
; i++) {

37 
cou¡
[
i
] = 0;

38 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
cou¡
[i]);

40 
	`Pthªad_¸óã
(&
tid_c⁄sume
, 
NULL
, 
c⁄sume
, NULL);

43 
i
 = 0; i < 
≈rodu˚rs
; i++) {

44 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

45 
	`¥ötf
("cou¡[%d] = %d\n", 
i
, 
cou¡
[i]);

47 
	`Pthªad_joö
(
tid_c⁄sume
, 
NULL
);

49 
	`Sem_de°roy
(&
sh¨ed
.
muãx
);

50 
	`Sem_de°roy
(&
sh¨ed
.
√m±y
);

51 
	`Sem_de°roy
(&
sh¨ed
.
n°‹ed
);

52 
	`exô
(0);

53 
	}
}

58 
	$¥odu˚
(*
¨g
)

61 
	`Sem_waô
(&
sh¨ed
.
√m±y
);

62 
	`Sem_waô
(&
sh¨ed
.
muãx
);

64 i‡(
sh¨ed
.
≈ut
 >
nôems
) {

65 
	`Sem_po°
(&
sh¨ed
.
√m±y
);

66 
	`Sem_po°
(&
sh¨ed
.
muãx
);

67 (
NULL
);

70 
sh¨ed
.
buff
[sh¨ed.
≈ut
 % 
NBUFF
] = sh¨ed.
≈utvÆ
;

71 
sh¨ed
.
≈ut
++;

72 
sh¨ed
.
≈utvÆ
++;

74 
	`Sem_po°
(&
sh¨ed
.
muãx
);

75 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

76 *((*Ë
¨g
) += 1;

78 
	}
}

83 
	$c⁄sume
(*
¨g
)

85 
i
;

87 
i
 = 0; i < 
nôems
; i++) {

88 
	`Sem_waô
(&
sh¨ed
.
n°‹ed
);

89 
	`Sem_waô
(&
sh¨ed
.
muãx
);

91 i‡(
sh¨ed
.
buff
[
i
 % 
NBUFF
] != i)

92 
	`¥ötf
("îr‹: buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[ò% 
NBUFF
]);

94 
	`Sem_po°
(&
sh¨ed
.
muãx
);

95 
	`Sem_po°
(&
sh¨ed
.
√m±y
);

97 (
NULL
);

98 
	}
}

	@pxsem/prodcons4.c

2 
	~"u≈ùc.h
"

4 
	#NBUFF
 10

	)

5 
	#MAXNTHREADS
 100

	)

7 
	gnôems
, 
	g≈rodu˚rs
, 
	gnc⁄sumîs
;

10 
	mbuff
[
NBUFF
];

11 
	m≈ut
;

12 
	m≈utvÆ
;

13 
	mngë
;

14 
	mngëvÆ
;

15 
£m_t
 
	mmuãx
, 
	m√m±y
, 
	mn°‹ed
;

16 } 
	gsh¨ed
;

18 *
¥odu˚
(*), *
c⁄sume
(*);

23 
	$maö
(
¨gc
, **
¨gv
)

25 
i
, 
¥odcou¡
[
MAXNTHREADS
], 
c⁄scou¡
[MAXNTHREADS];

26 
±hªad_t
 
tid_¥odu˚
[
MAXNTHREADS
], 
tid_c⁄sume
[MAXNTHREADS];

28 i‡(
¨gc
 != 4)

29 
	`îr_quô
("usage:Örodcons4 <#items> <#producers> <#consumers>");

30 
nôems
 = 
	`©oi
(
¨gv
[1]);

31 
≈rodu˚rs
 = 
	`mö
(
	`©oi
(
¨gv
[2]), 
MAXNTHREADS
);

32 
nc⁄sumîs
 = 
	`mö
(
	`©oi
(
¨gv
[3]), 
MAXNTHREADS
);

35 
	`Sem_öô
(&
sh¨ed
.
muãx
, 0, 1);

36 
	`Sem_öô
(&
sh¨ed
.
√m±y
, 0, 
NBUFF
);

37 
	`Sem_öô
(&
sh¨ed
.
n°‹ed
, 0, 0);

40 
	`Së_c⁄cuºícy
(
≈rodu˚rs
 + 
nc⁄sumîs
);

41 
i
 = 0; i < 
≈rodu˚rs
; i++) {

42 
¥odcou¡
[
i
] = 0;

43 
	`Pthªad_¸óã
(&
tid_¥odu˚
[
i
], 
NULL
, 
¥odu˚
, &
¥odcou¡
[i]);

45 
i
 = 0; i < 
nc⁄sumîs
; i++) {

46 
c⁄scou¡
[
i
] = 0;

47 
	`Pthªad_¸óã
(&
tid_c⁄sume
[
i
], 
NULL
, 
c⁄sume
, &
c⁄scou¡
[i]);

51 
i
 = 0; i < 
≈rodu˚rs
; i++) {

52 
	`Pthªad_joö
(
tid_¥odu˚
[
i
], 
NULL
);

53 
	`¥ötf
("¥odu˚∏cou¡[%d] = %d\n", 
i
, 
¥odcou¡
[i]);

55 
i
 = 0; i < 
nc⁄sumîs
; i++) {

56 
	`Pthªad_joö
(
tid_c⁄sume
[
i
], 
NULL
);

57 
	`¥ötf
("c⁄sumî cou¡[%d] = %d\n", 
i
, 
c⁄scou¡
[i]);

60 
	`Sem_de°roy
(&
sh¨ed
.
muãx
);

61 
	`Sem_de°roy
(&
sh¨ed
.
√m±y
);

62 
	`Sem_de°roy
(&
sh¨ed
.
n°‹ed
);

63 
	`exô
(0);

64 
	}
}

69 
	$¥odu˚
(*
¨g
)

72 
	`Sem_waô
(&
sh¨ed
.
√m±y
);

73 
	`Sem_waô
(&
sh¨ed
.
muãx
);

75 i‡(
sh¨ed
.
≈ut
 >
nôems
) {

76 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

77 
	`Sem_po°
(&
sh¨ed
.
√m±y
);

78 
	`Sem_po°
(&
sh¨ed
.
muãx
);

79 (
NULL
);

82 
sh¨ed
.
buff
[sh¨ed.
≈ut
 % 
NBUFF
] = sh¨ed.
≈utvÆ
;

83 
sh¨ed
.
≈ut
++;

84 
sh¨ed
.
≈utvÆ
++;

86 
	`Sem_po°
(&
sh¨ed
.
muãx
);

87 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

88 *((*Ë
¨g
) += 1;

90 
	}
}

95 
	$c⁄sume
(*
¨g
)

97 
i
;

100 
	`Sem_waô
(&
sh¨ed
.
n°‹ed
);

101 
	`Sem_waô
(&
sh¨ed
.
muãx
);

103 i‡(
sh¨ed
.
ngë
 >
nôems
) {

104 
	`Sem_po°
(&
sh¨ed
.
n°‹ed
);

105 
	`Sem_po°
(&
sh¨ed
.
muãx
);

106 (
NULL
);

109 
i
 = 
sh¨ed
.
ngë
 % 
NBUFF
;

110 i‡(
sh¨ed
.
buff
[
i
] !sh¨ed.
ngëvÆ
)

111 
	`¥ötf
("îr‹: buff[%d] = %d\n", 
i
, 
sh¨ed
.
buff
[i]);

112 
sh¨ed
.
ngë
++;

113 
sh¨ed
.
ngëvÆ
++;

115 
	`Sem_po°
(&
sh¨ed
.
muãx
);

116 
	`Sem_po°
(&
sh¨ed
.
√m±y
);

117 *((*Ë
¨g
) += 1;

119 
	}
}

	@pxsem/semcreate.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
Êags
;

7 
£m_t
 *
£m
;

8 
vÆue
;

10 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

11 
vÆue
 = 1;

12  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "ei:")) != -1) {

13 
c
) {

15 
Êags
 |
O_EXCL
;

19 
vÆue
 = 
	`©oi
(
›èrg
);

23 i‡(
›töd
 !
¨gc
 - 1)

24 
	`îr_quô
("usage: semcreate [ -e ] [ -i initalvalue ] <name>");

26 
£m
 = 
	`Sem_›í
(
¨gv
[
›töd
], 
Êags
, 
FILE_MODE
, 
vÆue
);

28 
	`Sem_˛o£
(
£m
);

29 
	`exô
(0);

30 
	}
}

	@pxsem/semgetvalue.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
£m_t
 *
£m
;

7 
vÆ
;

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage: semgetvalue <name>");

12 
£m
 = 
	`Sem_›í
(
¨gv
[1], 0);

13 
	`Sem_gëvÆue
(
£m
, &
vÆ
);

14 
	`¥ötf
("vÆuê%d\n", 
vÆ
);

16 
	`exô
(0);

17 
	}
}

	@pxsem/sempost.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
£m_t
 *
£m
;

7 
vÆ
;

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage: sempost <name>");

12 
£m
 = 
	`Sem_›í
(
¨gv
[1], 0);

13 
	`Sem_po°
(
£m
);

14 
	`Sem_gëvÆue
(
£m
, &
vÆ
);

15 
	`¥ötf
("vÆuê%d\n", 
vÆ
);

17 
	`exô
(0);

18 
	}
}

	@pxsem/semsysconf.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
	`¥ötf
("SEM_NSEMS_MAX = %ld, SEM_VALUE_MAX = %ld\n",

7 
	`Sysc⁄f
(
_SC_SEM_NSEMS_MAX
), Sysc⁄f(
_SC_SEM_VALUE_MAX
));

8 
	`exô
(0);

9 
	}
}

	@pxsem/semunlink.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 i‡(
¨gc
 != 2)

7 
	`îr_quô
("usage: semunlink <name>");

9 
	`Sem_u∆ök
(
¨gv
[1]);

11 
	`exô
(0);

12 
	}
}

	@pxsem/semwait.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
£m_t
 *
£m
;

7 
vÆ
;

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage: semwait <name>");

12 
£m
 = 
	`Sem_›í
(
¨gv
[1], 0);

13 
	`Sem_waô
(
£m
);

14 
	`Sem_gëvÆue
(
£m
, &
vÆ
);

15 
	`¥ötf
("pid %ld ha†£m≠h‹e, vÆuê%d\n", (Ë
	`gëpid
(), 
vÆ
);

17 
	`∑u£
();

18 
	`exô
(0);

19 
	}
}

	@pxsem/testeintr.c

1 
	~"u≈ùc.h
"

3 
	#NAME
 "ã°eöå"

	)

5 
sig_Ærm
();

8 
	$maö
(
¨gc
, **
¨gv
)

10 
£m_t
 *
£m1
, 
£m2
;

13 
	`£m_u∆ök
(
	`Px_ùc_«me
(
NAME
));

14 
£m1
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
NAME
), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
,

15 
FILE_MODE
, 0);

17 
	`Sig«l
(
SIGALRM
, 
sig_Ærm
);

18 
	`Æ¨m
(2);

19 i‡(
	`£m_waô
(
£m1
) == 0)

20 
	`¥ötf
("sem_waitÑeturned 0?\n");

22 
	`îr_ªt
("sem_waitÉrror");

23 
	`Sem_˛o£
(
£m1
);

26 
	`Sem_öô
(&
£m2
, 1, 0);

27 
	`Æ¨m
(2);

28 i‡(
	`£m_waô
(&
£m2
) == 0)

29 
	`¥ötf
("sem_waitÑeturned 0?\n");

31 
	`îr_ªt
("sem_waitÉrror");

32 
	`Sem_de°roy
(&
£m2
);

34 
	`exô
(0);

35 
	}
}

38 
	$sig_Ærm
(
signo
)

40 
	`¥ötf
("SIGALRM caught\n");

42 
	}
}

	@pxsem/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@pxshm/client1.c

1 
	~"u≈ùc.h
"

3 
	sshm°ru˘
 {

4 
	mcou¡
;

6 
£m_t
 *
	gmuãx
;

9 
	$maö
(
¨gc
, **
¨gv
)

11 
fd
, 
i
, 
∆o›
;

12 
pid_t
 
pid
;

13 
shm°ru˘
 *
±r
;

15 i‡(
¨gc
 != 4)

16 
	`îr_quô
("usage: client1 <shmname> <semname> <#loops>");

17 
∆o›
 = 
	`©oi
(
¨gv
[3]);

19 
fd
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
¨gv
[1]), 
O_RDWR
, 
FILE_MODE
);

20 
±r
 = 
	`Mm≠
(
NULL
, (
shm°ru˘
), 
PROT_READ
 | 
PROT_WRITE
,

21 
MAP_SHARED
, 
fd
, 0);

22 
	`Clo£
(
fd
);

24 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
¨gv
[2]), 0);

26 
pid
 = 
	`gëpid
();

27 
i
 = 0; i < 
∆o›
; i++) {

28 
	`Sem_waô
(
muãx
);

29 
	`¥ötf
("pid %ld: %d\n", (Ë
pid
, 
±r
->
cou¡
++);

30 
	`Sem_po°
(
muãx
);

32 
	`exô
(0);

33 
	}
}

	@pxshm/client2.c

1 
	~"˛i£rv2.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
, 
i
, 
∆o›
, 
nu£c
;

7 
pid_t
 
pid
;

8 
mesg
[
MESGSIZE
];

9 
off£t
;

10 
shm°ru˘
 *
±r
;

12 i‡(
¨gc
 != 4)

13 
	`îr_quô
("usage: client2 <name> <#loops> <#usec>");

14 
∆o›
 = 
	`©oi
(
¨gv
[2]);

15 
nu£c
 = 
	`©oi
(
¨gv
[3]);

18 
fd
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
¨gv
[1]), 
O_RDWR
, 
FILE_MODE
);

19 
±r
 = 
	`Mm≠
(
NULL
, (
shm°ru˘
), 
PROT_READ
 | 
PROT_WRITE
,

20 
MAP_SHARED
, 
fd
, 0);

21 
	`Clo£
(
fd
);

23 
pid
 = 
	`gëpid
();

24 
i
 = 0; i < 
∆o›
; i++) {

25 
	`SÀï_us
(
nu£c
);

26 
	`¢¥ötf
(
mesg
, 
MESGSIZE
, "pid %ld: mesßgê%d", (Ë
pid
, 
i
);

28 i‡(
	`£m_åywaô
(&
±r
->
√m±y
) == -1) {

29 i‡(
î∫o
 =
EAGAIN
) {

30 
	`Sem_waô
(&
±r
->
novîÊowmuãx
);

31 
±r
->
novîÊow
++;

32 
	`Sem_po°
(&
±r
->
novîÊowmuãx
);

35 
	`îr_sys
("sem_trywaitÉrror");

37 
	`Sem_waô
(&
±r
->
muãx
);

38 
off£t
 = 
±r
->
msgoff
[±r->
≈ut
];

39 i‡(++(
±r
->
≈ut
Ë>
NMESG
)

40 
±r
->
≈ut
 = 0;

41 
	`Sem_po°
(&
±r
->
muãx
);

42 
	`°r˝y
(&
±r
->
msgd©a
[
off£t
], 
mesg
);

43 
	`Sem_po°
(&
±r
->
n°‹ed
);

45 
	`exô
(0);

46 
	}
}

	@pxshm/cliserv2.h

1 
	~"u≈ùc.h
"

3 
	#MESGSIZE
 256

	)

4 
	#NMESG
 16

	)

6 
	sshm°ru˘
 {

7 
£m_t
 
	mmuãx
;

8 
£m_t
 
	m√m±y
;

9 
£m_t
 
	mn°‹ed
;

10 
	m≈ut
;

11 
	mnovîÊow
;

12 
£m_t
 
	mnovîÊowmuãx
;

13 
	mmsgoff
[
NMESG
];

14 
	mmsgd©a
[
NMESG
 * 
MESGSIZE
];

	@pxshm/server1.c

1 
	~"u≈ùc.h
"

3 
	sshm°ru˘
 {

4 
	mcou¡
;

6 
£m_t
 *
	gmuãx
;

9 
	$maö
(
¨gc
, **
¨gv
)

11 
fd
;

12 
shm°ru˘
 *
±r
;

14 i‡(
¨gc
 != 3)

15 
	`îr_quô
("usage: server1 <shmname> <semname>");

17 
	`shm_u∆ök
(
	`Px_ùc_«me
(
¨gv
[1]));

19 
fd
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
¨gv
[1]), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
);

20 
	`Fåunˇã
(
fd
, (
shm°ru˘
));

21 
±r
 = 
	`Mm≠
(
NULL
, (
shm°ru˘
), 
PROT_READ
 | 
PROT_WRITE
,

22 
MAP_SHARED
, 
fd
, 0);

23 
	`Clo£
(
fd
);

25 
	`£m_u∆ök
(
	`Px_ùc_«me
(
¨gv
[2]));

26 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
¨gv
[2]), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 1);

27 
	`Sem_˛o£
(
muãx
);

29 
	`exô
(0);

30 
	}
}

	@pxshm/server2.c

1 
	~"˛i£rv2.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
, 
ödex
, 
œ°novîÊow
, 
ãmp
;

7 
off£t
;

8 
shm°ru˘
 *
±r
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: server2 <name>");

14 
	`shm_u∆ök
(
	`Px_ùc_«me
(
¨gv
[1]));

15 
fd
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
¨gv
[1]), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
);

16 
±r
 = 
	`Mm≠
(
NULL
, (
shm°ru˘
), 
PROT_READ
 | 
PROT_WRITE
,

17 
MAP_SHARED
, 
fd
, 0);

18 
	`Fåunˇã
(
fd
, (
shm°ru˘
));

19 
	`Clo£
(
fd
);

22 
ödex
 = 0; index < 
NMESG
; index++)

23 
±r
->
msgoff
[
ödex
] = index * 
MESGSIZE
;

26 
	`Sem_öô
(&
±r
->
muãx
, 1, 1);

27 
	`Sem_öô
(&
±r
->
√m±y
, 1, 
NMESG
);

28 
	`Sem_öô
(&
±r
->
n°‹ed
, 1, 0);

29 
	`Sem_öô
(&
±r
->
novîÊowmuãx
, 1, 1);

32 
ödex
 = 0;

33 
œ°novîÊow
 = 0;

35 
	`Sem_waô
(&
±r
->
n°‹ed
);

36 
	`Sem_waô
(&
±r
->
muãx
);

37 
off£t
 = 
±r
->
msgoff
[
ödex
];

38 
	`¥ötf
("ödex = %d: %s\n", 
ödex
, &
±r
->
msgd©a
[
off£t
]);

39 i‡(++
ödex
 >
NMESG
)

40 
ödex
 = 0;

41 
	`Sem_po°
(&
±r
->
muãx
);

42 
	`Sem_po°
(&
±r
->
√m±y
);

44 
	`Sem_waô
(&
±r
->
novîÊowmuãx
);

45 
ãmp
 = 
±r
->
novîÊow
;

46 
	`Sem_po°
(&
±r
->
novîÊowmuãx
);

47 i‡(
ãmp
 !
œ°novîÊow
) {

48 
	`¥ötf
("novîÊow = %d\n", 
ãmp
);

49 
œ°novîÊow
 = 
ãmp
;

53 
	`exô
(0);

54 
	}
}

	@pxshm/shmcreate.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
fd
, 
Êags
;

7 *
±r
;

8 
off_t
 
Àngth
;

10 
Êags
 = 
O_RDWR
 | 
O_CREAT
;

11  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "e")) != -1) {

12 
c
) {

14 
Êags
 |
O_EXCL
;

18 i‡(
›töd
 !
¨gc
 - 2)

19 
	`îr_quô
("usage: shmcreate [ -e ] <name> <length>");

20 
Àngth
 = 
	`©oi
(
¨gv
[
›töd
 + 1]);

22 
fd
 = 
	`Shm_›í
(
¨gv
[
›töd
], 
Êags
, 
FILE_MODE
);

23 
	`Fåunˇã
(
fd
, 
Àngth
);

25 
±r
 = 
	`Mm≠
(
NULL
, 
Àngth
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

27 
	`exô
(0);

28 
	}
}

	@pxshm/shmread.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
fd
;

7 
°©
 stat;

8 
c
, *
±r
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: shmread <name>");

14 
fd
 = 
	`Shm_›í
(
¨gv
[1], 
O_RDONLY
, 
FILE_MODE
);

15 
	`F°©
(
fd
, &
°©
);

16 
±r
 = 
	`Mm≠
(
NULL
, 
°©
.
°_size
, 
PROT_READ
,

17 
MAP_SHARED
, 
fd
, 0);

18 
	`Clo£
(
fd
);

21 
i
 = 0; i < 
°©
.
°_size
; i++)

22 i‡–(
c
 = *
±r
++Ë!(
i
 % 256))

23 
	`îr_ªt
("±r[%d] = %d", 
i
, 
c
);

25 
	`exô
(0);

26 
	}
}

	@pxshm/shmunlink.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 i‡(
¨gc
 != 2)

7 
	`îr_quô
("usage: shmunlink <name>");

9 
	`Shm_u∆ök
(
¨gv
[1]);

11 
	`exô
(0);

12 
	}
}

	@pxshm/shmwrite.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
fd
;

7 
°©
 stat;

8 *
±r
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: shmwrite <name>");

14 
fd
 = 
	`Shm_›í
(
¨gv
[1], 
O_RDWR
, 
FILE_MODE
);

15 
	`F°©
(
fd
, &
°©
);

16 
±r
 = 
	`Mm≠
(
NULL
, 
°©
.
°_size
, 
PROT_READ
 | 
PROT_WRITE
,

17 
MAP_SHARED
, 
fd
, 0);

18 
	`Clo£
(
fd
);

21 
i
 = 0; i < 
°©
.
°_size
; i++)

22 *
±r
++ = 
i
 % 256;

24 
	`exô
(0);

25 
	}
}

	@pxshm/test1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
, 
i
;

7 *
±r
;

8 
size_t
 
shmsize
, 
mm≠size
, 
∑gesize
;

10 i‡(
¨gc
 != 4)

11 
	`îr_quô
("usage:Åest1 <name> <shmsize> <mmapsize>");

12 
shmsize
 = 
	`©oi
(
¨gv
[2]);

13 
mm≠size
 = 
	`©oi
(
¨gv
[3]);

16 
fd
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
¨gv
[1]), 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
,

17 
FILE_MODE
);

18 
	`Fåunˇã
(
fd
, 
shmsize
);

20 
±r
 = 
	`Mm≠
(
NULL
, 
mm≠size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

21 
	`Clo£
(
fd
);

23 
∑gesize
 = 
	`Sysc⁄f
(
_SC_PAGESIZE
);

24 
	`¥ötf
("PAGESIZE = %ld\n", (Ë
∑gesize
);

26 
i
 = 0; i < 
	`max
(
shmsize
, 
mm≠size
); i +
∑gesize
) {

27 
	`¥ötf
("±r[%d] = %d\n", 
i
, 
±r
[i]);

28 
±r
[
i
] = 1;

29 
	`¥ötf
("±r[%d] = %d\n", 
i
 + 
∑gesize
 - 1, 
±r
[i +Öagesize - 1]);

30 
±r
[
i
 + 
∑gesize
 - 1] = 1;

32 
	`¥ötf
("±r[%d] = %d\n", 
i
, 
±r
[i]);

34 
	`exô
(0);

35 
	}
}

	@pxshm/test2.c

1 
	~"u≈ùc.h
"

3 
	#FILE
 "ã°.d©a"

	)

4 
	#SIZE
 32768

	)

7 
	$maö
(
¨gc
, **
¨gv
)

9 
fd
, 
i
;

10 *
±r
;

13 
fd
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
FILE
), 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
FILE_MODE
);

14 
±r
 = 
	`Mm≠
(
NULL
, 
SIZE
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

16 
i
 = 4096; i <
SIZE
; i += 4096) {

17 
	`¥ötf
("£âög shm sizêtÿ%d\n", 
i
);

18 
	`Fåunˇã
(
fd
, 
i
);

19 
	`¥ötf
("±r[%d] = %d\n", 
i
-1, 
±r
[i-1]);

22 
	`exô
(0);

23 
	}
}

	@pxshm/test3.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd1
, 
fd2
, *
±r1
, *
±r2
;

7 
pid_t
 
chûdpid
;

8 
°©
 stat;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage:Åest3 <name>");

13 
	`shm_u∆ök
(
	`Px_ùc_«me
(
¨gv
[1]));

14 
fd1
 = 
	`Shm_›í
(
	`Px_ùc_«me
(
¨gv
[1]), 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
);

15 
	`Fåunˇã
(
fd1
, ());

16 
fd2
 = 
	`O≥n
("/ëc/mŸd", 
O_RDONLY
);

17 
	`F°©
(
fd2
, &
°©
);

19 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

21 
±r2
 = 
	`Mm≠
(
NULL
, 
°©
.
°_size
, 
PROT_READ
, 
MAP_SHARED
, 
fd2
, 0);

22 
±r1
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
,

23 
MAP_SHARED
, 
fd1
, 0);

24 
	`¥ötf
("chûd: shmÖå = %p, mŸdÖå = %p\n", 
±r1
, 
±r2
);

26 
	`¶ìp
(5);

27 
	`¥ötf
("sh¨ed mem‹y i¡egî = %d\n", *
±r1
);

28 
	`exô
(0);

31 
±r1
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd1
, 0);

32 
±r2
 = 
	`Mm≠
(
NULL
, 
°©
.
°_size
, 
PROT_READ
, 
MAP_SHARED
, 
fd2
, 0);

33 
	`¥ötf
("∑ª¡: shmÖå = %p, mŸdÖå = %p\n", 
±r1
, 
±r2
);

34 *
±r1
 = 777;

35 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

37 
	`exô
(0);

38 
	}
}

	@pxshm/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@rtsignals/test1.c

1 
	~"u≈ùc.h
"

3 
sig_π
(, 
sigöfo_t
 *, *);

6 
	$maö
(
¨gc
, **
¨gv
)

8 
i
, 
j
;

9 
pid_t
 
pid
;

10 
sig£t_t
 
√w£t
;

11 
sigvÆ
 
vÆ
;

13 
	`¥ötf
("SIGRTMIN = %d, SIGRTMAX = %d\n", (Ë
SIGRTMIN
, (Ë
SIGRTMAX
);

15 i‡–(
pid
 = 
	`F‹k
()) == 0) {

17 
	`Sigem±y£t
(&
√w£t
);

18 
	`Sigadd£t
(&
√w£t
, 
SIGRTMAX
);

19 
	`Sigadd£t
(&
√w£t
, 
SIGRTMAX
 - 1);

20 
	`Sigadd£t
(&
√w£t
, 
SIGRTMAX
 - 2);

21 
	`Sig¥ocmask
(
SIG_BLOCK
, &
√w£t
, 
NULL
);

24 
	`Sig«l_π
(
SIGRTMAX
, 
sig_π
);

25 
	`Sig«l_π
(
SIGRTMAX
 - 1, 
sig_π
);

26 
	`Sig«l_π
(
SIGRTMAX
 - 2, 
sig_π
);

28 
	`¶ìp
(6);

30 
	`Sig¥ocmask
(
SIG_UNBLOCK
, &
√w£t
, 
NULL
);

31 
	`¶ìp
(3);

32 
	`exô
(0);

36 
	`¶ìp
(3);

37 
i
 = 
SIGRTMAX
; i >= SIGRTMAX - 2; i--) {

38 
j
 = 0; j <= 2; j++) {

39 
vÆ
.
sivÆ_öt
 = 
j
;

40 
	`Sigqueue
(
pid
, 
i
, 
vÆ
);

41 
	`¥ötf
("£¡ sig«»%d, vÆ = %d\n", 
i
, 
j
);

44 
	`exô
(0);

45 
	}
}

48 
	$sig_π
(
signo
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

50 
	`¥ötf
("received signal #%d, code = %d, ival = %d\n",

51 
signo
, 
öfo
->
si_code
, info->
si_vÆue
.
sivÆ_öt
);

52 
	}
}

	@rtsignals/test2.c

6 
	~"u≈ùc.h
"

8 
sig_π
(, 
sigöfo_t
 *, *);

11 
	$maö
(
¨gc
, **
¨gv
)

13 
j
;

14 
pid_t
 
pid
;

15 
sig£t_t
 
√w£t
, 
ﬁd£t
;

16 
sigvÆ
 
vÆ
;

18 i‡–(
pid
 = 
	`F‹k
()) == 0) {

20 
	`Sigfûl£t
(&
√w£t
);

21 
	`Sigdñ£t
(&
√w£t
, 
SIGALRM
);

22 
	`Sig¥ocmask
(
SIG_SETMASK
, &
√w£t
, &
ﬁd£t
);

25 
	`Sig«l_π
(
SIGUSR1
, 
sig_π
);

26 
	`Sig«l_π
(
SIGTERM
, 
sig_π
);

28 
	`¶ìp
(6);

30 
	`Sig¥ocmask
(
SIG_SETMASK
, &
ﬁd£t
, 
NULL
);

31 
	`¶ìp
(3);

32 
	`exô
(0);

35 
	`¶ìp
(3);

37 
j
 = 0; j <= 6; j++) {

38 
vÆ
.
sivÆ_öt
 = 
j
;

39 
	`Sigqueue
(
pid
, 
SIGUSR1
, 
vÆ
);

40 
	`¥ötf
("£¡ SIGUSR1 (%d), vÆ = %d\n", 
SIGUSR1
, 
j
);

42 
j
 = 0; j <= 6; j++) {

43 
vÆ
.
sivÆ_öt
 = 
j
;

44 
	`Sigqueue
(
pid
, 
SIGTERM
, 
vÆ
);

45 
	`¥ötf
("£¡ SIGTERM (%d), vÆ = %d\n", 
SIGTERM
, 
j
);

47 
	`Waôpid
(
pid
, 
NULL
, 0);

48 
	`exô
(0);

49 
	}
}

52 
	$sig_π
(
signo
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

54 
	`¥ötf
("received signal #%d, code = %d, ival = %d\n",

55 
signo
, 
öfo
->
si_code
, info->
si_vÆue
.
sivÆ_öt
);

56 
	}
}

	@rtsignals/test3.c

5 
	~"u≈ùc.h
"

7 
sig_π
(, 
sigöfo_t
 *, *);

10 
	$maö
(
¨gc
, **
¨gv
)

12 
j
;

13 
pid_t
 
pid
;

14 
sig£t_t
 
√w£t
, 
ﬁd£t
;

15 
sigvÆ
 
vÆ
;

17 i‡–(
pid
 = 
	`F‹k
()) == 0) {

19 
	`Sigfûl£t
(&
√w£t
);

20 
	`Sigdñ£t
(&
√w£t
, 
SIGALRM
);

21 
	`Sig¥ocmask
(
SIG_SETMASK
, &
√w£t
, &
ﬁd£t
);

24 
	`Sig«l_π
(
SIGRTMIN
, 
sig_π
);

26 
	`¶ìp
(6);

28 
	`Sig¥ocmask
(
SIG_SETMASK
, &
ﬁd£t
, 
NULL
);

29 
	`¶ìp
(3);

30 
	`exô
(0);

33 
	`¶ìp
(3);

35 
j
 = 0; j <= 1000000; j++) {

36 
vÆ
.
sivÆ_öt
 = 
j
;

37 
	`Sigqueue
(
pid
, 
SIGRTMIN
, 
vÆ
);

38 
	`¥ötf
("£¡ SIGRTMIN (%ld), vÆ = %d\n", (Ë
SIGRTMIN
, 
j
);

40 
	`Waôpid
(
pid
, 
NULL
, 0);

41 
	`exô
(0);

42 
	}
}

45 
	$sig_π
(
signo
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

47 
	`¥ötf
("received signal #%d, code = %d, ival = %d\n",

48 
signo
, 
öfo
->
si_code
, info->
si_vÆue
.
sivÆ_öt
);

49 
	}
}

	@rtsignals/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@shm/incr1.c

1 
	~"u≈ùc.h
"

3 
	#SEM_NAME
 "my£m"

	)

5 
	gcou¡
 = 0;

8 
	$maö
(
¨gc
, **
¨gv
)

10 
i
, 
∆o›
;

11 
£m_t
 *
muãx
;

13 i‡(
¨gc
 != 2)

14 
	`îr_quô
("usage: incr1 <#loops>");

15 
∆o›
 = 
	`©oi
(
¨gv
[1]);

18 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 1);

19 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NAME
));

21 
	`£tbuf
(
°dout
, 
NULL
);

22 i‡(
	`F‹k
() == 0) {

23 
i
 = 0; i < 
∆o›
; i++) {

24 
	`Sem_waô
(
muãx
);

25 
	`¥ötf
("chûd: %d\n", 
cou¡
++);

26 
	`Sem_po°
(
muãx
);

28 
	`exô
(0);

32 
i
 = 0; i < 
∆o›
; i++) {

33 
	`Sem_waô
(
muãx
);

34 
	`¥ötf
("∑ª¡: %d\n", 
cou¡
++);

35 
	`Sem_po°
(
muãx
);

37 
	`exô
(0);

38 
	}
}

	@shm/incr2.c

1 
	~"u≈ùc.h
"

3 
	#SEM_NAME
 "my£m"

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
fd
, 
i
, 
∆o›
, 
zîo
 = 0;

9 *
±r
;

10 
£m_t
 *
muãx
;

12 i‡(
¨gc
 != 3)

13 
	`îr_quô
("usage: incr2 <pathname> <#loops>");

14 
∆o›
 = 
	`©oi
(
¨gv
[2]);

17 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

18 
	`Wrôe
(
fd
, &
zîo
, ());

19 
±r
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

20 
	`Clo£
(
fd
);

23 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 1);

24 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NAME
));

26 
	`£tbuf
(
°dout
, 
NULL
);

27 i‡(
	`F‹k
() == 0) {

28 
i
 = 0; i < 
∆o›
; i++) {

29 
	`Sem_waô
(
muãx
);

30 
	`¥ötf
("chûd: %d\n", (*
±r
)++);

31 
	`Sem_po°
(
muãx
);

33 
	`exô
(0);

37 
i
 = 0; i < 
∆o›
; i++) {

38 
	`Sem_waô
(
muãx
);

39 
	`¥ötf
("∑ª¡: %d\n", (*
±r
)++);

40 
	`Sem_po°
(
muãx
);

42 
	`exô
(0);

43 
	}
}

	@shm/incr2private.c

1 
	~"u≈ùc.h
"

3 
	#SEM_NAME
 "my£m"

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
fd
, 
i
, 
∆o›
, 
zîo
 = 0;

9 *
±r
;

10 
£m_t
 *
muãx
;

12 i‡(
¨gc
 != 3)

13 
	`îr_quô
("usage: incr2 <pathname> <#loops>");

14 
∆o›
 = 
	`©oi
(
¨gv
[2]);

17 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

18 
	`Wrôe
(
fd
, &
zîo
, ());

19 
±r
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

20 
	`Clo£
(
fd
);

23 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 1);

24 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NAME
));

26 
	`£tbuf
(
°dout
, 
NULL
);

27 i‡(
	`F‹k
() == 0) {

28 
i
 = 0; i < 
∆o›
; i++) {

29 
	`Sem_waô
(
muãx
);

30 
	`¥ötf
("chûd: %d\n", (*
±r
)++);

31 
	`Sem_po°
(
muãx
);

33 
	`exô
(0);

37 
i
 = 0; i < 
∆o›
; i++) {

38 
	`Sem_waô
(
muãx
);

39 
	`¥ötf
("∑ª¡: %d\n", (*
±r
)++);

40 
	`Sem_po°
(
muãx
);

42 
	`exô
(0);

43 
	}
}

	@shm/incr3.c

1 
	~"u≈ùc.h
"

3 
	ssh¨ed
 {

4 
£m_t
 
	mmuãx
;

5 
	mcou¡
;

6 } 
	gsh¨ed
;

9 
	$maö
(
¨gc
, **
¨gv
)

11 
fd
, 
i
, 
∆o›
;

12 
sh¨ed
 *
±r
;

14 i‡(
¨gc
 != 3)

15 
	`îr_quô
("usage: incr3 <pathname> <#loops>");

16 
∆o›
 = 
	`©oi
(
¨gv
[2]);

19 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
, 
FILE_MODE
);

20 
	`Wrôe
(
fd
, &
sh¨ed
, (shared));

21 
±r
 = 
	`Mm≠
(
NULL
, (
sh¨ed
), 
PROT_READ
 | 
PROT_WRITE
,

22 
MAP_SHARED
, 
fd
, 0);

23 
	`Clo£
(
fd
);

26 
	`Sem_öô
(&
±r
->
muãx
, 1, 1);

28 
	`£tbuf
(
°dout
, 
NULL
);

29 i‡(
	`F‹k
() == 0) {

30 
i
 = 0; i < 
∆o›
; i++) {

31 
	`Sem_waô
(&
±r
->
muãx
);

32 
	`¥ötf
("chûd: %d\n", 
±r
->
cou¡
++);

33 
	`Sem_po°
(&
±r
->
muãx
);

35 
	`exô
(0);

39 
i
 = 0; i < 
∆o›
; i++) {

40 
	`Sem_waô
(&
±r
->
muãx
);

41 
	`¥ötf
("∑ª¡: %d\n", 
±r
->
cou¡
++);

42 
	`Sem_po°
(&
±r
->
muãx
);

44 
	`exô
(0);

45 
	}
}

	@shm/incr_dev_zero.c

1 
	~"u≈ùc.h
"

3 
	#SEM_NAME
 "my£m"

	)

7 
	$maö
(
¨gc
, **
¨gv
)

9 
fd
, 
i
, 
∆o›
;

10 *
±r
;

11 
£m_t
 *
muãx
;

13 i‡(
¨gc
 != 2)

14 
	`îr_quô
("usage: incr_dev_zero <#loops>");

15 
∆o›
 = 
	`©oi
(
¨gv
[1]);

18 
fd
 = 
	`O≥n
("/dev/zîo", 
O_RDWR
);

19 
±r
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

20 
	`Clo£
(
fd
);

24 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 1);

25 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NAME
));

27 
	`£tbuf
(
°dout
, 
NULL
);

28 i‡(
	`F‹k
() == 0) {

29 
i
 = 0; i < 
∆o›
; i++) {

30 
	`Sem_waô
(
muãx
);

31 
	`¥ötf
("chûd: %d\n", (*
±r
)++);

32 
	`Sem_po°
(
muãx
);

34 
	`exô
(0);

38 
i
 = 0; i < 
∆o›
; i++) {

39 
	`Sem_waô
(
muãx
);

40 
	`¥ötf
("∑ª¡: %d\n", (*
±r
)++);

41 
	`Sem_po°
(
muãx
);

43 
	`exô
(0);

44 
	}
}

	@shm/incr_map_anon.c

1 
	~"u≈ùc.h
"

3 
	#SEM_NAME
 "my£m"

	)

7 
	$maö
(
¨gc
, **
¨gv
)

9 
i
, 
∆o›
;

10 *
±r
;

11 
£m_t
 *
muãx
;

13 i‡(
¨gc
 != 2)

14 
	`îr_quô
("usage: incr_map_anon <#loops>");

15 
∆o›
 = 
	`©oi
(
¨gv
[1]);

18 
±r
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
,

19 
MAP_SHARED
 | 
MAP_ANON
, -1, 0);

23 
muãx
 = 
	`Sem_›í
(
	`Px_ùc_«me
(
SEM_NAME
), 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
, 1);

24 
	`Sem_u∆ök
(
	`Px_ùc_«me
(
SEM_NAME
));

26 
	`£tbuf
(
°dout
, 
NULL
);

27 i‡(
	`F‹k
() == 0) {

28 
i
 = 0; i < 
∆o›
; i++) {

29 
	`Sem_waô
(
muãx
);

30 
	`¥ötf
("chûd: %d\n", (*
±r
)++);

31 
	`Sem_po°
(
muãx
);

33 
	`exô
(0);

37 
i
 = 0; i < 
∆o›
; i++) {

38 
	`Sem_waô
(
muãx
);

39 
	`¥ötf
("∑ª¡: %d\n", (*
±r
)++);

40 
	`Sem_po°
(
muãx
);

42 
	`exô
(0);

43 
	}
}

	@shm/svmsgread.c

1 
	~"u≈ùc.h
"

3 
	#MAXMSG
 (8192 + ())

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
pùe1
[2], 
pùe2
[2], 
mqid
;

9 
c
;

10 
pid_t
 
chûdpid
;

11 
fd_£t
 
r£t
;

12 
ssize_t
 
n
, 
ƒód
;

13 
msgbuf
 *
buff
;

15 i‡(
¨gc
 != 2)

16 
	`îr_quô
("usage: svmsgread <pathname>");

18 
	`Pùe
(
pùe1
);

19 
	`Pùe
(
pùe2
);

21 
buff
 = 
	`My_shm
(
MAXMSG
);

23 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

24 
	`Clo£
(
pùe1
[1]);

25 
	`Clo£
(
pùe2
[0]);

27 
mqid
 = 
	`Msggë
(
	`Ftok
(
¨gv
[1], 0), 
MSG_R
);

30 
ƒód
 = 
	`Msgrcv
(
mqid
, 
buff
, 
MAXMSG
, 0, 0);

31 
	`Wrôe
(
pùe2
[1], &
ƒód
, (
ssize_t
));

34 i‡–(
n
 = 
	`Ród
(
pùe1
[0], &
c
, 1)) != 1)

35 
	`îr_quô
("chûd:Ñód o¿pùêªtu∫ed %d", 
n
);

37 
	`exô
(0);

41 
	`Clo£
(
pùe1
[0]);

42 
	`Clo£
(
pùe2
[1]);

44 
	`FD_ZERO
(&
r£t
);

45 
	`FD_SET
(
pùe2
[0], &
r£t
);

47 i‡–(
n
 = 
	`£À˘
(
pùe2
[0] + 1, &
r£t
, 
NULL
, NULL, NULL)) != 1)

48 
	`îr_sys
("£À˘Ñëu∫ed %d", 
n
);

49 i‡(
	`FD_ISSET
(
pùe2
[0], &
r£t
)) {

50 
n
 = 
	`Ród
(
pùe2
[0], &
ƒód
, (
ssize_t
));

52 i‡(
n
 !(
ssize_t
))

53 
	`îr_quô
("∑ª¡:Ñód o¿pùêªtu∫ed %d", 
n
);

55 
	`¥ötf
("ªad %d byãs,Åy≥ = %ld\n", 
ƒód
, 
buff
->
mty≥
);

56 
	`Wrôe
(
pùe1
[1], &
c
, 1);

59 
	`îr_quô
("pipe2[0]ÇotÑeady");

62 
	`Kûl
(
chûdpid
, 
SIGTERM
);

63 
	`exô
(0);

64 
	}
}

	@shm/test1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
, 
i
;

7 *
±r
;

8 
size_t
 
fûesize
, 
mm≠size
, 
∑gesize
;

10 i‡(
¨gc
 != 4)

11 
	`îr_quô
("usage:Åest1 <pathname> <filesize> <mmapsize>");

12 
fûesize
 = 
	`©oi
(
¨gv
[2]);

13 
mm≠size
 = 
	`©oi
(
¨gv
[3]);

16 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
FILE_MODE
);

17 
	`L£ek
(
fd
, 
fûesize
-1, 
SEEK_SET
);

18 
	`Wrôe
(
fd
, "", 1);

20 
±r
 = 
	`Mm≠
(
NULL
, 
mm≠size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

21 
	`Clo£
(
fd
);

23 
∑gesize
 = 
	`Sysc⁄f
(
_SC_PAGESIZE
);

24 
	`¥ötf
("PAGESIZE = %ld\n", (Ë
∑gesize
);

26 
i
 = 0; i < 
	`max
(
fûesize
, 
mm≠size
); i +
∑gesize
) {

27 
	`¥ötf
("±r[%d] = %d\n", 
i
, 
±r
[i]);

28 
±r
[
i
] = 1;

29 
	`¥ötf
("±r[%d] = %d\n", 
i
 + 
∑gesize
 - 1, 
±r
[i +Öagesize - 1]);

30 
±r
[
i
 + 
∑gesize
 - 1] = 1;

32 
	`¥ötf
("±r[%d] = %d\n", 
i
, 
±r
[i]);

34 
	`exô
(0);

35 
	}
}

	@shm/test2.c

1 
	~"u≈ùc.h
"

3 
	#FILE
 "ã°.d©a"

	)

4 
	#SIZE
 32768

	)

7 
	$maö
(
¨gc
, **
¨gv
)

9 
fd
, 
i
;

10 *
±r
;

13 
fd
 = 
	`O≥n
(
FILE
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 
FILE_MODE
);

14 
±r
 = 
	`Mm≠
(
NULL
, 
SIZE
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

16 
i
 = 4096; i <
SIZE
; i += 4096) {

17 
	`¥ötf
("£âög fûêsizêtÿ%d\n", 
i
);

18 
	`Fåunˇã
(
fd
, 
i
);

19 
	`¥ötf
("±r[%d] = %d\n", 
i
-1, 
±r
[i-1]);

22 
	`exô
(0);

23 
	}
}

	@shm/test3.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
fd
, 
i
, 
n
, 
vÆ
, *
±r
;

7 
pid_t
 
chûdpid
;

9 i‡(
¨gc
 != 2)

10 
	`îr_quô
("usage:Åest3 <pathname>");

12 
	`u∆ök
(
¨gv
[1]);

13 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 
FILE_MODE
);

14 
vÆ
 = 9999;

15 
	`Wrôe
(
fd
, &
vÆ
, ());

17 
±r
 = 
	`Mm≠
(
NULL
, (), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

18 
	`Clo£
(
fd
);

19 *
±r
 = 1;

21 i‡–(
chûdpid
 = 
	`F‹k
()) == 0) {

22 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_RDONLY
);

23 
i
 = 0; i < 10; i++) {

24 
	`L£ek
(
fd
, 0, 
SEEK_SET
);

25 i‡–(
n
 = 
	`Ród
(
fd
, &
vÆ
, ())) != ())

26 
	`îr_quô
("ªadÑëu∫ed %d", 
n
);

27 
	`¥ötf
("vÆ = %d\n", 
vÆ
);

28 
	`¶ìp
(1);

30 
	`exô
(0);

32 
	`Waôpid
(
chûdpid
, 
NULL
, 0);

34 
	`exô
(0);

35 
	}
}

	@shm/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sparc-sun-solaris2.6/config.h

3 
	#CPU_VENDOR_OS
 "•¨c-sun-sﬁ¨is2.6"

	)

6 
	#HAVE_DOOR_H
 1

	)

7 
	#HAVE_MQUEUE_H
 1

	)

8 
	#HAVE_POLL_H
 1

	)

9 
	#HAVE_PTHREAD_H
 1

	)

10 
	#HAVE_RPC_RPC_H
 1

	)

11 
	#HAVE_SEMAPHORE_H
 1

	)

12 
	#HAVE_STRINGS_H
 1

	)

13 
	#HAVE_SYS_FILIO_H
 1

	)

14 
	#HAVE_SYS_IOCTL_H
 1

	)

15 
	#HAVE_SYS_IPC_H
 1

	)

16 
	#HAVE_SYS_MMAN_H
 1

	)

17 
	#HAVE_SYS_MSG_H
 1

	)

18 
	#HAVE_SYS_SEM_H
 1

	)

19 
	#HAVE_SYS_SHM_H
 1

	)

20 
	#HAVE_SYS_SELECT_H
 1

	)

22 
	#HAVE_SYS_TIME_H
 1

	)

25 
	#TIME_WITH_SYS_TIME
 1

	)

28 
	#HAVE_BZERO
 1

	)

29 
	#HAVE_FATTACH
 1

	)

30 
	#HAVE_POLL
 1

	)

32 
	#HAVE_SIGWAIT
 1

	)

33 
	#HAVE_VALLOC
 1

	)

34 
	#HAVE_VSNPRINTF
 1

	)

37 
	#HAVE_GETHOSTNAME_PROTO
 1

	)

38 
	#HAVE_GETRUSAGE_PROTO
 1

	)

40 
	#HAVE_SHM_OPEN_PROTO
 1

	)

41 
	#HAVE_SNPRINTF_PROTO
 1

	)

42 
	#HAVE_THR_SETCONCURRENCY_PROTO
 1

	)

45 
	#HAVE_SIGINFO_T_STRUCT
 1

	)

46 
	#HAVE_TIMESPEC_STRUCT
 1

	)

50 
	#HAVE_DEV_ZERO
 1

	)

62 
	#POSIX_IPC_PREFIX
 "/"

	)

63 
	#RPCGEN_ANSIC
 1

	)

	@sunrpc/square1/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 *
ouç
;

11 i‡(
¨gc
 != 3)

12 
	`îr_quô
("usage: client <hostname> <integer-value>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
, "tcp");

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

20 
	`¥ötf
("ªsu…: %ld\n", 
ouç
->
ªs1
);

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square1/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

10 (&
out
);

11 
	}
}

	@sunrpc/square1/square.h

6 #i‚de‡
_SQUARE_H_RPCGEN


7 
	#_SQUARE_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

12 #ifde‡
__˝lu•lus


17 
	ssqu¨e_ö
 {

18 
¨g1
;

20 
squ¨e_ö
 
	tsqu¨e_ö
;

22 
	ssqu¨e_out
 {

23 
ªs1
;

25 
squ¨e_out
 
	tsqu¨e_out
;

27 
	#SQUARE_PROG
 0x31230000

	)

28 
	#SQUARE_VERS
 1

	)

30 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

31 
	#SQUAREPROC
 1

	)

32 
squ¨e_out
 * 
squ¨ïroc_1
(
squ¨e_ö
 *, 
CLIENT
 *);

33 
squ¨e_out
 * 
squ¨ïroc_1_svc
(
squ¨e_ö
 *, 
svc_ªq
 *);

34 
squ¨e_¥og_1_‰ìªsu…
 (
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

37 
	#SQUAREPROC
 1

	)

38 
squ¨e_out
 * 
squ¨ïroc_1
();

39 
squ¨e_out
 * 
squ¨ïroc_1_svc
();

40 
squ¨e_¥og_1_‰ìªsu…
 ();

45 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

46 
boﬁ_t
 
xdr_squ¨e_ö
 (
XDR
 *, 
squ¨e_ö
*);

47 
boﬁ_t
 
xdr_squ¨e_out
 (
XDR
 *, 
squ¨e_out
*);

50 
boﬁ_t
 
xdr_squ¨e_ö
 ();

51 
boﬁ_t
 
xdr_squ¨e_out
 ();

55 #ifde‡
__˝lu•lus


	@sunrpc/square1/square_clnt.c

6 
	~<mem‹y.h
>

7 
	~"squ¨e.h
"

10 
timevÆ
 
	gTIMEOUT
 = { 25, 0 };

12 
squ¨e_out
 *

13 
	$squ¨ïroc_1
(
squ¨e_ö
 *
¨gp
, 
CLIENT
 *
˛¡
)

15 
squ¨e_out
 
˛¡_ªs
;

17 
	`mem£t
((*)&
˛¡_ªs
, 0, (clnt_res));

18 i‡(
	`˛¡_ˇŒ
 (
˛¡
, 
SQUAREPROC
,

19 (
xdΩroc_t
Ë
xdr_squ¨e_ö
, (
ˇddr_t
Ë
¨gp
,

20 (
xdΩroc_t
Ë
xdr_squ¨e_out
, (
ˇddr_t
Ë&
˛¡_ªs
,

21 
TIMEOUT
Ë!
RPC_SUCCESS
) {

22  (
NULL
);

24  (&
˛¡_ªs
);

25 
	}
}

	@sunrpc/square1/square_svc.c

6 
	~"squ¨e.h
"

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<Ωc/pm≠_˛¡.h
>

10 
	~<°rög.h
>

11 
	~<mem‹y.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

15 #i‚de‡
SIG_PF


16 
	#SIG_PF
 (*)()

	)

20 
	$squ¨e_¥og_1
(
svc_ªq
 *
rq°p
, 
SVCXPRT
 *
å™•
)

23 
squ¨e_ö
 
squ¨ïroc_1_¨g
;

24 } 
¨gumít
;

25 *
ªsu…
;

26 
xdΩroc_t
 
_xdr_¨gumít
, 
_xdr_ªsu…
;

27 *(*
loˇl
)(*, 
svc_ªq
 *);

29 
rq°p
->
rq_¥oc
) {

30 
NULLPROC
:

31 (Ë
	`svc_£ndª∂y
 (
å™•
, (
xdΩroc_t
Ë
xdr_void
, (*)
NULL
);

34 
SQUAREPROC
:

35 
_xdr_¨gumít
 = (
xdΩroc_t
Ë
xdr_squ¨e_ö
;

36 
_xdr_ªsu…
 = (
xdΩroc_t
Ë
xdr_squ¨e_out
;

37 
loˇl
 = (*(*)(*, 
svc_ªq
 *)Ë
squ¨ïroc_1_svc
;

41 
	`sv˚º_n›roc
 (
å™•
);

44 
	`mem£t
 ((*)&
¨gumít
, 0,  (argument));

45 i‡(!
	`svc_gë¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

46 
	`sv˚º_decode
 (
å™•
);

49 
ªsu…
 = (*
loˇl
)((*)&
¨gumít
, 
rq°p
);

50 i‡(
ªsu…
 !
NULL
 && !
	`svc_£ndª∂y
(
å™•
, (
xdΩroc_t
Ë
_xdr_ªsu…
,Ñesult)) {

51 
	`sv˚º_sy°emîr
 (
å™•
);

53 i‡(!
	`svc_‰ì¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

54 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeárguments");

55 
	`exô
 (1);

58 
	}
}

61 
	$maö
 (
¨gc
, **
¨gv
)

63 
SVCXPRT
 *
å™•
;

65 
	`pm≠_un£t
 (
SQUARE_PROG
, 
SQUARE_VERS
);

67 
å™•
 = 
	`svcudp_¸óã
(
RPC_ANYSOCK
);

68 i‡(
å™•
 =
NULL
) {

69 
	`Ârötf
 (
°dîr
, "%s", "cannot create udp service.");

70 
	`exô
(1);

72 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_1
, 
IPPROTO_UDP
)) {

73 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS, udp).");

74 
	`exô
(1);

77 
å™•
 = 
	`sv˘˝_¸óã
(
RPC_ANYSOCK
, 0, 0);

78 i‡(
å™•
 =
NULL
) {

79 
	`Ârötf
 (
°dîr
, "%s", "cannot createÅcp service.");

80 
	`exô
(1);

82 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_1
, 
IPPROTO_TCP
)) {

83 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS,Åcp).");

84 
	`exô
(1);

87 
	`svc_run
 ();

88 
	`Ârötf
 (
°dîr
, "%s", "svc_runÑeturned");

89 
	`exô
 (1);

91 
	}
}

	@sunrpc/square1/square_xdr.c

6 
	~"squ¨e.h
"

8 
boﬁ_t


9 
	$xdr_squ¨e_ö
 (
XDR
 *
xdrs
, 
squ¨e_ö
 *
objp
)

11 
öt32_t
 *
buf
;

13 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
¨g1
))

14  
FALSE
;

15  
TRUE
;

16 
	}
}

18 
boﬁ_t


19 
	$xdr_squ¨e_out
 (
XDR
 *
xdrs
, 
squ¨e_out
 *
objp
)

21 
öt32_t
 *
buf
;

23 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
ªs1
))

24  
FALSE
;

25  
TRUE
;

26 
	}
}

	@sunrpc/square1/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square10/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
timevÆ
 
tv
;

10 i‡(
¨gc
 != 3)

11 
	`îr_quô
("usage: client <hostname> <protocol>");

13 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
,árgv[2]);

15 
tv
.
tv_£c
 = 10;

16 
tv
.
tv_u£c
 = 0;

17 i‡(
	`˛¡_ˇŒ
(
˛
, 
NULLPROC
, 
xdr_void
, 
NULL
,

18 
xdr_void
, 
NULL
, 
tv
Ë!
RPC_SUCCESS
)

19 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square10/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

10 (&
out
);

11 
	}
}

	@sunrpc/square10/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square2/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 *
ouç
;

11 i‡(
¨gc
 != 3)

12 
	`îr_quô
("usage: client <hostname> <integer-value>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
, "tcp");

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

20 
	`¥ötf
("Thªad:%ld,Ñesu…: %ld\n", 
	`¥_thªad_id
(
NULL
), 
ouç
->
ªs1
);

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square2/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
	`¥ötf
("thread %ld started,árg = %ld\n",

10 
	`¥_thªad_id
(
NULL
), 
öp
->
¨g1
);

11 
	`¶ìp
(5);

12 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

13 
	`¥ötf
("thªad %ld d⁄e\n", 
	`¥_thªad_id
(
NULL
));

15 (&
out
);

16 
	}
}

	@sunrpc/square2/square.h

6 #i‚de‡
_SQUARE_H_RPCGEN


7 
	#_SQUARE_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

12 #ifde‡
__˝lu•lus


17 
	ssqu¨e_ö
 {

18 
¨g1
;

20 
squ¨e_ö
 
	tsqu¨e_ö
;

22 
	ssqu¨e_out
 {

23 
ªs1
;

25 
squ¨e_out
 
	tsqu¨e_out
;

27 
	#SQUARE_PROG
 0x31230000

	)

28 
	#SQUARE_VERS
 1

	)

30 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

31 
	#SQUAREPROC
 1

	)

32 
squ¨e_out
 * 
squ¨ïroc_1
(
squ¨e_ö
 *, 
CLIENT
 *);

33 
squ¨e_out
 * 
squ¨ïroc_1_svc
(
squ¨e_ö
 *, 
svc_ªq
 *);

34 
squ¨e_¥og_1_‰ìªsu…
 (
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

37 
	#SQUAREPROC
 1

	)

38 
squ¨e_out
 * 
squ¨ïroc_1
();

39 
squ¨e_out
 * 
squ¨ïroc_1_svc
();

40 
squ¨e_¥og_1_‰ìªsu…
 ();

45 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

46 
boﬁ_t
 
xdr_squ¨e_ö
 (
XDR
 *, 
squ¨e_ö
*);

47 
boﬁ_t
 
xdr_squ¨e_out
 (
XDR
 *, 
squ¨e_out
*);

50 
boﬁ_t
 
xdr_squ¨e_ö
 ();

51 
boﬁ_t
 
xdr_squ¨e_out
 ();

55 #ifde‡
__˝lu•lus


	@sunrpc/square2/square_clnt.c

6 
	~<mem‹y.h
>

7 
	~"squ¨e.h
"

10 
timevÆ
 
	gTIMEOUT
 = { 25, 0 };

12 
squ¨e_out
 *

13 
	$squ¨ïroc_1
(
squ¨e_ö
 *
¨gp
, 
CLIENT
 *
˛¡
)

15 
squ¨e_out
 
˛¡_ªs
;

17 
	`mem£t
((*)&
˛¡_ªs
, 0, (clnt_res));

18 i‡(
	`˛¡_ˇŒ
 (
˛¡
, 
SQUAREPROC
,

19 (
xdΩroc_t
Ë
xdr_squ¨e_ö
, (
ˇddr_t
Ë
¨gp
,

20 (
xdΩroc_t
Ë
xdr_squ¨e_out
, (
ˇddr_t
Ë&
˛¡_ªs
,

21 
TIMEOUT
Ë!
RPC_SUCCESS
) {

22  (
NULL
);

24  (&
˛¡_ªs
);

25 
	}
}

	@sunrpc/square2/square_svc.c

6 
	~"squ¨e.h
"

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<Ωc/pm≠_˛¡.h
>

10 
	~<°rög.h
>

11 
	~<mem‹y.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

15 #i‚de‡
SIG_PF


16 
	#SIG_PF
 (*)()

	)

20 
	$squ¨e_¥og_1
(
svc_ªq
 *
rq°p
, 
SVCXPRT
 *
å™•
)

23 
squ¨e_ö
 
squ¨ïroc_1_¨g
;

24 } 
¨gumít
;

25 *
ªsu…
;

26 
xdΩroc_t
 
_xdr_¨gumít
, 
_xdr_ªsu…
;

27 *(*
loˇl
)(*, 
svc_ªq
 *);

29 
rq°p
->
rq_¥oc
) {

30 
NULLPROC
:

31 (Ë
	`svc_£ndª∂y
 (
å™•
, (
xdΩroc_t
Ë
xdr_void
, (*)
NULL
);

34 
SQUAREPROC
:

35 
_xdr_¨gumít
 = (
xdΩroc_t
Ë
xdr_squ¨e_ö
;

36 
_xdr_ªsu…
 = (
xdΩroc_t
Ë
xdr_squ¨e_out
;

37 
loˇl
 = (*(*)(*, 
svc_ªq
 *)Ë
squ¨ïroc_1_svc
;

41 
	`sv˚º_n›roc
 (
å™•
);

44 
	`mem£t
 ((*)&
¨gumít
, 0,  (argument));

45 i‡(!
	`svc_gë¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

46 
	`sv˚º_decode
 (
å™•
);

49 
ªsu…
 = (*
loˇl
)((*)&
¨gumít
, 
rq°p
);

50 i‡(
ªsu…
 !
NULL
 && !
	`svc_£ndª∂y
(
å™•
, (
xdΩroc_t
Ë
_xdr_ªsu…
,Ñesult)) {

51 
	`sv˚º_sy°emîr
 (
å™•
);

53 i‡(!
	`svc_‰ì¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

54 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeárguments");

55 
	`exô
 (1);

58 
	}
}

61 
	$maö
 (
¨gc
, **
¨gv
)

63 
SVCXPRT
 *
å™•
;

65 
	`pm≠_un£t
 (
SQUARE_PROG
, 
SQUARE_VERS
);

67 
å™•
 = 
	`svcudp_¸óã
(
RPC_ANYSOCK
);

68 i‡(
å™•
 =
NULL
) {

69 
	`Ârötf
 (
°dîr
, "%s", "cannot create udp service.");

70 
	`exô
(1);

72 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_1
, 
IPPROTO_UDP
)) {

73 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS, udp).");

74 
	`exô
(1);

77 
å™•
 = 
	`sv˘˝_¸óã
(
RPC_ANYSOCK
, 0, 0);

78 i‡(
å™•
 =
NULL
) {

79 
	`Ârötf
 (
°dîr
, "%s", "cannot createÅcp service.");

80 
	`exô
(1);

82 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_1
, 
IPPROTO_TCP
)) {

83 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS,Åcp).");

84 
	`exô
(1);

87 
	`svc_run
 ();

88 
	`Ârötf
 (
°dîr
, "%s", "svc_runÑeturned");

89 
	`exô
 (1);

91 
	}
}

	@sunrpc/square2/square_xdr.c

6 
	~"squ¨e.h
"

8 
boﬁ_t


9 
	$xdr_squ¨e_ö
 (
XDR
 *
xdrs
, 
squ¨e_ö
 *
objp
)

11 
öt32_t
 *
buf
;

13 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
¨g1
))

14  
FALSE
;

15  
TRUE
;

16 
	}
}

18 
boﬁ_t


19 
	$xdr_squ¨e_out
 (
XDR
 *
xdrs
, 
squ¨e_out
 *
objp
)

21 
öt32_t
 *
buf
;

23 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
ªs1
))

24  
FALSE
;

25  
TRUE
;

26 
	}
}

	@sunrpc/square2/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square3.org/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 
out
;

11 i‡(
¨gc
 != 3)

12 
	`îr_quô
("usage: client <hostname> <integer-value>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
, "tcp");

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡(
	`squ¨ïroc_2
(&
ö
, &
out
, 
˛
Ë!
RPC_SUCCESS
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

20 
	`¥ötf
("ªsu…: %ld\n", 
out
.
ªs1
);

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square3.org/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
boﬁ_t


5 
	$squ¨ïroc_2_svc
(
squ¨e_ö
 *
öp
, 
squ¨e_out
 *
ouç
, 
svc_ªq
 *
rq°p
)

7 
	`¥ötf
("thread %ld started,árg = %ld\n",

8 
	`¥_thªad_id
(
NULL
), 
öp
->
¨g1
);

9 
	`¶ìp
(5);

10 
ouç
->
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

11 
	`¥ötf
("thªad %ld d⁄e\n", 
	`¥_thªad_id
(
NULL
));

12 (
TRUE
);

13 
	}
}

16 
	$squ¨e_¥og_2_‰ìªsu…
(
SVCXPRT
 *
å™•
, 
xdΩroc_t
 
xdr_ªsu…
,

17 
ˇddr_t
 
ªsu…
)

19 
	`xdr_‰ì
(
xdr_ªsu…
, 
ªsu…
);

21 
	}
}

	@sunrpc/square3.org/square.h

6 #i‚de‡
_SQUARE_H_RPCGEN


7 
	#_SQUARE_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 
	~<±hªad.h
>

13 #ifde‡
__˝lu•lus


18 
	ssqu¨e_ö
 {

19 
¨g1
;

21 
squ¨e_ö
 
	tsqu¨e_ö
;

23 
	ssqu¨e_out
 {

24 
ªs1
;

26 
squ¨e_out
 
	tsqu¨e_out
;

28 
	#SQUARE_PROG
 0x31230000

	)

29 
	#SQUARE_VERS
 2

	)

31 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

32 
	#SQUAREPROC
 1

	)

33 
˛¡_°©
 
squ¨ïroc_2
(
squ¨e_ö
 *, 
squ¨e_out
 *, 
CLIENT
 *);

34 
boﬁ_t
 
squ¨ïroc_2_svc
(
squ¨e_ö
 *, 
squ¨e_out
 *, 
svc_ªq
 *);

35 
squ¨e_¥og_2_‰ìªsu…
 (
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

38 
	#SQUAREPROC
 1

	)

39 
˛¡_°©
 
squ¨ïroc_2
();

40 
boﬁ_t
 
squ¨ïroc_2_svc
();

41 
squ¨e_¥og_2_‰ìªsu…
 ();

46 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

47 
boﬁ_t
 
xdr_squ¨e_ö
 (
XDR
 *, 
squ¨e_ö
*);

48 
boﬁ_t
 
xdr_squ¨e_out
 (
XDR
 *, 
squ¨e_out
*);

51 
boﬁ_t
 
xdr_squ¨e_ö
 ();

52 
boﬁ_t
 
xdr_squ¨e_out
 ();

56 #ifde‡
__˝lu•lus


	@sunrpc/square3.org/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square3/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 
out
;

11 i‡(
¨gc
 != 3)

12 
	`îr_quô
("usage: client <hostname> <integer-value>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
, "tcp");

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡(
	`squ¨ïroc_2
(&
ö
, &
out
, 
˛
Ë!
RPC_SUCCESS
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

20 
	`¥ötf
("ªsu…: %ld\n", 
out
.
ªs1
);

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square3/server.c

7 
	~"u≈ùc.h
"

8 
	~"squ¨e.h
"

10 
boﬁ_t


11 
	$squ¨ïroc_2_svc
(
squ¨e_ö
 *
öp
, 
squ¨e_out
 *
ouç
, 
svc_ªq
 *
rq°p
)

13 
	`¥ötf
("thread %ld started,árg = %ld\n",

14 
	`¥_thªad_id
(
NULL
), 
öp
->
¨g1
);

15 
	`¶ìp
(5);

16 
ouç
->
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

17 
	`¥ötf
("thªad %ld d⁄e\n", 
	`¥_thªad_id
(
NULL
));

18 (
TRUE
);

19 
	}
}

22 
	$squ¨e_¥og_2_‰ìªsu…
(
SVCXPRT
 *
å™•
, 
xdΩroc_t
 
xdr_ªsu…
,

23 
ˇddr_t
 
ªsu…
)

25 
	`xdr_‰ì
(
xdr_ªsu…
, 
ªsu…
);

27 
	}
}

	@sunrpc/square3/square.h

6 #i‚de‡
_SQUARE_H_RPCGEN


7 
	#_SQUARE_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 
	~<±hªad.h
>

13 #ifde‡
__˝lu•lus


18 
	ssqu¨e_ö
 {

19 
¨g1
;

21 
squ¨e_ö
 
	tsqu¨e_ö
;

23 
	ssqu¨e_out
 {

24 
ªs1
;

26 
squ¨e_out
 
	tsqu¨e_out
;

28 
	#SQUARE_PROG
 0x31230000

	)

29 
	#SQUARE_VERS
 2

	)

31 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

32 
	#SQUAREPROC
 1

	)

33 
˛¡_°©
 
squ¨ïroc_2
(
squ¨e_ö
 *, 
squ¨e_out
 *, 
CLIENT
 *);

34 
boﬁ_t
 
squ¨ïroc_2_svc
(
squ¨e_ö
 *, 
squ¨e_out
 *, 
svc_ªq
 *);

35 
squ¨e_¥og_2_‰ìªsu…
 (
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

38 
	#SQUAREPROC
 1

	)

39 
˛¡_°©
 
squ¨ïroc_2
();

40 
boﬁ_t
 
squ¨ïroc_2_svc
();

41 
squ¨e_¥og_2_‰ìªsu…
 ();

46 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

47 
boﬁ_t
 
xdr_squ¨e_ö
 (
XDR
 *, 
squ¨e_ö
*);

48 
boﬁ_t
 
xdr_squ¨e_out
 (
XDR
 *, 
squ¨e_out
*);

51 
boﬁ_t
 
xdr_squ¨e_ö
 ();

52 
boﬁ_t
 
xdr_squ¨e_out
 ();

56 #ifde‡
__˝lu•lus


	@sunrpc/square3/square_client.c

7 
	~"squ¨e.h
"

11 
	$squ¨e_¥og_2
(*
ho°
)

13 
CLIENT
 *
˛¡
;

14 
˛¡_°©
 
ªtvÆ_1
;

15 
squ¨e_out
 
ªsu…_1
;

16 
squ¨e_ö
 
squ¨ïroc_2_¨g
;

18 #i‚def 
DEBUG


19 
˛¡
 = 
	`˛¡_¸óã
 (
ho°
, 
SQUARE_PROG
, 
SQUARE_VERS
, "udp");

20 i‡(
˛¡
 =
NULL
) {

21 
	`˛¡_p¸óãîr‹
 (
ho°
);

22 
	`exô
 (1);

26 
ªtvÆ_1
 = 
	`squ¨ïroc_2
(&
squ¨ïroc_2_¨g
, &
ªsu…_1
, 
˛¡
);

27 i‡(
ªtvÆ_1
 !
RPC_SUCCESS
) {

28 
	`˛¡_≥º‹
 (
˛¡
, "call failed");

30 #i‚def 
DEBUG


31 
	`˛¡_de°roy
 (
˛¡
);

33 
	}
}

37 
	$maö
 (
¨gc
, *
¨gv
[])

39 *
ho°
;

41 i‡(
¨gc
 < 2) {

42 
	`¥ötf
 ("ußge: %†£rvî_ho°\n", 
¨gv
[0]);

43 
	`exô
 (1);

45 
ho°
 = 
¨gv
[1];

46 
	`squ¨e_¥og_2
 (
ho°
);

47 
	`exô
 (0);

48 
	}
}

	@sunrpc/square3/square_clnt.c

6 
	~<mem‹y.h
>

7 
	~"squ¨e.h
"

10 
timevÆ
 
	gTIMEOUT
 = { 25, 0 };

12 
˛¡_°©


13 
	$squ¨ïroc_2
(
squ¨e_ö
 *
¨gp
, 
squ¨e_out
 *
˛¡_ªs
, 
CLIENT
 *
˛¡
)

15  (
	`˛¡_ˇŒ
(
˛¡
, 
SQUAREPROC
,

16 (
xdΩroc_t
Ë
xdr_squ¨e_ö
, (
ˇddr_t
Ë
¨gp
,

17 (
xdΩroc_t
Ë
xdr_squ¨e_out
, (
ˇddr_t
Ë
˛¡_ªs
,

18 
TIMEOUT
));

19 
	}
}

	@sunrpc/square3/square_server.c

7 
	~"squ¨e.h
"

9 
boﬁ_t


10 
	$squ¨ïroc_2_svc
(
squ¨e_ö
 *
¨gp
, 
squ¨e_out
 *
ªsu…
, 
svc_ªq
 *
rq°p
)

12 
boﬁ_t
 
ªtvÆ
;

18  
ªtvÆ
;

19 
	}
}

22 
	$squ¨e_¥og_2_‰ìªsu…
 (
SVCXPRT
 *
å™•
, 
xdΩroc_t
 
xdr_ªsu…
, 
ˇddr_t
 
ªsu…
)

24 
	`xdr_‰ì
 (
xdr_ªsu…
, 
ªsu…
);

31 
	}
}

	@sunrpc/square3/square_svc.c

6 
	~"squ¨e.h
"

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<Ωc/pm≠_˛¡.h
>

10 
	~<°rög.h
>

11 
	~<mem‹y.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

15 #i‚de‡
SIG_PF


16 
	#SIG_PF
 (*)()

	)

20 
	$squ¨e_¥og_2
(
svc_ªq
 *
rq°p
, 
SVCXPRT
 *
å™•
)

23 
squ¨e_ö
 
squ¨ïroc_2_¨g
;

24 } 
¨gumít
;

26 
squ¨e_out
 
squ¨ïroc_2_ªs
;

27 } 
ªsu…
;

28 
boﬁ_t
 
ªtvÆ
;

29 
xdΩroc_t
 
_xdr_¨gumít
, 
_xdr_ªsu…
;

30 
	`boﬁ_t
 (*
loˇl
)(*, *, 
svc_ªq
 *);

32 
rq°p
->
rq_¥oc
) {

33 
NULLPROC
:

34 (Ë
	`svc_£ndª∂y
 (
å™•
, (
xdΩroc_t
Ë
xdr_void
, (*)
NULL
);

37 
SQUAREPROC
:

38 
_xdr_¨gumít
 = (
xdΩroc_t
Ë
xdr_squ¨e_ö
;

39 
_xdr_ªsu…
 = (
xdΩroc_t
Ë
xdr_squ¨e_out
;

40 
loˇl
 = (
	`boﬁ_t
 (*Ë(*, *, 
svc_ªq
 *))
squ¨ïroc_2_svc
;

44 
	`sv˚º_n›roc
 (
å™•
);

47 
	`mem£t
 ((*)&
¨gumít
, 0,  (argument));

48 i‡(!
	`svc_gë¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

49 
	`sv˚º_decode
 (
å™•
);

52 
ªtvÆ
 = (
boﬁ_t
Ë(*
loˇl
)((*)&
¨gumít
, (*)&
ªsu…
, 
rq°p
);

53 i‡(
ªtvÆ
 > 0 && !
	`svc_£ndª∂y
(
å™•
, (
xdΩroc_t
Ë
_xdr_ªsu…
, (*)&
ªsu…
)) {

54 
	`sv˚º_sy°emîr
 (
å™•
);

56 i‡(!
	`svc_‰ì¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

57 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeárguments");

58 
	`exô
 (1);

60 i‡(!
	`squ¨e_¥og_2_‰ìªsu…
 (
å™•
, 
_xdr_ªsu…
, (
ˇddr_t
Ë&
ªsu…
))

61 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeÑesults");

64 
	}
}

67 
	$maö
 (
¨gc
, **
¨gv
)

69 
SVCXPRT
 *
å™•
;

71 
	`pm≠_un£t
 (
SQUARE_PROG
, 
SQUARE_VERS
);

73 
å™•
 = 
	`svcudp_¸óã
(
RPC_ANYSOCK
);

74 i‡(
å™•
 =
NULL
) {

75 
	`Ârötf
 (
°dîr
, "%s", "cannot create udp service.");

76 
	`exô
(1);

78 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_2
, 
IPPROTO_UDP
)) {

79 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS, udp).");

80 
	`exô
(1);

83 
å™•
 = 
	`sv˘˝_¸óã
(
RPC_ANYSOCK
, 0, 0);

84 i‡(
å™•
 =
NULL
) {

85 
	`Ârötf
 (
°dîr
, "%s", "cannot createÅcp service.");

86 
	`exô
(1);

88 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_2
, 
IPPROTO_TCP
)) {

89 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS,Åcp).");

90 
	`exô
(1);

93 
	`svc_run
 ();

94 
	`Ârötf
 (
°dîr
, "%s", "svc_runÑeturned");

95 
	`exô
 (1);

97 
	}
}

	@sunrpc/square3/square_xdr.c

6 
	~"squ¨e.h
"

8 
boﬁ_t


9 
	$xdr_squ¨e_ö
 (
XDR
 *
xdrs
, 
squ¨e_ö
 *
objp
)

11 
öt32_t
 *
buf
;

13 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
¨g1
))

14  
FALSE
;

15  
TRUE
;

16 
	}
}

18 
boﬁ_t


19 
	$xdr_squ¨e_out
 (
XDR
 *
xdrs
, 
squ¨e_out
 *
objp
)

21 
öt32_t
 *
buf
;

23 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
ªs1
))

24  
FALSE
;

25  
TRUE
;

26 
	}
}

	@sunrpc/square3/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square4/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 
out
;

11 i‡(
¨gc
 != 3)

12 
	`îr_quô
("usage: client <hostname> <integer-value>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
, "tcp");

16 
	`auth_de°roy
(
˛
->
˛_auth
);

17 #ifde‡
__löux__


18 
˛
->
˛_auth
 = 
	`authunix_¸óã_deÁu…
();

20 
˛
->
˛_auth
 = 
	`authsys_¸óã_deÁu…
();

24 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

25 i‡(
	`squ¨ïroc_2
(&
ö
, &
out
, 
˛
Ë!
RPC_SUCCESS
)

26 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

28 
	`¥ötf
("ªsu…: %ld\n", 
out
.
ªs1
);

29 
	`exô
(0);

30 
	}
}

	@sunrpc/square4/server.c

2 
	~"u≈ùc.h
"

3 
	~"squ¨e.h
"

5 
boﬁ_t


6 
	$squ¨ïroc_2_svc
(
squ¨e_ö
 *
öp
, 
squ¨e_out
 *
ouç
, 
svc_ªq
 *
rq°p
)

8 
	`¥ötf
("thread %ld started,árg = %ld,áuth = %d\n",

9 
	`¥_thªad_id
(
NULL
), 
öp
->
¨g1
, 
rq°p
->
rq_¸ed
.
ﬂ_Êav‹
);

10 i‡(
rq°p
->
rq_¸ed
.
ﬂ_Êav‹
 =
AUTH_SYS
) {

12 #ifde‡
__löux__


13 
authunix_∑rms
 *
au
;

14 
au
 = (
authunix_∑rms
*)
rq°p
->
rq_˛¡¸ed
;

15 
	`¥ötf
("AUTH_SYS: host %s, uid %ld, gid %ld\n",

16 
au
->
aup_mach«me
, (Ëau->
aup_uid
, (Ëau->
aup_gid
);

18 
authsys_∑rms
 *
au
;

19 
au
 = (
authsys_∑rms
 *)
rq°p
->
rq_˛¡¸ed
;

20 
	`¥ötf
("AUTH_SYS: host %s, uid %ld, gid %ld\n",

21 
au
->
aup_mach«me
, (Ëau->
aup_uid
, (Ëau->
aup_gid
);

25 
	`¶ìp
(5);

26 
ouç
->
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

27 
	`¥ötf
("thªad %ld d⁄e\n", 
	`¥_thªad_id
(
NULL
));

28 (
TRUE
);

29 
	}
}

33 
	$squ¨e_¥og_2_‰ìªsu…
(
SVCXPRT
 *
å™•
, 
xdΩroc_t
 
xdr_ªsu…
,

34 
ˇddr_t
 
ªsu…
)

36 
	`xdr_‰ì
(
xdr_ªsu…
, 
ªsu…
);

38 
	}
}

	@sunrpc/square4/square.h

6 #i‚de‡
_SQUARE_H_RPCGEN


7 
	#_SQUARE_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 
	~<±hªad.h
>

13 #ifde‡
__˝lu•lus


18 
	ssqu¨e_ö
 {

19 
¨g1
;

21 
squ¨e_ö
 
	tsqu¨e_ö
;

23 
	ssqu¨e_out
 {

24 
ªs1
;

26 
squ¨e_out
 
	tsqu¨e_out
;

28 
	#SQUARE_PROG
 0x31230000

	)

29 
	#SQUARE_VERS
 2

	)

31 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

32 
	#SQUAREPROC
 1

	)

33 
˛¡_°©
 
squ¨ïroc_2
(
squ¨e_ö
 *, 
squ¨e_out
 *, 
CLIENT
 *);

34 
boﬁ_t
 
squ¨ïroc_2_svc
(
squ¨e_ö
 *, 
squ¨e_out
 *, 
svc_ªq
 *);

35 
squ¨e_¥og_2_‰ìªsu…
 (
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

38 
	#SQUAREPROC
 1

	)

39 
˛¡_°©
 
squ¨ïroc_2
();

40 
boﬁ_t
 
squ¨ïroc_2_svc
();

41 
squ¨e_¥og_2_‰ìªsu…
 ();

46 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

47 
boﬁ_t
 
xdr_squ¨e_ö
 (
XDR
 *, 
squ¨e_ö
*);

48 
boﬁ_t
 
xdr_squ¨e_out
 (
XDR
 *, 
squ¨e_out
*);

51 
boﬁ_t
 
xdr_squ¨e_ö
 ();

52 
boﬁ_t
 
xdr_squ¨e_out
 ();

56 #ifde‡
__˝lu•lus


	@sunrpc/square4/square_client.c

7 
	~"squ¨e.h
"

11 
	$squ¨e_¥og_2
(*
ho°
)

13 
CLIENT
 *
˛¡
;

14 
˛¡_°©
 
ªtvÆ_1
;

15 
squ¨e_out
 
ªsu…_1
;

16 
squ¨e_ö
 
squ¨ïroc_2_¨g
;

18 #i‚def 
DEBUG


19 
˛¡
 = 
	`˛¡_¸óã
 (
ho°
, 
SQUARE_PROG
, 
SQUARE_VERS
, "udp");

20 i‡(
˛¡
 =
NULL
) {

21 
	`˛¡_p¸óãîr‹
 (
ho°
);

22 
	`exô
 (1);

26 
ªtvÆ_1
 = 
	`squ¨ïroc_2
(&
squ¨ïroc_2_¨g
, &
ªsu…_1
, 
˛¡
);

27 i‡(
ªtvÆ_1
 !
RPC_SUCCESS
) {

28 
	`˛¡_≥º‹
 (
˛¡
, "call failed");

30 #i‚def 
DEBUG


31 
	`˛¡_de°roy
 (
˛¡
);

33 
	}
}

37 
	$maö
 (
¨gc
, *
¨gv
[])

39 *
ho°
;

41 i‡(
¨gc
 < 2) {

42 
	`¥ötf
 ("ußge: %†£rvî_ho°\n", 
¨gv
[0]);

43 
	`exô
 (1);

45 
ho°
 = 
¨gv
[1];

46 
	`squ¨e_¥og_2
 (
ho°
);

47 
	`exô
 (0);

48 
	}
}

	@sunrpc/square4/square_clnt.c

6 
	~<mem‹y.h
>

7 
	~"squ¨e.h
"

10 
timevÆ
 
	gTIMEOUT
 = { 25, 0 };

12 
˛¡_°©


13 
	$squ¨ïroc_2
(
squ¨e_ö
 *
¨gp
, 
squ¨e_out
 *
˛¡_ªs
, 
CLIENT
 *
˛¡
)

15  (
	`˛¡_ˇŒ
(
˛¡
, 
SQUAREPROC
,

16 (
xdΩroc_t
Ë
xdr_squ¨e_ö
, (
ˇddr_t
Ë
¨gp
,

17 (
xdΩroc_t
Ë
xdr_squ¨e_out
, (
ˇddr_t
Ë
˛¡_ªs
,

18 
TIMEOUT
));

19 
	}
}

	@sunrpc/square4/square_server.c

7 
	~"squ¨e.h
"

9 
boﬁ_t


10 
	$squ¨ïroc_2_svc
(
squ¨e_ö
 *
¨gp
, 
squ¨e_out
 *
ªsu…
, 
svc_ªq
 *
rq°p
)

12 
boﬁ_t
 
ªtvÆ
;

18  
ªtvÆ
;

19 
	}
}

22 
	$squ¨e_¥og_2_‰ìªsu…
 (
SVCXPRT
 *
å™•
, 
xdΩroc_t
 
xdr_ªsu…
, 
ˇddr_t
 
ªsu…
)

24 
	`xdr_‰ì
 (
xdr_ªsu…
, 
ªsu…
);

31 
	}
}

	@sunrpc/square4/square_svc.c

6 
	~"squ¨e.h
"

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<Ωc/pm≠_˛¡.h
>

10 
	~<°rög.h
>

11 
	~<mem‹y.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

15 #i‚de‡
SIG_PF


16 
	#SIG_PF
 (*)()

	)

20 
	$squ¨e_¥og_2
(
svc_ªq
 *
rq°p
, 
SVCXPRT
 *
å™•
)

23 
squ¨e_ö
 
squ¨ïroc_2_¨g
;

24 } 
¨gumít
;

26 
squ¨e_out
 
squ¨ïroc_2_ªs
;

27 } 
ªsu…
;

28 
boﬁ_t
 
ªtvÆ
;

29 
xdΩroc_t
 
_xdr_¨gumít
, 
_xdr_ªsu…
;

30 
	`boﬁ_t
 (*
loˇl
)(*, *, 
svc_ªq
 *);

32 
rq°p
->
rq_¥oc
) {

33 
NULLPROC
:

34 (Ë
	`svc_£ndª∂y
 (
å™•
, (
xdΩroc_t
Ë
xdr_void
, (*)
NULL
);

37 
SQUAREPROC
:

38 
_xdr_¨gumít
 = (
xdΩroc_t
Ë
xdr_squ¨e_ö
;

39 
_xdr_ªsu…
 = (
xdΩroc_t
Ë
xdr_squ¨e_out
;

40 
loˇl
 = (
	`boﬁ_t
 (*Ë(*, *, 
svc_ªq
 *))
squ¨ïroc_2_svc
;

44 
	`sv˚º_n›roc
 (
å™•
);

47 
	`mem£t
 ((*)&
¨gumít
, 0,  (argument));

48 i‡(!
	`svc_gë¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

49 
	`sv˚º_decode
 (
å™•
);

52 
ªtvÆ
 = (
boﬁ_t
Ë(*
loˇl
)((*)&
¨gumít
, (*)&
ªsu…
, 
rq°p
);

53 i‡(
ªtvÆ
 > 0 && !
	`svc_£ndª∂y
(
å™•
, (
xdΩroc_t
Ë
_xdr_ªsu…
, (*)&
ªsu…
)) {

54 
	`sv˚º_sy°emîr
 (
å™•
);

56 i‡(!
	`svc_‰ì¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

57 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeárguments");

58 
	`exô
 (1);

60 i‡(!
	`squ¨e_¥og_2_‰ìªsu…
 (
å™•
, 
_xdr_ªsu…
, (
ˇddr_t
Ë&
ªsu…
))

61 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeÑesults");

64 
	}
}

67 
	$maö
 (
¨gc
, **
¨gv
)

69 
SVCXPRT
 *
å™•
;

71 
	`pm≠_un£t
 (
SQUARE_PROG
, 
SQUARE_VERS
);

73 
å™•
 = 
	`svcudp_¸óã
(
RPC_ANYSOCK
);

74 i‡(
å™•
 =
NULL
) {

75 
	`Ârötf
 (
°dîr
, "%s", "cannot create udp service.");

76 
	`exô
(1);

78 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_2
, 
IPPROTO_UDP
)) {

79 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS, udp).");

80 
	`exô
(1);

83 
å™•
 = 
	`sv˘˝_¸óã
(
RPC_ANYSOCK
, 0, 0);

84 i‡(
å™•
 =
NULL
) {

85 
	`Ârötf
 (
°dîr
, "%s", "cannot createÅcp service.");

86 
	`exô
(1);

88 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_2
, 
IPPROTO_TCP
)) {

89 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS,Åcp).");

90 
	`exô
(1);

93 
	`svc_run
 ();

94 
	`Ârötf
 (
°dîr
, "%s", "svc_runÑeturned");

95 
	`exô
 (1);

97 
	}
}

	@sunrpc/square4/square_xdr.c

6 
	~"squ¨e.h
"

8 
boﬁ_t


9 
	$xdr_squ¨e_ö
 (
XDR
 *
xdrs
, 
squ¨e_ö
 *
objp
)

11 
öt32_t
 *
buf
;

13 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
¨g1
))

14  
FALSE
;

15  
TRUE
;

16 
	}
}

18 
boﬁ_t


19 
	$xdr_squ¨e_out
 (
XDR
 *
xdrs
, 
squ¨e_out
 *
objp
)

21 
öt32_t
 *
buf
;

23 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
ªs1
))

24  
FALSE
;

25  
TRUE
;

26 
	}
}

	@sunrpc/square4/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square5/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 *
ouç
;

10 
timevÆ
 
tv
;

12 i‡(
¨gc
 != 4)

13 
	`îr_quô
("usage: client <hostname> <integer-value> <protocol>");

15 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
,árgv[3]);

17 
	`C t_c⁄åﬁ
(
˛
, 
CLGET_TIMEOUT
, (*Ë&
tv
);

18 
	`¥ötf
("timeouà%ld sec, %ld u£c\n", 
tv
.
tv_£c
,Åv.
tv_u£c
);

19 i‡(
	`˛¡_c⁄åﬁ
(
˛
, 
CLGET_RETRY_TIMEOUT
, (*Ë&
tv
Ë=
TRUE
)

20 
	`¥ötf
("ªåyÅimeouà%ld sec, %ld u£c\n", 
tv
.
tv_£c
,Åv.
tv_u£c
);

22 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

23 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

24 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

26 
	`¥ötf
("ªsu…: %ld\n", 
ouç
->
ªs1
);

27 
	`exô
(0);

28 
	}
}

	@sunrpc/square5/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
	`¥ötf
("thread %ld started,árg = %ld\n",

10 
	`¥_thªad_id
(
NULL
), 
öp
->
¨g1
);

11 
	`¶ìp
(10000);

12 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

13 
	`¥ötf
("thªad %ld d⁄e\n", 
	`¥_thªad_id
(
NULL
));

15 (&
out
);

16 
	}
}

	@sunrpc/square5/square.h

6 #i‚de‡
_SQUARE_H_RPCGEN


7 
	#_SQUARE_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

12 #ifde‡
__˝lu•lus


17 
	ssqu¨e_ö
 {

18 
¨g1
;

20 
squ¨e_ö
 
	tsqu¨e_ö
;

22 
	ssqu¨e_out
 {

23 
ªs1
;

25 
squ¨e_out
 
	tsqu¨e_out
;

27 
	#SQUARE_PROG
 0x31230000

	)

28 
	#SQUARE_VERS
 1

	)

30 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

31 
	#SQUAREPROC
 1

	)

32 
squ¨e_out
 * 
squ¨ïroc_1
(
squ¨e_ö
 *, 
CLIENT
 *);

33 
squ¨e_out
 * 
squ¨ïroc_1_svc
(
squ¨e_ö
 *, 
svc_ªq
 *);

34 
squ¨e_¥og_1_‰ìªsu…
 (
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

37 
	#SQUAREPROC
 1

	)

38 
squ¨e_out
 * 
squ¨ïroc_1
();

39 
squ¨e_out
 * 
squ¨ïroc_1_svc
();

40 
squ¨e_¥og_1_‰ìªsu…
 ();

45 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

46 
boﬁ_t
 
xdr_squ¨e_ö
 (
XDR
 *, 
squ¨e_ö
*);

47 
boﬁ_t
 
xdr_squ¨e_out
 (
XDR
 *, 
squ¨e_out
*);

50 
boﬁ_t
 
xdr_squ¨e_ö
 ();

51 
boﬁ_t
 
xdr_squ¨e_out
 ();

55 #ifde‡
__˝lu•lus


	@sunrpc/square5/square_clnt.c

6 
	~<mem‹y.h
>

7 
	~"squ¨e.h
"

10 
timevÆ
 
	gTIMEOUT
 = { 25, 0 };

12 
squ¨e_out
 *

13 
	$squ¨ïroc_1
(
squ¨e_ö
 *
¨gp
, 
CLIENT
 *
˛¡
)

15 
squ¨e_out
 
˛¡_ªs
;

17 
	`mem£t
((*)&
˛¡_ªs
, 0, (clnt_res));

18 i‡(
	`˛¡_ˇŒ
 (
˛¡
, 
SQUAREPROC
,

19 (
xdΩroc_t
Ë
xdr_squ¨e_ö
, (
ˇddr_t
Ë
¨gp
,

20 (
xdΩroc_t
Ë
xdr_squ¨e_out
, (
ˇddr_t
Ë&
˛¡_ªs
,

21 
TIMEOUT
Ë!
RPC_SUCCESS
) {

22  (
NULL
);

24  (&
˛¡_ªs
);

25 
	}
}

	@sunrpc/square5/square_svc.c

6 
	~"squ¨e.h
"

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<Ωc/pm≠_˛¡.h
>

10 
	~<°rög.h
>

11 
	~<mem‹y.h
>

12 
	~<sys/sockë.h
>

13 
	~<√töë/ö.h
>

15 #i‚de‡
SIG_PF


16 
	#SIG_PF
 (*)()

	)

20 
	$squ¨e_¥og_1
(
svc_ªq
 *
rq°p
, 
SVCXPRT
 *
å™•
)

23 
squ¨e_ö
 
squ¨ïroc_1_¨g
;

24 } 
¨gumít
;

25 *
ªsu…
;

26 
xdΩroc_t
 
_xdr_¨gumít
, 
_xdr_ªsu…
;

27 *(*
loˇl
)(*, 
svc_ªq
 *);

29 
rq°p
->
rq_¥oc
) {

30 
NULLPROC
:

31 (Ë
	`svc_£ndª∂y
 (
å™•
, (
xdΩroc_t
Ë
xdr_void
, (*)
NULL
);

34 
SQUAREPROC
:

35 
_xdr_¨gumít
 = (
xdΩroc_t
Ë
xdr_squ¨e_ö
;

36 
_xdr_ªsu…
 = (
xdΩroc_t
Ë
xdr_squ¨e_out
;

37 
loˇl
 = (*(*)(*, 
svc_ªq
 *)Ë
squ¨ïroc_1_svc
;

41 
	`sv˚º_n›roc
 (
å™•
);

44 
	`mem£t
 ((*)&
¨gumít
, 0,  (argument));

45 i‡(!
	`svc_gë¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

46 
	`sv˚º_decode
 (
å™•
);

49 
ªsu…
 = (*
loˇl
)((*)&
¨gumít
, 
rq°p
);

50 i‡(
ªsu…
 !
NULL
 && !
	`svc_£ndª∂y
(
å™•
, (
xdΩroc_t
Ë
_xdr_ªsu…
,Ñesult)) {

51 
	`sv˚º_sy°emîr
 (
å™•
);

53 i‡(!
	`svc_‰ì¨gs
 (
å™•
, (
xdΩroc_t
Ë
_xdr_¨gumít
, (
ˇddr_t
Ë&
¨gumít
)) {

54 
	`Ârötf
 (
°dîr
, "%s", "unableÅo freeárguments");

55 
	`exô
 (1);

58 
	}
}

61 
	$maö
 (
¨gc
, **
¨gv
)

63 
SVCXPRT
 *
å™•
;

65 
	`pm≠_un£t
 (
SQUARE_PROG
, 
SQUARE_VERS
);

67 
å™•
 = 
	`svcudp_¸óã
(
RPC_ANYSOCK
);

68 i‡(
å™•
 =
NULL
) {

69 
	`Ârötf
 (
°dîr
, "%s", "cannot create udp service.");

70 
	`exô
(1);

72 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_1
, 
IPPROTO_UDP
)) {

73 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS, udp).");

74 
	`exô
(1);

77 
å™•
 = 
	`sv˘˝_¸óã
(
RPC_ANYSOCK
, 0, 0);

78 i‡(
å™•
 =
NULL
) {

79 
	`Ârötf
 (
°dîr
, "%s", "cannot createÅcp service.");

80 
	`exô
(1);

82 i‡(!
	`svc_ªgi°î
(
å™•
, 
SQUARE_PROG
, 
SQUARE_VERS
, 
squ¨e_¥og_1
, 
IPPROTO_TCP
)) {

83 
	`Ârötf
 (
°dîr
, "%s", "unableÅoÑegister (SQUARE_PROG, SQUARE_VERS,Åcp).");

84 
	`exô
(1);

87 
	`svc_run
 ();

88 
	`Ârötf
 (
°dîr
, "%s", "svc_runÑeturned");

89 
	`exô
 (1);

91 
	}
}

	@sunrpc/square5/square_xdr.c

6 
	~"squ¨e.h
"

8 
boﬁ_t


9 
	$xdr_squ¨e_ö
 (
XDR
 *
xdrs
, 
squ¨e_ö
 *
objp
)

11 
öt32_t
 *
buf
;

13 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
¨g1
))

14  
FALSE
;

15  
TRUE
;

16 
	}
}

18 
boﬁ_t


19 
	$xdr_squ¨e_out
 (
XDR
 *
xdrs
, 
squ¨e_out
 *
objp
)

21 
öt32_t
 *
buf
;

23 i‡(!
	`xdr_l⁄g
 (
xdrs
, &
objp
->
ªs1
))

24  
FALSE
;

25  
TRUE
;

26 
	}
}

	@sunrpc/square5/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square6/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 *
ouç
;

11 i‡(
¨gc
 != 4)

12 
	`îr_quô
("usage: client <hostname> <integer-value> <protocol>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
,árgv[3]);

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

20 
	`¥ötf
("ªsu…: %ld\n", 
ouç
->
ªs1
);

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square6/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
	`¥ötf
("serverÖrocedure started\n");

10 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

11 
	`ab‹t
();

12 (&
out
);

13 
	}
}

	@sunrpc/square6/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square7/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 
out
;

11 i‡(
¨gc
 != 4)

12 
	`îr_quô
("usage: client <hostname> <integer-value> <protocol>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
,árgv[3]);

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡(
	`squ¨ïroc_2
(&
ö
, &
out
, 
˛
Ë!
RPC_SUCCESS
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

20 
	`¥ötf
("ªsu…: %ld\n", 
out
.
ªs1
);

21 
	`exô
(0);

22 
	}
}

	@sunrpc/square7/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
boﬁ_t


5 
	$squ¨ïroc_2_svc
(
squ¨e_ö
 *
öp
, 
squ¨e_out
 *
ouç
, 
svc_ªq
 *
rq°p
)

7 
	`¥ötf
("thread %ld started,árg = %ld\n",

8 
	`¥_thªad_id
(
NULL
), 
öp
->
¨g1
);

9 
ouç
->
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

10 
	`±hªad_exô
(
NULL
);

11 (
TRUE
);

12 
	}
}

15 
	$squ¨e_¥og_2_‰ìªsu…
(
SVCXPRT
 *
å™•
, 
xdΩroc_t
 
xdr_ªsu…
,

16 
ˇddr_t
 
ªsu…
)

18 
	`xdr_‰ì
(
xdr_ªsu…
, 
ªsu…
);

20 
	}
}

	@sunrpc/square7/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square8/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 *
ouç
;

11 i‡(
¨gc
 != 4)

12 
	`îr_quô
("usage: client <hostname> <integer-value> <protocol>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
,árgv[3]);

16 
	`Æ¨m
(3);

17 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

18 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

19 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

21 
	`¥ötf
("ªsu…: %ld\n", 
ouç
->
ªs1
);

22 
	`exô
(0);

23 
	}
}

	@sunrpc/square8/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
	`¥ötf
("serverÖrocedure started\n");

10 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

11 
	`¶ìp
(6);

12 
	`¥ötf
("serverÖrocedureÑeturning\n");

13 (&
out
);

14 
	}
}

	@sunrpc/square8/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/square9/client.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
CLIENT
 *
˛
;

8 
squ¨e_ö
 
ö
;

9 
squ¨e_out
 *
ouç
;

11 i‡(
¨gc
 != 3)

12 
	`îr_quô
("usage: client <hostname> <integer-value>");

14 
˛
 = 
	`C t_¸óã
(
¨gv
[1], 
SQUARE_PROG
, 
SQUARE_VERS
, "tcp");

16 
ö
.
¨g1
 = 
	`©ﬁ
(
¨gv
[2]);

17 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

18 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

19 
	`¥ötf
("ªsu…: %ld\n", 
ouç
->
ªs1
);

21 
ö
.
¨g1
 *= 2;

22 i‡–(
ouç
 = 
	`squ¨ïroc_1
(&
ö
, 
˛
)Ë=
NULL
)

23 
	`îr_quô
("%s", 
	`˛¡_•îr‹
(
˛
, 
¨gv
[1]));

24 
	`¥ötf
("ªsu…: %ld\n", 
ouç
->
ªs1
);

26 
	`˛¡_de°roy
(
˛
);

28 
	`∑u£
();

30 
	`exô
(0);

31 
	}
}

	@sunrpc/square9/server.c

1 
	~"u≈ùc.h
"

2 
	~"squ¨e.h
"

4 
squ¨e_out
 *

5 
	$squ¨ïroc_1_svc
(
squ¨e_ö
 *
öp
, 
svc_ªq
 *
rq°p
)

7 
squ¨e_out
 
out
;

9 
out
.
ªs1
 = 
öp
->
¨g1
 * inp->arg1;

10 (&
out
);

11 
	}
}

	@sunrpc/square9/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/test1/main.c

1 
	~"u≈ùc.h
"

2 
	~"d©a.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
XDR
 
xh™dÀ
;

8 *
buff
;

13 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

14 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
BUFFSIZE
, 
XDR_ENCODE
);

16 
	`exô
(0);

17 
	}
}

	@sunrpc/test1/nullargs.h

6 #i‚de‡
_NULLARGS_H_RPCGEN


7 
	#_NULLARGS_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


16 
	#SQUARE_PROG
 (()(0x31230000))

	)

17 
	#SQUARE_VERS
 (()(1))

	)

19 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

20 
	#SQUAREPROC
 (()(1))

	)

21 * 
squ¨ïroc_1
(*, 
CLIENT
 *);

22 * 
squ¨ïroc_1_svc
(*, 
svc_ªq
 *);

23 
squ¨e_¥og_1_‰ìªsu…
(
SVCXPRT
 *, 
xdΩroc_t
, 
ˇddr_t
);

26 
	#SQUAREPROC
 (()(1))

	)

27 * 
squ¨ïroc_1
();

28 * 
squ¨ïroc_1_svc
();

29 
squ¨e_¥og_1_‰ìªsu…
();

32 #ifde‡
__˝lu•lus


	@sunrpc/test1/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/xdr1/data.save.h

5 #i‚de‡
_DATA_H_RPCGEN


6 
	#_DATA_H_RPCGEN


	)

8 
	~<Ωc/Ωc.h
>

10 
	eªsu…_t
 {

11 
	mRESULT_INT
 = 1,

12 
	mRESULT_DOUBLE
 = 2

14 
ªsu…_t
 
	tªsu…_t
;

16 
	suni⁄_¨g
 {

17 
ªsu…_t
 
	mªsu…
;

19 
	mötvÆ
;

20 
	mdoubÀvÆ
;

21 } 
	muni⁄_¨g_u
;

23 
uni⁄_¨g
 
	tuni⁄_¨g
;

25 
	sd©a
 {

26 
	msh‹t_¨g
;

27 
	ml⁄g_¨g
;

28 *
	mv°rög_¨g
;

29 
	mf›aque_¨g
[3];

31 
u_öt
 
	mv›aque_¨g_Àn
;

32 *
	mv›aque_¨g_vÆ
;

33 } 
	mv›aque_¨g
;

34 
	mfsh‹t_¨g
[4];

36 
u_öt
 
	mvl⁄g_¨g_Àn
;

37 *
	mvl⁄g_¨g_vÆ
;

38 } 
	mvl⁄g_¨g
;

39 
uni⁄_¨g
 
	mu¨g
;

41 
d©a
 
	td©a
;

44 
boﬁ_t
 
xdr_ªsu…_t
(
XDR
 *, 
ªsu…_t
*);

45 
boﬁ_t
 
xdr_uni⁄_¨g
(
XDR
 *, 
uni⁄_¨g
*);

46 
boﬁ_t
 
xdr_d©a
(
XDR
 *, 
d©a
*);

	@sunrpc/xdr1/example.c

1 
	~"u≈ùc.h
"

2 
	~"exam∂e.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
size
;

8 
exam∂e
 
foo
;

10 
size
 = 
	`RNDUP
((
foo
.
a
)Ë+ RNDUP((foo.
b
)) +

11 
	`RNDUP
((
foo
.
c
[0])Ë* 
MAXC
;

12 
	`¥ötf
("sizê%d\n", 
size
);

13 
	`exô
(0);

14 
	}
}

	@sunrpc/xdr1/opt1.c

1 
	~"u≈ùc.h
"

2 
	~"›t1.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
i
;

8 
XDR
 
xh™dÀ
;

9 *
buff
;

10 
lvÆ2
, 
lvÆ3
, *
Õå
;

11 
¨gs
 
out
;

12 
size_t
 
size
;

14 
out
.
¨g1
.
Êag
 = 
TRUE
;

15 
out
.
¨g1
.
›é⁄g_u
.
vÆ
 = 5;

17 
lvÆ2
 = 9876;

18 
out
.
¨g2
.
¨g2_Àn
 = 1;

19 
out
.
¨g2
.
¨g2_vÆ
 = &
lvÆ2
;

21 
lvÆ3
 = 123;

22 
out
.
¨g3
 = &
lvÆ3
;

24 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

25 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
BUFFSIZE
, 
XDR_ENCODE
);

27 i‡(
	`xdr_¨gs
(&
xh™dÀ
, &
out
Ë!
TRUE
)

28 
	`îr_quô
("xdr_argsÉrror");

29 
size
 = 
	`xdr_gëpos
(&
xh™dÀ
);

31 
Õå
 = (*Ë
buff
;

32 
i
 = 0; i < 
size
; i += 4)

33 
	`¥ötf
("%ld\n", (Ë
	`¡ohl
(*
Õå
++));

35 
	`exô
(0);

36 
	}
}

	@sunrpc/xdr1/opt1.h

6 #i‚de‡
_OPT1_H_RPCGEN


7 
	#_OPT1_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


16 
	s›é⁄g
 {

17 
boﬁ_t
 
Êag
;

19 
vÆ
;

20 } 
›é⁄g_u
;

22 
›é⁄g
 
	t›é⁄g
;

24 
	s¨gs
 {

25 
›é⁄g
 
¨g1
;

27 
u_öt
 
¨g2_Àn
;

28 *
¨g2_vÆ
;

29 } 
¨g2
;

30 *
¨g3
;

32 
¨gs
 
	t¨gs
;

36 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

37 
boﬁ_t
 
xdr_›é⁄g
(
XDR
 *, 
›é⁄g
*);

38 
boﬁ_t
 
xdr_¨gs
(
XDR
 *, 
¨gs
*);

41 
boﬁ_t
 
xdr_›é⁄g
();

42 
boﬁ_t
 
xdr_¨gs
();

46 #ifde‡
__˝lu•lus


	@sunrpc/xdr1/opt1.save.h

6 #i‚de‡
_OPT1_H_RPCGEN


7 
	#_OPT1_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


17 
	s›é⁄g
 {

18 
Êag
;

20 
vÆ
;

21 } 
›é⁄g_u
;

23 
›é⁄g
 
	t›é⁄g
;

25 
	s¨gs
 {

26 
›é⁄g
 
¨g1
;

28 
u_öt
 
¨g2_Àn
;

29 *
¨g2_vÆ
;

30 } 
¨g2
;

31 *
¨g3
;

33 
¨gs
 
	t¨gs
;

38 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

39 
boﬁ_t
 
xdr_›é⁄g
(
XDR
 *, 
›é⁄g
*);

40 
boﬁ_t
 
xdr_¨gs
(
XDR
 *, 
¨gs
*);

43 
boﬁ_t
 
xdr_›é⁄g
();

44 
boﬁ_t
 
xdr_¨gs
();

48 #ifde‡
__˝lu•lus


	@sunrpc/xdr1/opt1z.c

1 
	~"u≈ùc.h
"

2 
	~"›t1.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
i
;

8 
XDR
 
xh™dÀ
;

9 *
buff
;

10 *
Õå
;

11 
¨gs
 
out
;

12 
size_t
 
size
;

14 
out
.
¨g1
.
Êag
 = 
FALSE
;

15 
out
.
¨g2
.
¨g2_Àn
 = 0;

16 
out
.
¨g3
 = 
NULL
;

18 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

19 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
BUFFSIZE
, 
XDR_ENCODE
);

21 i‡(
	`xdr_¨gs
(&
xh™dÀ
, &
out
Ë!
TRUE
)

22 
	`îr_quô
("xdr_argsÉrror");

23 
size
 = 
	`xdr_gëpos
(&
xh™dÀ
);

25 
Õå
 = (*Ë
buff
;

26 
i
 = 0; i < 
size
; i += 4)

27 
	`¥ötf
("%ld\n", (Ë
	`¡ohl
(*
Õå
++));

29 
	`exô
(0);

30 
	}
}

	@sunrpc/xdr1/opt2.c

1 
	~"u≈ùc.h
"

2 
	~"›t2.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
i
;

8 
XDR
 
xh™dÀ
;

9 *
Õå
;

10 
¨gs
 
out
;

11 *
buff
;

12 
myli°
 
«mevÆ
[4];

13 
size_t
 
size
;

15 
out
.
li°
 = &
«mevÆ
[2];

16 
«mevÆ
[2].
«me
 = "name1";

17 
«mevÆ
[2].
vÆue
 = 0x1111;

18 
«mevÆ
[2].
√xt
 = &nameval[1];

19 
«mevÆ
[1].
«me
 = "namee2";

20 
«mevÆ
[1].
vÆue
 = 0x2222;

21 
«mevÆ
[1].
√xt
 = &nameval[0];

22 
«mevÆ
[0].
«me
 = "nameee3";

23 
«mevÆ
[0].
vÆue
 = 0x3333;

24 
«mevÆ
[0].
√xt
 = 
NULL
;

26 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

27 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
BUFFSIZE
, 
XDR_ENCODE
);

29 i‡(
	`xdr_¨gs
(&
xh™dÀ
, &
out
Ë!
TRUE
)

30 
	`îr_quô
("xdr_argsÉrror");

31 
size
 = 
	`xdr_gëpos
(&
xh™dÀ
);

33 
Õå
 = (*Ë
buff
;

34 
i
 = 0; i < 
size
; i += 4)

35 
	`¥ötf
("%8lx\n", (Ë
	`¡ohl
(*
Õå
++));

37 
	`exô
(0);

38 
	}
}

	@sunrpc/xdr1/opt2.h

6 #i‚de‡
_OPT2_H_RPCGEN


7 
	#_OPT2_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


16 
	smyli°
 {

17 *
«me
;

18 
vÆue
;

19 
myli°
 *
√xt
;

21 
myli°
 
	tmyli°
;

23 
	s¨gs
 {

24 
myli°
 *
li°
;

26 
¨gs
 
	t¨gs
;

30 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

31 
boﬁ_t
 
xdr_myli°
(
XDR
 *, 
myli°
*);

32 
boﬁ_t
 
xdr_¨gs
(
XDR
 *, 
¨gs
*);

35 
boﬁ_t
 
xdr_myli°
();

36 
boﬁ_t
 
xdr_¨gs
();

40 #ifde‡
__˝lu•lus


	@sunrpc/xdr1/opt2.save.h

6 #i‚de‡
_OPT2_H_RPCGEN


7 
	#_OPT2_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


17 
	smyli°
 {

18 *
«me
;

19 
vÆue
;

20 
myli°
 *
√xt
;

22 
myli°
 
	tmyli°
;

24 
	s¨gs
 {

25 
myli°
 *
li°
;

27 
¨gs
 
	t¨gs
;

32 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

33 
boﬁ_t
 
xdr_myli°
(
XDR
 *, 
myli°
*);

34 
boﬁ_t
 
xdr_¨gs
(
XDR
 *, 
¨gs
*);

37 
boﬁ_t
 
xdr_myli°
();

38 
boﬁ_t
 
xdr_¨gs
();

42 #ifde‡
__˝lu•lus


	@sunrpc/xdr1/opt2z.c

1 
	~"u≈ùc.h
"

2 
	~"›t2.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
i
;

8 
XDR
 
xh™dÀ
;

9 *
buff
;

10 *
Õå
;

11 
¨gs
 
out
;

12 
size_t
 
size
;

14 
out
.
li°
 = 
NULL
;

16 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

17 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
BUFFSIZE
, 
XDR_ENCODE
);

19 i‡(
	`xdr_¨gs
(&
xh™dÀ
, &
out
Ë!
TRUE
)

20 
	`îr_quô
("xdr_argsÉrror");

21 
size
 = 
	`xdr_gëpos
(&
xh™dÀ
);

23 
Õå
 = (*Ë
buff
;

24 
i
 = 0; i < 
size
; i += 4)

25 
	`¥ötf
("%8lx\n", (Ë
	`¡ohl
(*
Õå
++));

27 
	`exô
(0);

28 
	}
}

	@sunrpc/xdr1/read.c

1 
	~"u≈ùc.h
"

2 
	~"d©a.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
XDR
 
xh™dÀ
;

8 
i
;

9 *
buff
;

10 
d©a
 
ö
;

11 
ssize_t
 
n
;

13 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

14 
n
 = 
	`Ród
(
STDIN_FILENO
, 
buff
, 
BUFFSIZE
);

15 
	`¥ötf
("ªad %ld byãs\n", (Ë
n
);

17 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
n
, 
XDR_DECODE
);

18 
	`mem£t
(&
ö
, 0, (in));

19 i‡(
	`xdr_d©a
(&
xh™dÀ
, &
ö
Ë!
TRUE
)

20 
	`îr_quô
("xdr_dataÉrror");

22 
	`¥ötf
("short_arg = %d,Üong_arg = %ld, vstring_arg = '%s'\n",

23 
ö
.
sh‹t_¨g
, in.
l⁄g_¨g
, in.
v°rög_¨g
);

25 
	`¥ötf
("fopaque[] = %d, %d, %d\n",

26 
ö
.
f›aque_¨g
[0], in.fopaque_arg[1], in.fopaque_arg[2]);

28 
	`¥ötf
("vopaque<> =");

29 
i
 = 0; i < 
ö
.
v›aque_¨g
.
v›aque_¨g_Àn
; i++)

30 
	`¥ötf
(" %d", 
ö
.
v›aque_¨g
.
v›aque_¨g_vÆ
[
i
]);

31 
	`¥ötf
("\n");

33 
	`¥ötf
("fsh‹t_¨g[] = %d, %d, %d, %d\n", 
ö
.
fsh‹t_¨g
[0],

34 
ö
.
fsh‹t_¨g
[1], in.fshort_arg[2], in.fshort_arg[3]);

36 
	`¥ötf
("vlong<> =");

37 
i
 = 0; i < 
ö
.
vl⁄g_¨g
.
vl⁄g_¨g_Àn
; i++)

38 
	`¥ötf
(" %ld", 
ö
.
vl⁄g_¨g
.
vl⁄g_¨g_vÆ
[
i
]);

39 
	`¥ötf
("\n");

41 
ö
.
u¨g
.
ªsu…
) {

42 
RESULT_INT
:

43 
	`¥ötf
("u¨g (ötË%d\n", 
ö
.
u¨g
.
uni⁄_¨g_u
.
ötvÆ
);

45 
RESULT_DOUBLE
:

46 
	`¥ötf
("u¨g (doubÀË%g\n", 
ö
.
u¨g
.
uni⁄_¨g_u
.
doubÀvÆ
);

49 
	`¥ötf
("uarg (void)\n");

53 
	`xdr_‰ì
(
xdr_d©a
, (*Ë&
ö
);

55 
	`exô
(0);

56 
	}
}

	@sunrpc/xdr1/test1.h

6 #i‚de‡
_TEST1_H_RPCGEN


7 
	#_TEST1_H_RPCGEN


	)

9 
	~<Ωc/Ωc.h
>

11 #ifde‡
__˝lu•lus


16 
	s›é⁄g
 {

17 
dis¸
;

19 
vÆ
;

20 } 
›é⁄g_u
;

22 
›é⁄g
 
	t›é⁄g
;

24 
	s¨gs
 {

25 
›é⁄g
 
¨g0
;

27 
u_öt
 
¨g1_Àn
;

28 *
¨g1_vÆ
;

29 } 
¨g1
;

30 *
¨g2
;

32 
¨gs
 
	t¨gs
;

36 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

37 
boﬁ_t
 
xdr_›é⁄g
(
XDR
 *, 
›é⁄g
*);

38 
boﬁ_t
 
xdr_¨gs
(
XDR
 *, 
¨gs
*);

41 
boﬁ_t
 
xdr_›é⁄g
();

42 
boﬁ_t
 
xdr_¨gs
();

46 #ifde‡
__˝lu•lus


	@sunrpc/xdr1/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@sunrpc/xdr1/write.c

1 
	~"u≈ùc.h
"

2 
	~"d©a.h
"

5 
	$maö
(
¨gc
, **
¨gv
)

7 
XDR
 
xh™dÀ
;

8 
d©a
 
out
;

9 *
buff
;

10 
v›
[2];

11 
vl⁄g
[3];

12 
u_öt
 
size
;

14 
out
.
sh‹t_¨g
 = 1;

15 
out
.
l⁄g_¨g
 = 2;

16 
out
.
v°rög_¨g
 = "hello, world";

18 
out
.
f›aque_¨g
[0] = 99;

19 
out
.
f›aque_¨g
[1] = 88;

20 
out
.
f›aque_¨g
[2] = 77;

22 
v›
[0] = 33;

23 
v›
[1] = 44;

24 
out
.
v›aque_¨g
.
v›aque_¨g_Àn
 = 2;

25 
out
.
v›aque_¨g
.
v›aque_¨g_vÆ
 = 
v›
;

27 
out
.
fsh‹t_¨g
[0] = 9999;

28 
out
.
fsh‹t_¨g
[1] = 8888;

29 
out
.
fsh‹t_¨g
[2] = 7777;

30 
out
.
fsh‹t_¨g
[3] = 6666;

32 
vl⁄g
[0] = 123456;

33 
vl⁄g
[1] = 234567;

34 
vl⁄g
[2] = 345678;

35 
out
.
vl⁄g_¨g
.
vl⁄g_¨g_Àn
 = 3;

36 
out
.
vl⁄g_¨g
.
vl⁄g_¨g_vÆ
 = 
vl⁄g
;

38 
out
.
u¨g
.
ªsu…
 = 
RESULT_INT
;

39 
out
.
u¨g
.
uni⁄_¨g_u
.
ötvÆ
 = 123;

41 
buff
 = 
	`MÆloc
(
BUFFSIZE
);

42 
	`xdrmem_¸óã
(&
xh™dÀ
, 
buff
, 
BUFFSIZE
, 
XDR_ENCODE
);

44 i‡(
	`xdr_d©a
(&
xh™dÀ
, &
out
Ë!
TRUE
)

45 
	`îr_quô
("xdr_dataÉrror");

46 
size
 = 
	`xdr_gëpos
(&
xh™dÀ
);

47 
	`Wrôe
(
STDOUT_FILENO
, 
buff
, 
size
);

49 
	`exô
(0);

50 
	}
}

	@svipc/ftok.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
°©
 stat;

8 i‡(
¨gc
 != 2)

9 
	`îr_quô
("usage: ftok <pathname>");

11 
	`Sèt
(
¨gv
[1], &
°©
);

12 
	`¥ötf
("st_dev: %lx, st_ino: %lx, key: %x\n",

13 (
u_l⁄g
Ë
°©
.
°_dev
, (u_l⁄gË°©.
°_öo
,

14 
	`Ftok
(
¨gv
[1], 0x57));

16 
	`exô
(0);

17 
	}
}

	@svipc/ftok1.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
°©
 stat;

8 i‡(
¨gc
 != 2)

9 
	`îr_quô
("usage: ftok1 <pathname>");

11 
	`Sèt
(
¨gv
[1], &
°©
);

12 
	`¥ötf
("%x %s\n", 
	`Ftok
(
¨gv
[1], 0x57),árgv[1]);

14 
	`exô
(0);

15 
	}
}

	@svipc/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@svmsg/ctl.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
msqid
;

7 
msqid_ds
 
öfo
;

8 
msgbuf
 
buf
;

10 
msqid
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

12 
buf
.
mty≥
 = 1;

13 
buf
.
mãxt
[0] = 1;

14 
	`Msg¢d
(
msqid
, &
buf
, 1, 0);

16 
	`Msg˘l
(
msqid
, 
IPC_STAT
, &
öfo
);

17 
	`¥ötf
("read-write: %03o, cbytes = %lu, qnum = %lu, qbytes = %lu\n",

18 
öfo
.
msg_≥rm
.
mode
 & 0777, (
ul⁄g_t
Ëöfo.
msg_cbyãs
,

19 (
ul⁄g_t
Ë
öfo
.
msg_qnum
, (ul⁄g_tËöfo.
msg_qbyãs
);

21 
	`sy°em
("ipcs -q");

23 
	`Msg˘l
(
msqid
, 
IPC_RMID
, 
NULL
);

24 
	`exô
(0);

25 
	}
}

	@svmsg/limits.c

1 
	~"u≈ùc.h
"

3 
	#MAX_DATA
 64*1024

	)

4 
	#MAX_NMESG
 4096

	)

5 
	#MAX_NIDS
 4096

	)

6 
	gmax_mesg
;

8 
	smymesg
 {

9 
	mty≥
;

10 
	md©a
[
MAX_DATA
];

11 } 
	gmesg
;

14 
	$maö
(
¨gc
, **
¨gv
)

16 
i
, 
j
, 
msqid
, 
qid
[
MAX_NIDS
];

19 
msqid
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

20 
mesg
.
ty≥
 = 1;

21 
i
 = 
MAX_DATA
; i > 0; i -= 128) {

22 i‡(
	`msg¢d
(
msqid
, &
mesg
, 
i
, 0) == 0) {

23 
	`¥ötf
("maximumámou¡ o‡d©®≥∏mesßgê%d\n", 
i
);

24 
max_mesg
 = 
i
;

27 i‡(
î∫o
 !
EINVAL
)

28 
	`îr_sys
("msg¢dÉº‹ f‹Üígth %d", 
i
);

30 i‡(
i
 == 0)

31 
	`îr_quô
("i == 0");

32 
	`Msg˘l
(
msqid
, 
IPC_RMID
, 
NULL
);

35 
mesg
.
ty≥
 = 1;

36 
i
 = 8; i <
max_mesg
; i *= 2) {

37 
msqid
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

38 
j
 = 0; j < 
MAX_NMESG
; j++) {

39 i‡(
	`msg¢d
(
msqid
, &
mesg
, 
i
, 
IPC_NOWAIT
) != 0) {

40 i‡(
î∫o
 =
EAGAIN
)

42 
	`îr_sys
("msg¢dÉº‹, i = %d, j = %d", 
i
, 
j
);

46 
	`¥ötf
("%d %d-byã mesßge†wîê∂a˚d o¡ÿqueue,", 
j
, 
i
);

47 
	`¥ötf
(" %d byã†tŸÆ\n", 
i
*
j
);

48 
	`Msg˘l
(
msqid
, 
IPC_RMID
, 
NULL
);

52 
mesg
.
ty≥
 = 1;

53 
i
 = 0; i <
MAX_NIDS
; i++) {

54 i‡–(
qid
[
i
] = 
	`msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
)) == -1) {

55 
	`¥ötf
("%d idítifõr†›íáà⁄˚\n", 
i
);

59 
j
 = 0; j < 
i
; j++)

60 
	`Msg˘l
(
qid
[
j
], 
IPC_RMID
, 
NULL
);

62 
	`exô
(0);

63 
	}
}

	@svmsg/msgcreate.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
oÊag
, 
mqid
;

8 
oÊag
 = 
SVMSG_MODE
 | 
IPC_CREAT
;

9  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "e")) != -1) {

10 
c
) {

12 
oÊag
 |
IPC_EXCL
;

16 i‡(
›töd
 !
¨gc
 - 1)

17 
	`îr_quô
("usage: msgcreate [ -e ] <pathname>");

19 
mqid
 = 
	`Msggë
(
	`Ftok
(
¨gv
[
›töd
], 0), 
oÊag
);

20 
	`exô
(0);

21 
	}
}

	@svmsg/msgrcv.c

1 
	~"u≈ùc.h
"

3 
	#MAXMSG
 (8192 + ())

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
c
, 
Êag
, 
mqid
;

9 
ty≥
;

10 
ssize_t
 
n
;

11 
msgbuf
 *
buff
;

13 
ty≥
 = 
Êag
 = 0;

14  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "nt:")) != -1) {

15 
c
) {

17 
Êag
 |
IPC_NOWAIT
;

21 
ty≥
 = 
	`©ﬁ
(
›èrg
);

25 i‡(
›töd
 !
¨gc
 - 1)

26 
	`îr_quô
("usage: msgrcv [ -n ] [ -tÅype ] <pathname>");

28 
mqid
 = 
	`Msggë
(
	`Ftok
(
¨gv
[
›töd
], 0), 
MSG_R
);

30 
buff
 = 
	`MÆloc
(
MAXMSG
);

32 
n
 = 
	`Msgrcv
(
mqid
, 
buff
, 
MAXMSG
, 
ty≥
, 
Êag
);

33 
	`¥ötf
("ªad %d byãs,Åy≥ = %ld\n", 
n
, 
buff
->
mty≥
);

35 
	`exô
(0);

36 
	}
}

	@svmsg/msgrcvid.c

1 
	~"u≈ùc.h
"

3 
	#MAXMSG
 (8192 + ())

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
mqid
;

9 
ssize_t
 
n
;

10 
msgbuf
 *
buff
;

12 i‡(
¨gc
 != 2)

13 
	`îr_quô
("usage: msgrcvid <mqid>");

14 
mqid
 = 
	`©oi
(
¨gv
[1]);

16 
buff
 = 
	`MÆloc
(
MAXMSG
);

18 
n
 = 
	`Msgrcv
(
mqid
, 
buff
, 
MAXMSG
, 0, 0);

19 
	`¥ötf
("ªad %d byãs,Åy≥ = %ld\n", 
n
, 
buff
->
mty≥
);

21 
	`exô
(0);

22 
	}
}

	@svmsg/msgrmid.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
mqid
;

8 i‡(
¨gc
 != 2)

9 
	`îr_quô
("usage: msgrmid <pathname>");

11 
mqid
 = 
	`Msggë
(
	`Ftok
(
¨gv
[1], 0), 0);

12 
	`Msg˘l
(
mqid
, 
IPC_RMID
, 
NULL
);

14 
	`exô
(0);

15 
	}
}

	@svmsg/msgsnd.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
mqid
;

7 
size_t
 
Àn
;

8 
ty≥
;

9 
msgbuf
 *
±r
;

11 i‡(
¨gc
 != 4)

12 
	`îr_quô
("usage: msgsnd <pathname> <#bytes> <type>");

13 
Àn
 = 
	`©oi
(
¨gv
[2]);

14 
ty≥
 = 
	`©oi
(
¨gv
[3]);

16 
mqid
 = 
	`Msggë
(
	`Ftok
(
¨gv
[1], 0), 
MSG_W
);

18 
±r
 = 
	`CÆloc
((Ë+ 
Àn
, ());

19 
±r
->
mty≥
 = 
ty≥
;

21 
	`Msg¢d
(
mqid
, 
±r
, 
Àn
, 0);

23 
	`exô
(0);

24 
	}
}

	@svmsg/slot.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
msqid
;

8 
i
 = 0; i < 10; i++) {

9 
msqid
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

10 
	`¥ötf
("msqid = %d\n", 
msqid
);

12 
	`Msg˘l
(
msqid
, 
IPC_RMID
, 
NULL
);

14 
	`exô
(0);

15 
	}
}

	@svmsg/slotseq.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
msqid
;

7 
msqid_ds
 
öfo
;

9 
i
 = 0; i < 10; i++) {

10 
msqid
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

11 
	`Msg˘l
(
msqid
, 
IPC_STAT
, &
öfo
);

12 
	`¥ötf
("msqid = %d, seq = %lu\n", 
msqid
, 
öfo
.
msg_≥rm
.
£q
);

14 
	`Msg˘l
(
msqid
, 
IPC_RMID
, 
NULL
);

16 
	`exô
(0);

17 
	}
}

	@svmsg/testumask.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
	`Msggë
(
IPC_PRIVATE
, 0666 | 
IPC_CREAT
 | 
IPC_EXCL
);

7 
	`u∆ök
("/tmp/fifo.1");

8 
	`Mkfifo
("/tmp/fifo.1", 0666);

10 
	`exô
(0);

11 
	}
}

	@svmsg/twoqueues.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
msqid1
, 
msqid2
;

8 
msqid1
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

9 
msqid2
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

10 
	`¥ötf
("msqid1 = %d, msgqid2 = %d\n", 
msqid1
, 
msqid2
);

12 
	`exô
(0);

13 
	}
}

	@svmsg/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@svmsgcliserv/client.c

1 
	~"mesg.h
"

4 
	$˛õ¡
(
ªadfd
, 
wrôefd
)

6 
size_t
 
Àn
;

7 
ssize_t
 
n
;

8 
mymesg
 
mesg
;

11 
	`Fgës
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, 
°dö
);

12 
Àn
 = 
	`°æí
(
mesg
.
mesg_d©a
);

13 i‡(
mesg
.
mesg_d©a
[
Àn
-1] == '\n')

14 
Àn
--;

15 
mesg
.
mesg_Àn
 = 
Àn
;

16 
mesg
.
mesg_ty≥
 = 1;

19 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

22  (
n
 = 
	`Mesg_ªcv
(
ªadfd
, &
mesg
)) > 0)

23 
	`Wrôe
(
STDOUT_FILENO
, 
mesg
.
mesg_d©a
, 
n
);

24 
	}
}

	@svmsgcliserv/client_main.c

1 
	~"svmsg.h
"

3 
˛õ¡
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
ªadid
, 
wrôeid
;

11 
wrôeid
 = 
	`Msggë
(
MQ_KEY1
, 0);

12 
ªadid
 = 
	`Msggë
(
MQ_KEY2
, 0);

14 
	`˛õ¡
(
ªadid
, 
wrôeid
);

17 
	`Msg˘l
(
ªadid
, 
IPC_RMID
, 
NULL
);

18 
	`Msg˘l
(
wrôeid
, 
IPC_RMID
, 
NULL
);

20 
	`exô
(0);

21 
	}
}

	@svmsgcliserv/mesg.h

1 
	~"u≈ùc.h
"

6 
	#MAXMESGDATA
 (
PIPE_BUF
 - 2*())

	)

9 
	#MESGHDRSIZE
 ((
mymesg
Ë- 
MAXMESGDATA
)

	)

11 
	smymesg
 {

12 
	mmesg_Àn
;

13 
	mmesg_ty≥
;

14 
	mmesg_d©a
[
MAXMESGDATA
];

17 
ssize_t
 
mesg_£nd
(, 
mymesg
 *);

18 
Mesg_£nd
(, 
mymesg
 *);

19 
ssize_t
 
mesg_ªcv
(, 
mymesg
 *);

20 
ssize_t
 
Mesg_ªcv
(, 
mymesg
 *);

	@svmsgcliserv/mesg_recv.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_ªcv
(
id
, 
mymesg
 *
m±r
)

7 
ssize_t
 
n
;

9 
n
 = 
	`msgrcv
(
id
, &(
m±r
->
mesg_ty≥
), 
MAXMESGDATA
, mptr->mesg_type, 0);

10 
m±r
->
mesg_Àn
 = 
n
;

12 (
n
);

13 
	}
}

16 
ssize_t


17 
	$Mesg_ªcv
(
id
, 
mymesg
 *
m±r
)

19 
ssize_t
 
n
;

21 i‡–(
n
 = 
	`mesg_ªcv
(
id
, 
m±r
)) == -1)

22 
	`îr_sys
("mesg_recvÉrror");

23 (
n
);

24 
	}
}

	@svmsgcliserv/mesg_send.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_£nd
(
id
, 
mymesg
 *
m±r
)

7 (
	`msg¢d
(
id
, &(
m±r
->
mesg_ty≥
), m±r->
mesg_Àn
, 0));

8 
	}
}

12 
	$Mesg_£nd
(
id
, 
mymesg
 *
m±r
)

14 
ssize_t
 
n
;

16 i‡–(
n
 = 
	`msg¢d
(
id
, &(
m±r
->
mesg_ty≥
), m±r->
mesg_Àn
, 0)) == -1)

17 
	`îr_sys
("mesg_sendÉrror");

18 
	}
}

	@svmsgcliserv/server.c

1 
	~"mesg.h
"

4 
	$£rvî
(
ªadfd
, 
wrôefd
)

6 
FILE
 *
Â
;

7 
ssize_t
 
n
;

8 
mymesg
 
mesg
;

11 
mesg
.
mesg_ty≥
 = 1;

12 i‡–(
n
 = 
	`Mesg_ªcv
(
ªadfd
, &
mesg
)) == 0)

13 
	`îr_quô
("pathname missing");

14 
mesg
.
mesg_d©a
[
n
] = '\0';

16 i‡–(
Â
 = 
	`f›í
(
mesg
.
mesg_d©a
, "r")Ë=
NULL
) {

18 
	`¢¥ötf
(
mesg
.
mesg_d©a
 + 
n
, (mesg.mesg_data) -Ç,

19 ": c™'à›í, %s\n", 
	`°ªº‹
(
î∫o
));

20 
mesg
.
mesg_Àn
 = 
	`°æí
(mesg.
mesg_d©a
);

21 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

25 
	`Fgës
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, 
Â
Ë!
NULL
) {

26 
mesg
.
mesg_Àn
 = 
	`°æí
(mesg.
mesg_d©a
);

27 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

29 
	`F˛o£
(
Â
);

33 
mesg
.
mesg_Àn
 = 0;

34 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

35 
	}
}

	@svmsgcliserv/server_main.c

1 
	~"svmsg.h
"

3 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
ªadid
, 
wrôeid
;

10 
ªadid
 = 
	`Msggë
(
MQ_KEY1
, 
SVMSG_MODE
 | 
IPC_CREAT
);

11 
wrôeid
 = 
	`Msggë
(
MQ_KEY2
, 
SVMSG_MODE
 | 
IPC_CREAT
);

13 
	`£rvî
(
ªadid
, 
wrôeid
);

15 
	`exô
(0);

16 
	}
}

	@svmsgcliserv/svmsg.h

1 
	~"u≈ùc.h
"

3 
	#MQ_KEY1
 1234L

	)

4 
	#MQ_KEY2
 2345L

	)

	@svmsgcliserv/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@svmsgmpx1q/client.c

1 
	~"mesg.h
"

4 
	$˛õ¡
(
ªadfd
, 
wrôefd
)

6 
size_t
 
Àn
;

7 
ssize_t
 
n
;

8 *
±r
;

9 
mymesg
 
mesg
;

12 
	`¢¥ötf
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, "%ld ", (Ë
	`gëpid
());

13 
Àn
 = 
	`°æí
(
mesg
.
mesg_d©a
);

14 
±r
 = 
mesg
.
mesg_d©a
 + 
Àn
;

17 
	`Fgës
(
±r
, 
MAXMESGDATA
 - 
Àn
, 
°dö
);

18 
Àn
 = 
	`°æí
(
mesg
.
mesg_d©a
);

19 i‡(
mesg
.
mesg_d©a
[
Àn
-1] == '\n')

20 
Àn
--;

21 
mesg
.
mesg_Àn
 = 
Àn
;

22 
mesg
.
mesg_ty≥
 = 1;

25 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

28 
mesg
.
mesg_ty≥
 = 
	`gëpid
();

29  (
n
 = 
	`Mesg_ªcv
(
ªadfd
, &
mesg
)) > 0)

30 
	`Wrôe
(
STDOUT_FILENO
, 
mesg
.
mesg_d©a
, 
n
);

31 
	}
}

	@svmsgmpx1q/client_main.c

1 
	~"svmsg.h
"

3 
˛õ¡
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
msqid
;

11 
msqid
 = 
	`Msggë
(
MQ_KEY1
, 0);

13 
	`˛õ¡
(
msqid
, msqid);

15 
	`exô
(0);

16 
	}
}

	@svmsgmpx1q/mesg.h

1 
	~"u≈ùc.h
"

6 
	#MAXMESGDATA
 (
PIPE_BUF
 - 2*())

	)

9 
	#MESGHDRSIZE
 ((
mymesg
Ë- 
MAXMESGDATA
)

	)

11 
	smymesg
 {

12 
	mmesg_Àn
;

13 
	mmesg_ty≥
;

14 
	mmesg_d©a
[
MAXMESGDATA
];

17 
ssize_t
 
mesg_£nd
(, 
mymesg
 *);

18 
Mesg_£nd
(, 
mymesg
 *);

19 
ssize_t
 
mesg_ªcv
(, 
mymesg
 *);

20 
ssize_t
 
Mesg_ªcv
(, 
mymesg
 *);

	@svmsgmpx1q/mesg_recv.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_ªcv
(
id
, 
mymesg
 *
m±r
)

7 
ssize_t
 
n
;

9 
n
 = 
	`msgrcv
(
id
, &(
m±r
->
mesg_ty≥
), 
MAXMESGDATA
, mptr->mesg_type, 0);

10 
m±r
->
mesg_Àn
 = 
n
;

12 (
n
);

13 
	}
}

16 
ssize_t


17 
	$Mesg_ªcv
(
id
, 
mymesg
 *
m±r
)

19 
ssize_t
 
n
;

21 i‡–(
n
 = 
	`mesg_ªcv
(
id
, 
m±r
)) == -1)

22 
	`îr_sys
("mesg_recvÉrror");

23 (
n
);

24 
	}
}

	@svmsgmpx1q/mesg_send.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_£nd
(
id
, 
mymesg
 *
m±r
)

7 (
	`msg¢d
(
id
, &(
m±r
->
mesg_ty≥
), m±r->
mesg_Àn
, 0));

8 
	}
}

12 
	$Mesg_£nd
(
id
, 
mymesg
 *
m±r
)

14 
ssize_t
 
n
;

16 i‡–(
n
 = 
	`msg¢d
(
id
, &(
m±r
->
mesg_ty≥
), m±r->
mesg_Àn
, 0)) == -1)

17 
	`îr_sys
("mesg_sendÉrror");

18 
	}
}

	@svmsgmpx1q/server.c

1 
	~"mesg.h
"

4 
	$£rvî
(
ªadfd
, 
wrôefd
)

6 
FILE
 *
Â
;

7 *
±r
;

8 
pid_t
 
pid
;

9 
ssize_t
 
n
;

10 
mymesg
 
mesg
;

14 
mesg
.
mesg_ty≥
 = 1;

15 i‡–(
n
 = 
	`Mesg_ªcv
(
ªadfd
, &
mesg
)) == 0) {

16 
	`îr_msg
("pathname missing");

19 
mesg
.
mesg_d©a
[
n
] = '\0';

21 i‡–(
±r
 = 
	`°rchr
(
mesg
.
mesg_d©a
, ' ')Ë=
NULL
) {

22 
	`îr_msg
("bogu†ªque°: %s", 
mesg
.
mesg_d©a
);

26 *
±r
++ = 0;

27 
pid
 = 
	`©ﬁ
(
mesg
.
mesg_d©a
);

28 
mesg
.
mesg_ty≥
 = 
pid
;

30 i‡–(
Â
 = 
	`f›í
(
±r
, "r")Ë=
NULL
) {

32 
	`¢¥ötf
(
mesg
.
mesg_d©a
 + 
n
, (mesg.mesg_data) -Ç,

33 ": c™'à›í, %s\n", 
	`°ªº‹
(
î∫o
));

34 
mesg
.
mesg_Àn
 = 
	`°æí
(
±r
);

35 
	`memmove
(
mesg
.
mesg_d©a
, 
±r
, mesg.
mesg_Àn
);

36 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

40 
	`Fgës
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, 
Â
Ë!
NULL
) {

41 
mesg
.
mesg_Àn
 = 
	`°æí
(mesg.
mesg_d©a
);

42 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

44 
	`F˛o£
(
Â
);

48 
mesg
.
mesg_Àn
 = 0;

49 
	`Mesg_£nd
(
wrôefd
, &
mesg
);

51 
	}
}

	@svmsgmpx1q/server_main.c

1 
	~"svmsg.h
"

3 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
msqid
;

10 
msqid
 = 
	`Msggë
(
MQ_KEY1
, 
SVMSG_MODE
 | 
IPC_CREAT
);

12 
	`£rvî
(
msqid
, msqid);

14 
	`exô
(0);

15 
	}
}

	@svmsgmpx1q/svmsg.h

1 
	~"u≈ùc.h
"

3 
	#MQ_KEY1
 1234L

	)

4 
	#MQ_KEY2
 2345L

	)

	@svmsgmpx1q/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@svmsgmpxnq/client.c

1 
	~"mesg.h
"

4 
	$˛õ¡
(
ªadid
, 
wrôeid
)

6 
size_t
 
Àn
;

7 
ssize_t
 
n
;

8 *
±r
;

9 
mymesg
 
mesg
;

12 
	`¢¥ötf
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, "%d ", 
ªadid
);

13 
Àn
 = 
	`°æí
(
mesg
.
mesg_d©a
);

14 
±r
 = 
mesg
.
mesg_d©a
 + 
Àn
;

17 
	`Fgës
(
±r
, 
MAXMESGDATA
 - 
Àn
, 
°dö
);

18 
Àn
 = 
	`°æí
(
mesg
.
mesg_d©a
);

19 i‡(
mesg
.
mesg_d©a
[
Àn
-1] == '\n')

20 
Àn
--;

21 
mesg
.
mesg_Àn
 = 
Àn
;

22 
mesg
.
mesg_ty≥
 = 1;

25 
	`Mesg_£nd
(
wrôeid
, &
mesg
);

28  (
n
 = 
	`Mesg_ªcv
(
ªadid
, &
mesg
)) > 0)

29 
	`Wrôe
(
STDOUT_FILENO
, 
mesg
.
mesg_d©a
, 
n
);

30 
	}
}

	@svmsgmpxnq/client_main.c

1 
	~"svmsg.h
"

3 
˛õ¡
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
ªadid
, 
wrôeid
;

11 
wrôeid
 = 
	`Msggë
(
MQ_KEY1
, 0);

13 
ªadid
 = 
	`Msggë
(
IPC_PRIVATE
, 
SVMSG_MODE
 | 
IPC_CREAT
);

15 
	`˛õ¡
(
ªadid
, 
wrôeid
);

18 
	`Msg˘l
(
ªadid
, 
IPC_RMID
, 
NULL
);

20 
	`exô
(0);

21 
	}
}

	@svmsgmpxnq/mesg.h

1 
	~"u≈ùc.h
"

6 
	#MAXMESGDATA
 (
PIPE_BUF
 - 2*())

	)

9 
	#MESGHDRSIZE
 ((
mymesg
Ë- 
MAXMESGDATA
)

	)

11 
	smymesg
 {

12 
	mmesg_Àn
;

13 
	mmesg_ty≥
;

14 
	mmesg_d©a
[
MAXMESGDATA
];

17 
ssize_t
 
mesg_£nd
(, 
mymesg
 *);

18 
Mesg_£nd
(, 
mymesg
 *);

19 
ssize_t
 
mesg_ªcv
(, 
mymesg
 *);

20 
ssize_t
 
Mesg_ªcv
(, 
mymesg
 *);

	@svmsgmpxnq/mesg_recv.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_ªcv
(
id
, 
mymesg
 *
m±r
)

7 
ssize_t
 
n
;

9 
n
 = 
	`msgrcv
(
id
, &(
m±r
->
mesg_ty≥
), 
MAXMESGDATA
, mptr->mesg_type, 0);

10 
m±r
->
mesg_Àn
 = 
n
;

12 (
n
);

13 
	}
}

17 
ssize_t


18 
	$Mesg_ªcv
(
id
, 
mymesg
 *
m±r
)

20 
ssize_t
 
n
;

23 
n
 = 
	`mesg_ªcv
(
id
, 
m±r
);

24 } 
n
 =-1 && 
î∫o
 =
EINTR
);

26 i‡(
n
 == -1)

27 
	`îr_sys
("mesg_recvÉrror");

29 (
n
);

30 
	}
}

	@svmsgmpxnq/mesg_send.c

2 
	~"mesg.h
"

4 
ssize_t


5 
	$mesg_£nd
(
id
, 
mymesg
 *
m±r
)

7 (
	`msg¢d
(
id
, &(
m±r
->
mesg_ty≥
), m±r->
mesg_Àn
, 0));

8 
	}
}

12 
	$Mesg_£nd
(
id
, 
mymesg
 *
m±r
)

14 
ssize_t
 
n
;

16 i‡–(
n
 = 
	`msg¢d
(
id
, &(
m±r
->
mesg_ty≥
), m±r->
mesg_Àn
, 0)) == -1)

17 
	`îr_sys
("mesg_sendÉrror");

18 
	}
}

	@svmsgmpxnq/server.c

1 
	~"mesg.h
"

4 
	$£rvî
(
ªadid
, 
wrôeid
)

6 
FILE
 *
Â
;

7 *
±r
;

8 
ssize_t
 
n
;

9 
mymesg
 
mesg
;

10 
	`sig_chld
();

12 
	`Sig«l
(
SIGCHLD
, 
sig_chld
);

16 
mesg
.
mesg_ty≥
 = 1;

17 i‡–(
n
 = 
	`Mesg_ªcv
(
ªadid
, &
mesg
)) == 0) {

18 
	`îr_msg
("pathname missing");

21 
mesg
.
mesg_d©a
[
n
] = '\0';

23 i‡–(
±r
 = 
	`°rchr
(
mesg
.
mesg_d©a
, ' ')Ë=
NULL
) {

24 
	`îr_msg
("bogu†ªque°: %s", 
mesg
.
mesg_d©a
);

27 *
±r
++ = 0;

28 
wrôeid
 = 
	`©oi
(
mesg
.
mesg_d©a
);

30 i‡(
	`F‹k
() == 0) {

31 i‡–(
Â
 = 
	`f›í
(
±r
, "r")Ë=
NULL
) {

33 
	`¢¥ötf
(
mesg
.
mesg_d©a
 + 
n
, (mesg.mesg_data) -Ç,

34 ": c™'à›í, %s\n", 
	`°ªº‹
(
î∫o
));

35 
mesg
.
mesg_Àn
 = 
	`°æí
(
±r
);

36 
	`memmove
(
mesg
.
mesg_d©a
, 
±r
, mesg.
mesg_Àn
);

37 
	`Mesg_£nd
(
wrôeid
, &
mesg
);

41 
	`Fgës
(
mesg
.
mesg_d©a
, 
MAXMESGDATA
, 
Â
Ë!
NULL
) {

42 
mesg
.
mesg_Àn
 = 
	`°æí
(mesg.
mesg_d©a
);

43 
	`Mesg_£nd
(
wrôeid
, &
mesg
);

45 
	`F˛o£
(
Â
);

49 
mesg
.
mesg_Àn
 = 0;

50 
	`Mesg_£nd
(
wrôeid
, &
mesg
);

51 
	`exô
(0);

55 
	}
}

	@svmsgmpxnq/server_main.c

1 
	~"svmsg.h
"

3 
£rvî
(, );

6 
	$maö
(
¨gc
, **
¨gv
)

8 
msqid
;

10 
msqid
 = 
	`Msggë
(
MQ_KEY1
, 
SVMSG_MODE
 | 
IPC_CREAT
);

12 
	`£rvî
(
msqid
, msqid);

14 
	`exô
(0);

15 
	}
}

	@svmsgmpxnq/sigchldwaitpid.c

1 
	~"u≈ùc.h
"

4 
	$sig_chld
(
signo
)

6 
pid_t
 
pid
;

7 
°©
;

9  (
pid
 = 
	`waôpid
(-1, &
°©
, 
WNOHANG
)) > 0)

12 
	}
}

	@svmsgmpxnq/svmsg.h

1 
	~"u≈ùc.h
"

3 
	#MQ_KEY1
 1234L

	)

4 
	#MQ_KEY2
 2345L

	)

	@svmsgmpxnq/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@svsem/initval.c

1 
	~"u≈ùc.h
"

3 
	#NSEMS
 10

	)

6 
	$maö
(
¨gc
, **
¨gv
)

8 
£mid
, 
i
, 
j
;

9 *
±r
;

10 
£mun
 
¨g
;

13 
±r
 = 
	`CÆloc
(
NSEMS
, ());

14 
¨g
.
¨øy
 = 
±r
;

16 
j
 = 0; j < 1000; j++) {

18 
£mid
 = 
	`Semgë
(100, 
NSEMS
, 
IPC_CREAT
 | 
IPC_EXCL
 | 
SVSEM_MODE
);

21 
	`Sem˘l
(
£mid
, 0, 
GETALL
, 
¨g
);

22 
i
 = 0; i < 
NSEMS
; i++)

23 
	`¥ötf
("£mvÆ[%d] = %d\n", 
i
, 
±r
[i]);

26 
i
 = 0; i < 
NSEMS
; i++)

27 
±r
[
i
] = 
	`ønd
();

28 
	`Sem˘l
(
£mid
, 0, 
SETALL
, 
¨g
);

31 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

34 
	`exô
(0);

35 
	}
}

	@svsem/limits.c

1 
	~"u≈ùc.h
"

4 
	#MAX_NIDS
 4096

	)

5 
	#MAX_VALUE
 1024*1024

	)

6 
	#MAX_MEMBERS
 4096

	)

7 
	#MAX_NOPS
 4096

	)

8 
	#MAX_NPROC
 
	`Sysc⁄f
(
_SC_CHILD_MAX
)

	)

11 
	$maö
(
¨gc
, **
¨gv
)

13 
i
, 
j
, 
£mid
, 
sid
[
MAX_NIDS
], 
pùefd
[2];

14 
£mmni
, 
£mvmx
, 
£mm¶
, 
£mmns
, 
£m›n
, 
£m´m
, 
£mume
, 
£mmnu
;

15 
pid_t
 *
chûd
;

16 
£mun
 
¨g
;

17 
£mbuf
 
›s
[
MAX_NOPS
];

20 
i
 = 0; i <
MAX_NIDS
; i++) {

21 
sid
[
i
] = 
	`£mgë
(
IPC_PRIVATE
, 1, 
SVSEM_MODE
 | 
IPC_CREAT
);

22 i‡(
sid
[
i
] == -1) {

23 
£mmni
 = 
i
;

24 
	`¥ötf
("%d idítifõr†›íáà⁄˚\n", 
£mmni
);

29 
j
 = 7; j < 
MAX_VALUE
; j += 8) {

30 
¨g
.
vÆ
 = 
j
;

31 i‡(
	`£m˘l
(
sid
[0], 0, 
SETVAL
, 
¨g
) == -1) {

32 
£mvmx
 = 
j
 - 8;

33 
	`¥ötf
("max sem≠h‹êvÆuê%d\n", 
£mvmx
);

37 
j
 = 0; j < 
i
; j++)

38 
	`Sem˘l
(
sid
[
j
], 0, 
IPC_RMID
);

41 
i
 = 1; i <
MAX_MEMBERS
; i++) {

42 
£mid
 = 
	`£mgë
(
IPC_PRIVATE
, 
i
, 
SVSEM_MODE
 | 
IPC_CREAT
);

43 i‡(
£mid
 == -1) {

44 
£mm¶
 = 
i
-1;

45 
	`¥ötf
("max o‡%d membî†≥∏£t\n", 
£mm¶
);

48 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

52 
£mmns
 = 0;

53 
i
 = 0; i < 
£mmni
; i++) {

54 
sid
[
i
] = 
	`£mgë
(
IPC_PRIVATE
, 
£mm¶
, 
SVSEM_MODE
 | 
IPC_CREAT
);

55 i‡(
sid
[
i
] == -1) {

62 
j
 = 
£mm¶
-1; j > 0; j--) {

63 
sid
[
i
] = 
	`£mgë
(
IPC_PRIVATE
, 
j
, 
SVSEM_MODE
 | 
IPC_CREAT
);

64 i‡(
sid
[
i
] != -1) {

65 
£mmns
 +
j
;

66 
	`¥ötf
("max o‡%d sem≠h‹es\n", 
£mmns
);

67 
	`Sem˘l
(
sid
[
i
], 0, 
IPC_RMID
);

68 
d⁄e
;

71 
	`îr_quô
("jÑóched 0, semmn†%d", 
£mmns
);

73 
£mmns
 +
£mm¶
;

75 
	`¥ötf
("max o‡%d sem≠h‹es\n", 
£mmns
);

76 
d⁄e
:

77 
j
 = 0; j < 
i
; j++)

78 
	`Sem˘l
(
sid
[
j
], 0, 
IPC_RMID
);

81 
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 
£mm¶
, 
SVSEM_MODE
 | 
IPC_CREAT
);

82 
i
 = 1; i <
MAX_NOPS
; i++) {

83 
›s
[
i
-1].
£m_num
 = i-1;

84 
›s
[
i
-1].
£m_›
 = 1;

85 
›s
[
i
-1].
£m_Êg
 = 0;

86 i‡(
	`£m›
(
£mid
, 
›s
, 
i
) == -1) {

87 i‡(
î∫o
 !
E2BIG
)

88 
	`îr_sys
("expected E2BIG from semop");

89 
£m›n
 = 
i
-1;

90 
	`¥ötf
("max o‡%d o≥øti⁄†≥∏£m›()\n", 
£m›n
);

94 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

98 
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 1, 
SVSEM_MODE
 | 
IPC_CREAT
);

99 
¨g
.
vÆ
 = 
£mvmx
;

100 
	`Sem˘l
(
£mid
, 0, 
SETVAL
, 
¨g
);

101 
i
 = 
£mvmx
-1; i > 0; i--) {

102 
›s
[0].
£m_num
 = 0;

103 
›s
[0].
£m_›
 = -
i
;

104 
›s
[0].
£m_Êg
 = 
SEM_UNDO
;

105 i‡(
	`£m›
(
£mid
, 
›s
, 1) != -1) {

106 
£m´m
 = 
i
;

107 
	`¥ötf
("max vÆuêo‡adju°-⁄-exô = %d\n", 
£m´m
);

111 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

115 
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 1, 
SVSEM_MODE
 | 
IPC_CREAT
);

116 
¨g
.
vÆ
 = 0;

117 
	`Sem˘l
(
£mid
, 0, 
SETVAL
, 
¨g
);

118 
	`Pùe
(
pùefd
);

119 
chûd
 = 
	`MÆloc
(
MAX_NPROC
 * (
pid_t
));

120 
i
 = 0; i < 
MAX_NPROC
; i++) {

121 i‡–(
chûd
[
i
] = 
	`f‹k
()) == -1) {

122 
£mmnu
 = 
i
 - 1;

123 
	`¥ötf
("f‹k faûed, semmnuáàÀa° %d\n", 
£mmnu
);

125 } i‡(
chûd
[
i
] == 0) {

126 
›s
[0].
£m_num
 = 0;

127 
›s
[0].
£m_›
 = 1;

128 
›s
[0].
£m_Êg
 = 
SEM_UNDO
;

129 
j
 = 
	`£m›
(
£mid
, 
›s
, 1);

130 
	`Wrôe
(
pùefd
[1], &
j
, (j));

131 
	`¶ìp
(30);

132 
	`exô
(0);

135 
	`Ród
(
pùefd
[0], &
j
, (j));

136 i‡(
j
 == -1) {

137 
£mmnu
 = 
i
;

138 
	`¥ötf
("max # undÿ°ru˘uª†%d\n", 
£mmnu
);

142 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

143 
j
 = 0; j <
i
 && 
chûd
[j] > 0; j++)

144 
	`Kûl
(
chûd
[
j
], 
SIGINT
);

148 
£mid
 = 
	`Semgë
(
IPC_PRIVATE
, 
£mm¶
, 
SVSEM_MODE
 | 
IPC_CREAT
);

149 
i
 = 0; i < 
£mm¶
; i++) {

150 
¨g
.
vÆ
 = 0;

151 
	`Sem˘l
(
£mid
, 
i
, 
SETVAL
, 
¨g
);

153 
›s
[
i
].
£m_num
 = i;

154 
›s
[
i
].
£m_›
 = 1;

155 
›s
[
i
].
£m_Êg
 = 
SEM_UNDO
;

156 i‡(
	`£m›
(
£mid
, 
›s
, 
i
+1) == -1) {

157 
£mume
 = 
i
;

158 
	`¥ötf
("max # undÿíåõ†≥∏¥o˚s†%d\n", 
£mume
);

162 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

164 
	`exô
(0);

165 
	}
}

	@svsem/semcreate.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
oÊag
, 
£mid
, 
n£ms
;

8 
oÊag
 = 
SVSEM_MODE
 | 
IPC_CREAT
;

9  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "e")) != -1) {

10 
c
) {

12 
oÊag
 |
IPC_EXCL
;

16 i‡(
›töd
 !
¨gc
 - 2)

17 
	`îr_quô
("usage: semcreate [ -e ] <pathname> <nsems>");

18 
n£ms
 = 
	`©oi
(
¨gv
[
›töd
 + 1]);

20 
£mid
 = 
	`Semgë
(
	`Ftok
(
¨gv
[
›töd
], 0), 
n£ms
, 
oÊag
);

21 
	`exô
(0);

22 
	}
}

	@svsem/semgetvalues.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
£mid
, 
n£ms
, 
i
;

7 
£mid_ds
 
£möfo
;

8 *
±r
;

9 
£mun
 
¨g
;

11 i‡(
¨gc
 != 2)

12 
	`îr_quô
("usage: semgetvalues <pathname>");

15 
£mid
 = 
	`Semgë
(
	`Ftok
(
¨gv
[1], 0), 0, 0);

16 
¨g
.
buf
 = &
£möfo
;

17 
	`Sem˘l
(
£mid
, 0, 
IPC_STAT
, 
¨g
);

18 
n£ms
 = 
¨g
.
buf
->
£m_n£ms
;

21 
±r
 = 
	`CÆloc
(
n£ms
, ());

22 
¨g
.
¨øy
 = 
±r
;

25 
	`Sem˘l
(
£mid
, 0, 
GETALL
, 
¨g
);

26 
i
 = 0; i < 
n£ms
; i++)

27 
	`¥ötf
("£mvÆ[%d] = %d\n", 
i
, 
±r
[i]);

29 
	`exô
(0);

30 
	}
}

	@svsem/semops.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
i
, 
Êag
, 
£mid
, 
n›s
;

7 
£mbuf
 *
±r
;

9 
Êag
 = 0;

10  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "nu")) != -1) {

11 
c
) {

13 
Êag
 |
IPC_NOWAIT
;

17 
Êag
 |
SEM_UNDO
;

21 i‡(
¨gc
 - 
›töd
 < 2)

22 
	`îr_quô
("usage: semops [ -n ] [ -u ] <pathname> operation ...");

24 
£mid
 = 
	`Semgë
(
	`Ftok
(
¨gv
[
›töd
], 0), 0, 0);

25 
›töd
++;

26 
n›s
 = 
¨gc
 - 
›töd
;

29 
±r
 = 
	`CÆloc
(
n›s
, (
£mbuf
));

30 
i
 = 0; i < 
n›s
; i++) {

31 
±r
[
i
].
£m_num
 = i;

32 
±r
[
i
].
£m_›
 = 
	`©oi
(
¨gv
[
›töd
 + i]);

33 
±r
[
i
].
£m_Êg
 = 
Êag
;

35 
	`Sem›
(
£mid
, 
±r
, 
n›s
);

37 
	`exô
(0);

38 
	}
}

	@svsem/semopsid.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
i
, 
Êag
, 
£mid
, 
n›s
;

7 
£mbuf
 *
±r
;

9 
Êag
 = 0;

10  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "nu")) != -1) {

11 
c
) {

13 
Êag
 |
IPC_NOWAIT
;

17 
Êag
 |
SEM_UNDO
;

21 i‡(
¨gc
 - 
›töd
 < 2)

22 
	`îr_quô
("usage: semops [ -n ] [ -u ] <id> operation ...");

24 
£mid
 = 
	`©ﬁ
(
¨gv
[
›töd
]);

25 
›töd
++;

26 
n›s
 = 
¨gc
 - 
›töd
;

29 
±r
 = 
	`CÆloc
(
n›s
, (
£mbuf
));

30 
i
 = 0; i < 
n›s
; i++) {

31 
±r
[
i
].
£m_num
 = i;

32 
±r
[
i
].
£m_›
 = 
	`©oi
(
¨gv
[
›töd
 + i]);

33 
±r
[
i
].
£m_Êg
 = 
Êag
;

35 
	`Sem›
(
£mid
, 
±r
, 
n›s
);

37 
	`exô
(0);

38 
	}
}

	@svsem/semrmid.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
£mid
;

8 i‡(
¨gc
 != 2)

9 
	`îr_quô
("usage: semrmid <pathname>");

11 
£mid
 = 
	`Semgë
(
	`Ftok
(
¨gv
[1], 0), 0, 0);

12 
	`Sem˘l
(
£mid
, 0, 
IPC_RMID
);

14 
	`exô
(0);

15 
	}
}

	@svsem/semsetvalues.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
£mid
, 
n£ms
, 
i
;

7 
£mid_ds
 
£möfo
;

8 *
±r
;

9 
£mun
 
¨g
;

11 i‡(
¨gc
 < 2)

12 
	`îr_quô
("usage: semsetvalues <pathname> [ values ... ]");

15 
£mid
 = 
	`Semgë
(
	`Ftok
(
¨gv
[1], 0), 0, 0);

16 
¨g
.
buf
 = &
£möfo
;

17 
	`Sem˘l
(
£mid
, 0, 
IPC_STAT
, 
¨g
);

18 
n£ms
 = 
¨g
.
buf
->
£m_n£ms
;

21 i‡(
¨gc
 !
n£ms
 + 2)

22 
	`îr_quô
("%d sem≠h‹e†ö së, %d vÆue†•ecifõd", 
n£ms
, 
¨gc
-2);

25 
±r
 = 
	`CÆloc
(
n£ms
, ());

26 
¨g
.
¨øy
 = 
±r
;

27 
i
 = 0; i < 
n£ms
; i++)

28 
±r
[
i
] = 
	`©oi
(
¨gv
[i + 2]);

29 
	`Sem˘l
(
£mid
, 0, 
SETALL
, 
¨g
);

31 
	`exô
(0);

32 
	}
}

	@svsem/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@svshm/limits.c

1 
	~"u≈ùc.h
"

3 
	#MAX_NIDS
 4096

	)

6 
	$maö
(
¨gc
, **
¨gv
)

9 
i
, 
j
, 
shmid
[
MAX_NIDS
];

10 *
addr
[
MAX_NIDS
];

11 
size
;

14 
i
 = 0; i <
MAX_NIDS
; i++) {

15 
shmid
[
i
] = 
	`shmgë
(
IPC_PRIVATE
, 1024, 
SVSHM_MODE
 | 
IPC_CREAT
);

16 i‡(
shmid
[
i
] == -1) {

17 
	`¥ötf
("%d idítifõr†›íáà⁄˚\n", 
i
);

21 
j
 = 0; j < 
i
; j++)

22 
	`Shm˘l
(
shmid
[
j
], 
IPC_RMID
, 
NULL
);

25 
i
 = 0; i <
MAX_NIDS
; i++) {

26 
shmid
[
i
] = 
	`Shmgë
(
IPC_PRIVATE
, 1024, 
SVSHM_MODE
 | 
IPC_CREAT
);

27 
addr
[
i
] = 
	`shm©
(
shmid
[i], 
NULL
, 0);

28 i‡(
addr
[
i
] == (*) -1) {

29 
	`¥ötf
("%d sh¨ed mem‹y segmít†©èchedáà⁄˚\n", 
i
);

30 
	`Shm˘l
(
shmid
[
i
], 
IPC_RMID
, 
NULL
);

34 
j
 = 0; j < 
i
; j++) {

35 
	`Shmdt
(
addr
[
j
]);

36 
	`Shm˘l
(
shmid
[
j
], 
IPC_RMID
, 
NULL
);

40 
size
 = 1; ; size++) {

41 
shmid
[0] = 
	`shmgë
(
IPC_PRIVATE
, 
size
, 
SVSHM_MODE
 | 
IPC_CREAT
);

42 i‡(
shmid
[0] != -1) {

43 
	`¥ötf
("möimum sizêo‡sh¨ed mem‹y segmíà%lu\n", 
size
);

44 
	`Shm˘l
(
shmid
[0], 
IPC_RMID
, 
NULL
);

50 
size
 = 65536; ; size += 4096) {

51 
shmid
[0] = 
	`shmgë
(
IPC_PRIVATE
, 
size
, 
SVSHM_MODE
 | 
IPC_CREAT
);

52 i‡(
shmid
[0] == -1) {

53 
	`¥ötf
("maximum sizêo‡sh¨ed mem‹y segmíà%lu\n", 
size
-4096);

56 
	`Shm˘l
(
shmid
[0], 
IPC_RMID
, 
NULL
);

59 
	`exô
(0);

60 
	}
}

	@svshm/shmget.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
c
, 
id
, 
oÊag
;

7 *
±r
;

8 
size_t
 
Àngth
;

10 
oÊag
 = 
SVSHM_MODE
 | 
IPC_CREAT
;

11  (
c
 = 
	`Gë›t
(
¨gc
, 
¨gv
, "e")) != -1) {

12 
c
) {

14 
oÊag
 |
IPC_EXCL
;

18 i‡(
›töd
 !
¨gc
 - 2)

19 
	`îr_quô
("usage: shmget [ -e ] <pathname> <length>");

20 
Àngth
 = 
	`©oi
(
¨gv
[
›töd
 + 1]);

22 
id
 = 
	`Shmgë
(
	`Ftok
(
¨gv
[
›töd
], 0), 
Àngth
, 
oÊag
);

23 
±r
 = 
	`Shm©
(
id
, 
NULL
, 0);

25 
	`exô
(0);

26 
	}
}

	@svshm/shmread.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
id
;

7 
shmid_ds
 
buff
;

8 
c
, *
±r
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: shmread <pathname>");

13 
id
 = 
	`Shmgë
(
	`Ftok
(
¨gv
[1], 0), 0, 
SVSHM_MODE
);

14 
±r
 = 
	`Shm©
(
id
, 
NULL
, 0);

15 
	`Shm˘l
(
id
, 
IPC_STAT
, &
buff
);

18 
i
 = 0; i < 
buff
.
shm_£gsz
; i++)

19 i‡–(
c
 = *
±r
++Ë!(
i
 % 256))

20 
	`îr_ªt
("±r[%d] = %d", 
i
, 
c
);

22 
	`exô
(0);

23 
	}
}

	@svshm/shmreadid.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
id
;

7 
shmid_ds
 
buff
;

8 
c
, *
±r
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: shmread <id>");

13 
id
 = 
	`©ﬁ
(
¨gv
[1]);

14 
±r
 = 
	`Shm©
(
id
, 
NULL
, 0);

15 
	`Shm˘l
(
id
, 
IPC_STAT
, &
buff
);

18 
i
 = 0; i < 
buff
.
shm_£gsz
; i++)

19 i‡–(
c
 = *
±r
++Ë!(
i
 % 256))

20 
	`îr_ªt
("±r[%d] = %d", 
i
, 
c
);

22 
	`exô
(0);

23 
	}
}

	@svshm/shmrmid.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
id
;

8 i‡(
¨gc
 != 2)

9 
	`îr_quô
("usage: shmrmid <pathname>");

11 
id
 = 
	`Shmgë
(
	`Ftok
(
¨gv
[1], 0), 0, 
SVSHM_MODE
);

12 
	`Shm˘l
(
id
, 
IPC_RMID
, 
NULL
);

14 
	`exô
(0);

15 
	}
}

	@svshm/shmwrite.c

1 
	~"u≈ùc.h
"

4 
	$maö
(
¨gc
, **
¨gv
)

6 
i
, 
id
;

7 
shmid_ds
 
buff
;

8 *
±r
;

10 i‡(
¨gc
 != 2)

11 
	`îr_quô
("usage: shmwrite <pathname>");

13 
id
 = 
	`Shmgë
(
	`Ftok
(
¨gv
[1], 0), 0, 
SVSHM_MODE
);

14 
±r
 = 
	`Shm©
(
id
, 
NULL
, 0);

15 
	`Shm˘l
(
id
, 
IPC_STAT
, &
buff
);

18 
i
 = 0; i < 
buff
.
shm_£gsz
; i++)

19 *
±r
++ = 
i
 % 256;

21 
	`exô
(0);

22 
	}
}

	@svshm/unpipc.h

4 #i‚def 
__u≈ùc_h


5 
	#__u≈ùc_h


	)

7 
	~"../c⁄fig.h
"

13 
	~<sys/ty≥s.h
>

14 
	~<sys/time.h
>

15 
	~<time.h
>

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<limôs.h
>

19 
	~<sig«l.h
>

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/°©.h
>

24 
	~<uni°d.h
>

25 
	~<sys/waô.h
>

27 #ifdef 
HAVE_MQUEUE_H


28 
	~<mqueue.h
>

31 #ifdef 
HAVE_SEMAPHORE_H


32 
	~<£m≠h‹e.h
>

34 #i‚def 
SEM_FAILED


35 
	#SEM_FAILED
 ((
£m_t
 *)(-1))

	)

40 #ifdef 
HAVE_SYS_MMAN_H


41 
	~<sys/mm™.h
>

44 #i‚def 
MAP_FAILED


45 
	#MAP_FAILED
 ((*)(-1))

	)

48 #ifdef 
HAVE_SYS_IPC_H


49 
	~<sys/ùc.h
>

52 #ifdef 
HAVE_SYS_MSG_H


53 
	~<sys/msg.h
>

56 #ifdef 
HAVE_SYS_SEM_H


57 #ifdef 
__bsdi__


58 #unde‡
HAVE_SYS_SEM_H


60 
	~<sys/£m.h
>

63 #i‚def 
HAVE_SEMUN_UNION


65 
	u£mun
 {

66 
	mvÆ
;

67 
£mid_ds
 *
	mbuf
;

68 *
	m¨øy
;

73 #ifdef 
HAVE_SYS_SHM_H


74 
	~<sys/shm.h
>

77 #ifdef 
HAVE_SYS_SELECT_H


78 
	~<sys/£À˘.h
>

81 #ifdef 
HAVE_POLL_H


82 
	~<pﬁl.h
>

85 #ifdef 
HAVE_STROPTS_H


86 
	~<°r›ts.h
>

89 #ifdef 
HAVE_STRINGS_H


90 
	~<°rögs.h
>

96 #ifdef 
HAVE_SYS_IOCTL_H


97 
	~<sys/io˘l.h
>

99 #ifdef 
HAVE_SYS_FILIO_H


100 
	~<sys/fûio.h
>

103 #ifdef 
HAVE_PTHREAD_H


104 
	~<±hªad.h
>

107 #ifdef 
HAVE_DOOR_H


108 
	~<do‹.h
>

111 #ifdef 
HAVE_RPC_RPC_H


112 #ifde‡
_PSX4_NSPACE_H_TS


113 #unde‡
SUCCESS


115 
	~<Ωc/Ωc.h
>

119 #i‚def 
HAVE_BZERO


120 
	#bzîo
(
±r
,
n
Ë
	`mem£t
’å, 0,Ç)

	)

127 #i‚de‡
INFTIM


128 
	#INFTIM
 (-1Ë

	)

129 #ifdef 
HAVE_POLL_H


130 
	#INFTIM_UNPH


	)

135 #i‚def 
PATH_MAX


136 
	#PATH_MAX
 1024

	)

139 
	#MAX_PATH
 1024

	)

141 
	#MAXLINE
 4096

	)

144 
	#BUFFSIZE
 8192

	)

146 
	#FILE_MODE
 (
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
)

	)

149 
	#DIR_MODE
 (
FILE_MODE
 | 
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)

	)

153 
	#SVMSG_MODE
 (
MSG_R
 | 
MSG_W
 | MSG_R>>3 | MSG_R>>6)

	)

156 
	#SVSEM_MODE
 (
SEM_R
 | 
SEM_A
 | SEM_R>>3 | SEM_R>>6)

	)

159 
	#SVSHM_MODE
 (
SHM_R
 | 
SHM_W
 | SHM_R>>3 | SHM_R>>6)

	)

163 
	tSigfunc
();

165 #ifdef 
HAVE_SIGINFO_T_STRUCT


166 
	tSigfunc_π
(, 
	tsigöfo_t
 *, *);

169 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

170 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

172 #i‚def 
HAVE_TIMESPEC_STRUCT


173 
	stime•ec
 {

174 
time_t
 
	mtv_£c
;

175 
	mtv_n£c
;

193 #ifdef 
__bsdi__


194 
	#va_mode_t
 

	)

196 
	#va_mode_t
 
mode_t


	)

201 
	#ªad_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

202 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

203 
	#ªadw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

204 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

205 
	#wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

206 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

207 
	#wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

208 
	`lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

209 
	#un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

210 
	`lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

211 
	#is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

212 
	`lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

213 
	#is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

214 
	`lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

217 
	#Ród_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

218 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

219 
	#Ródw_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

220 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

221 
	#Wrôe_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

222 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

223 
	#Wrôew_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

224 
	`Lock_ªg
(
fd
, 
F_SETLKW
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

225 
	#Un_lock
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

226 
	`Lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

227 
	#Is_ªad_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

228 
	`Lock_ã°
(
fd
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

229 
	#Is_wrôe_lockabÀ
(
fd
, 
off£t
, 
whí˚
, 
Àn
) \

230 
	`Lock_ã°
(
fd
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

	)

233 
d´m⁄_öô
(const *, );

234 
d´m⁄_öëd
(const *, );

235 *
gf_time
();

236 
lock_ªg
(, , , 
off_t
, , off_t);

237 
pid_t
 
lock_ã°
(, , 
off_t
, , off_t);

238 *
my_shm
(
size_t
);

239 *
px_ùc_«me
(const *);

240 
ªadabÀ_timeo
(, );

241 
ssize_t
 
ªadlöe
(, *, 
size_t
);

242 
ssize_t
 
ªadn
(, *, 
size_t
);

243 
£t_c⁄cuºícy
();

244 
Sigfunc
 *
sig«l_öå
(, Sigfunc *);

245 
¶ìp_us
();

246 
°¨t_time
();

247 
°›_time
();

248 
touch
(*, );

249 
tv_sub
(
timevÆ
 *, timeval *);

250 
wrôabÀ_timeo
(, );

251 
ssize_t
 
wrôí
(, c⁄° *, 
size_t
);

253 #i‚def 
HAVE_GETHOSTNAME_PROTO


254 
gëho°«me
(*, );

257 #i‚def 
HAVE_ISFDTYPE_PROTO


258 
isfdty≥
(, );

261 #i‚def 
HAVE_PSELECT_PROTO


262 
p£À˘
(, 
fd_£t
 *, fd_set *, fd_set *,

263 c⁄° 
time•ec
 *, c⁄° 
sig£t_t
 *);

266 #i‚def 
HAVE_SNPRINTF_PROTO


267 
¢¥ötf
(*, 
size_t
, const *, ...);

271 *
Gf_time
();

272 
Lock_ªg
(, , , 
off_t
, , off_t);

273 
pid_t
 
Lock_ã°
(, , 
off_t
, , off_t);

274 *
My_shm
(
size_t
);

275 *
Px_ùc_«me
(const *);

276 
RódabÀ_timeo
(, );

277 
ssize_t
 
Ródlöe
(, *, 
size_t
);

278 
ssize_t
 
Ródn
(, *, 
size_t
);

279 
Së_c⁄cuºícy
();

280 
Sigfunc
 *
Sig«l
(, Sigfunc *);

281 
Sigfunc
 *
Sig«l_öå
(, Sigfunc *);

283 #ifdef 
HAVE_SIGINFO_T_STRUCT


284 
Sigfunc_π
 *
Sig«l_π
(, Sigfunc_rt *);

285 
Sigfunc_π
 *
Sig«l_π_öå
(, Sigfunc_rt *);

288 
SÀï_us
();

289 
Sèπ_time
();

290 
St›_time
();

291 
Touch
(*, );

292 
WrôabÀ_timeo
(, );

293 
Wrôí
(, *, 
size_t
);

296 *
CÆloc
(
size_t
, size_t);

297 
Clo£
();

298 
Dup2
(, );

299 
F˙é
(, , *);

300 
pid_t
 
F‹k
();

301 
F∑thc⁄f
(, );

302 
F°©
(, 
°©
 *);

303 
key_t
 
Ftok
(const *, );

304 
Fåunˇã
(, 
off_t
);

305 
Gë›t
(, *const *, const *);

306 
Gëtimeofday
(
timevÆ
 *, *);

307 
Io˘l
(, , *);

308 
Kûl
(
pid_t
, );

309 
off_t
 
L£ek
(, off_t, );

310 *
MÆloc
(
size_t
);

311 
Mkfifo
(c⁄° *, 
mode_t
);

312 
Mkãmp
(*);

313 *
Mm≠
(*, 
size_t
, , , , 
off_t
);

314 
Munm≠
(*, 
size_t
);

315 
O≥n
(const *, , ...);

316 
P©hc⁄f
(const *, );

317 
Pùe
(*
fds
);

318 
ssize_t
 
Ród
(, *, 
size_t
);

319 
Sñe˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

320 
Sigadd£t
(
sig£t_t
 *, );

321 
Sigdñ£t
(
sig£t_t
 *, );

322 
Sigem±y£t
(
sig£t_t
 *);

323 
Sigfûl£t
(
sig£t_t
 *);

324 
Sigismembî
(c⁄° 
sig£t_t
 *, );

325 
Sig≥ndög
(
sig£t_t
 *);

326 
Sig¥ocmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

327 #ifdef 
HAVE_SIGINFO_T_STRUCT


328 
Sigqueue
(
pid_t
, , c⁄° 
sigvÆ
);

330 #ifdef 
HAVE_SIGWAIT


331 
Sigwaô
(c⁄° 
sig£t_t
 *, *);

333 
Sèt
(c⁄° *, 
°©
 *);

334 *
Sådup
(const *);

335 
Sysc⁄f
();

336 
Sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

337 
U∆ök
(const *);

338 *
VÆloc
(
size_t
);

339 
pid_t
 
Waô
(*);

340 
pid_t
 
Waôpid
(pid_t, *, );

341 
Wrôe
(, *, 
size_t
);

343 #ifdef 
HAVE_MQUEUE_H


345 
mqd_t
 
Mq_›í
(const *, , ...);

346 
Mq_˛o£
(
mqd_t
);

347 
Mq_u∆ök
(c⁄° *
∑th«me
);

348 
Mq_£nd
(
mqd_t
, c⁄° *, 
size_t
, );

349 
ssize_t
 
Mq_ª˚ive
(
mqd_t
, *, 
size_t
, *);

350 
Mq_nŸify
(
mqd_t
, c⁄° 
sigevít
 *);

351 
Mq_gë©å
(
mqd_t
, 
mq_©å
 *);

352 
Mq_£èâr
(
mqd_t
, c⁄° 
mq_©å
 *, mq_attr *);

355 #ifdef 
HAVE_SEMAPHORE_H


357 
£m_t
 *
Sem_›í
(const *, , ...);

358 
Sem_˛o£
(
£m_t
 *);

359 
Sem_u∆ök
(const *);

360 
Sem_öô
(
£m_t
 *, , );

361 
Sem_de°roy
(
£m_t
 *);

362 
Sem_waô
(
£m_t
 *);

363 
Sem_åywaô
(
£m_t
 *);

364 
Sem_po°
(
£m_t
 *);

365 
Sem_gëvÆue
(
£m_t
 *, *);

375 #ifdef 
HAVE_SHM_OPEN_PROTO


377 
Shm_›í
(c⁄° *, , 
mode_t
);

378 
Shm_u∆ök
(const *);

381 #ifdef 
HAVE_SYS_MSG_H


383 
Msggë
(
key_t
 
key
, 
Êag
);

384 
Msg˘l
(, , 
msqid_ds
 *);

385 
Msg¢d
(, c⁄° *, 
size_t
, );

386 
ssize_t
 
Msgrcv
(, *, 
size_t
, , );

389 #ifdef 
HAVE_SYS_SEM_H


391 
Semgë
(
key_t
, , );

392 
Sem˘l
(, , , ...);

393 
Sem›
(, 
£mbuf
 *, 
size_t
);

396 #ifdef 
HAVE_SYS_SHM_H


398 
Shmgë
(
key_t
, 
size_t
, );

399 *
Shm©
(, const *, );

400 
Shmdt
(const *);

401 
Shm˘l
(, , 
shmid_ds
 *);

405 
F˛o£
(
FILE
 *);

406 
FILE
 *
Fd›í
(, const *);

407 *
Fgës
(*, , 
FILE
 *);

408 
FILE
 *
F›í
(const *, const *);

409 
Fputs
(c⁄° *, 
FILE
 *);

410 
FILE
 *
P›í
(const *, const *);

411 
P˛o£
(
FILE
 *);

413 #ifdef 
HAVE_FATTACH


414 
F©èch
(, const *);

416 #ifdef 
HAVE_POLL


417 
Pﬁl
(
pﬁlfd
 *, , );

420 
îr_dump
(const *, ...);

421 
îr_msg
(const *, ...);

422 
îr_quô
(const *, ...);

423 
îr_ªt
(const *, ...);

424 
îr_sys
(const *, ...);

427 
Pthªad_©å_öô
(
±hªad_©å_t
 *);

428 
Pthªad_©å_de°roy
(
±hªad_©å_t
 *);

429 
Pthªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

430 
Pthªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

431 
Pthªad_¸óã
(
±hªad_t
 *, c⁄° 
±hªad_©å_t
 *,

433 
Pthªad_joö
(
±hªad_t
, **);

434 
Pthªad_dëach
(
±hªad_t
);

435 
Pthªad_kûl
(
±hªad_t
, );

436 
Pthªad_£tˇn˚l°©e
(, *);

438 
Pthªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

439 
Pthªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

440 
Pthªad_muãx©å_£çsh¨ed
(
±hªad_muãx©å_t
 *, );

441 
Pthªad_muãx_öô
(
±hªad_muãx_t
 *, 
±hªad_muãx©å_t
 *);

442 
Pthªad_muãx_de°roy
(
±hªad_muãx_t
 *);

443 
Pthªad_muãx_lock
(
±hªad_muãx_t
 *);

444 
Pthªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

446 
Pthªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

447 
Pthªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

448 
Pthªad_c⁄d©å_£çsh¨ed
(
±hªad_c⁄d©å_t
 *, );

449 
Pthªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

450 
Pthªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

451 
Pthªad_c⁄d_waô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *);

452 
Pthªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *, 
±hªad_muãx_t
 *,

453 c⁄° 
time•ec
 *);

455 
Pthªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

456 
	`Pthªad_£t•ecific
(
±hªad_key_t
, const *);

457 
	`Pthªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

458 
	`¥_thªad_id
(
±hªad_t
 *);

460 #ifdef 
HAVE_DOOR_H


462 
	tDo‹_£rvî_¥oc
(*, *, 
	tsize_t
, 
	tdo‹_desc_t
 *, size_t);

463 
	tDo‹_¸óã_¥oc
(
	tdo‹_öfo_t
 *);

467 
	`Do‹_böd
();

468 
	`Do‹_ˇŒ
(, 
do‹_¨g_t
 *);

469 
	`Do‹_¸óã
(
Do‹_£rvî_¥oc
 *, *, 
u_öt
);

470 
	`Do‹_¸ed
(
do‹_¸ed_t
 *);

471 
	`Do‹_öfo
(, 
do‹_öfo_t
 *);

472 
	`Do‹_ªtu∫
(*, 
size_t
, 
do‹_desc_t
 *, size_t);

473 
	`Do‹_ªvoke
();

474 
	`Do‹_unböd
();

475 
Do‹_¸óã_¥oc
 *
	`Do‹_£rvî_¸óã
(Door_create_proc *);

478 #ifdef 
HAVE_RPC_RPC_H


479 
CLIENT
 *
	`C t_¸óã
(c⁄° *, 
u_l⁄g
, u_long, const *);

480 
	`C t_c⁄åﬁ
(
CLIENT
 *, 
u_öt
, *);

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

141 #ifde‡
__USE_ATFILE


142 
	#AT_FDCWD
 -100

	)

145 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

146 
	#AT_REMOVEDIR
 0x200

	)

148 
	#AT_SYMLINK_FOLLOW
 0x400

	)

149 #ifde‡
__USE_GNU


150 
	#AT_NO_AUTOMOUNT
 0x800

	)

152 
	#AT_EMPTY_PATH
 0x1000

	)

154 
	#AT_EACCESS
 0x200

	)

163 
f˙é
 (
__fd
, 
__cmd
, ...);

172 #i‚de‡
__USE_FILE_OFFSET64


173 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

175 #ifde‡
__REDIRECT


176 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

177 
	`__n⁄nuŒ
 ((1));

179 
	#›í
 
›í64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

186 #ifde‡
__USE_ATFILE


196 #i‚de‡
__USE_FILE_OFFSET64


197 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

198 
	`__n⁄nuŒ
 ((2));

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

202 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

204 
	#›í©
 
›í©64


	)

207 #ifde‡
__USE_LARGEFILE64


208 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

209 
	`__n⁄nuŒ
 ((2));

218 #i‚de‡
__USE_FILE_OFFSET64


219 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__REDIRECT


222 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

223 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

225 
	#¸ót
 
¸ót64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

232 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

233 && !
deföed
 
__USE_POSIX
))

242 
	#F_ULOCK
 0

	)

243 
	#F_LOCK
 1

	)

244 
	#F_TLOCK
 2

	)

245 
	#F_TEST
 3

	)

247 #i‚de‡
__USE_FILE_OFFSET64


248 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

250 #ifde‡
__REDIRECT


251 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

253 
	#lockf
 
lockf64


	)

256 #ifde‡
__USE_LARGEFILE64


257 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

261 #ifde‡
__USE_XOPEN2K


264 #i‚de‡
__USE_FILE_OFFSET64


265 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

266 
__advi£
Ë
__THROW
;

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

270 
__off64_t
 
__Àn
, 
__advi£
),

271 
posix_Ádvi£64
);

273 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

278 
__advi£
Ë
__THROW
;

286 #i‚de‡
__USE_FILE_OFFSET64


287 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
),

292 
posix_ÁŒoˇã64
);

294 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

297 #ifde‡
__USE_LARGEFILE64


298 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

304 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

305 && 
deföed
 
__va_¨g_∑ck_Àn


306 
	~<bôs/f˙é2.h
>

309 
__END_DECLS


	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

87 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

88 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

89 
	~<bôs/m©hˇŒs.h
>

90 #unde‡
_MdoubÀ_


91 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


92 #unde‡
_MdoubÀ_END_NAMESPACE


93 #unde‡
__MATH_PRECNAME


95 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

96 || 
deföed
 
__LDBL_COMPAT


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifdef 
__USE_MISC


290 
_IEEE_
 = -1,

291 
_SVID_
,

292 
_XOPEN_
,

293 
_POSIX_
,

294 
_ISOC_


295 } 
	t_LIB_VERSION_TYPE
;

300 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

304 #ifde‡
__USE_SVID


310 #ifde‡
__˝lu•lus


311 
__ex˚±i⁄


313 
ex˚±i⁄


316 
ty≥
;

317 *
«me
;

318 
¨g1
;

319 
¨g2
;

320 
ªtvÆ
;

321 
	}
};

323 #ifde‡
__˝lu•lus


324 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

326 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

329 
	#X_TLOSS
 1.41484755040568800000e+16

	)

332 
	#DOMAIN
 1

	)

333 
	#SING
 2

	)

334 
	#OVERFLOW
 3

	)

335 
	#UNDERFLOW
 4

	)

336 
	#TLOSS
 5

	)

337 
	#PLOSS
 6

	)

340 
	#HUGE
 3.40282347e+38F

	)

344 #ifde‡
__USE_XOPEN


346 
	#MAXFLOAT
 3.40282347e+38F

	)

353 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


354 
	#M_E
 2.7182818284590452354

	)

355 
	#M_LOG2E
 1.4426950408889634074

	)

356 
	#M_LOG10E
 0.43429448190325182765

	)

357 
	#M_LN2
 0.69314718055994530942

	)

358 
	#M_LN10
 2.30258509299404568402

	)

359 
	#M_PI
 3.14159265358979323846

	)

360 
	#M_PI_2
 1.57079632679489661923

	)

361 
	#M_PI_4
 0.78539816339744830962

	)

362 
	#M_1_PI
 0.31830988618379067154

	)

363 
	#M_2_PI
 0.63661977236758134308

	)

364 
	#M_2_SQRTPI
 1.12837916709551257390

	)

365 
	#M_SQRT2
 1.41421356237309504880

	)

366 
	#M_SQRT1_2
 0.70710678118654752440

	)

372 #ifde‡
__USE_GNU


373 
	#M_El
 2.718281828459045235360287471352662498L

	)

374 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

375 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

376 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

377 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

378 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

379 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

380 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

381 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

382 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

383 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

384 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

385 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

392 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


393 
	#__NO_MATH_INLINES
 1

	)

396 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

403 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

404 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

405 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

406 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

407 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

408 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

412 #ifde‡
__USE_EXTERN_INLINES


413 
	~<bôs/m©hölöe.h
>

418 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

419 
	~<bôs/m©h-föôe.h
>

422 #ifde‡
__USE_ISOC99


426 #i‚de‡
isgª©î


427 
	#isgª©î
(
x
, 
y
) \

428 (
__exãnsi⁄__
 \

429 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

430 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

434 #i‚de‡
isgª©îequÆ


435 
	#isgª©îequÆ
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

442 #i‚de‡
i¶ess


443 
	#i¶ess
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

450 #i‚de‡
i¶es£quÆ


451 
	#i¶es£quÆ
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

458 #i‚de‡
i¶essgª©î


459 
	#i¶essgª©î
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

466 #i‚de‡
isun‹dîed


467 
	#isun‹dîed
(
u
, 
v
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

470 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

475 
	g__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/mqueue.h

18 #i‚de‡
_MQUEUE_H


19 
	#_MQUEUE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<f˙é.h
>

24 
	#__√ed_sigevít_t


	)

25 
	~<bôs/sigöfo.h
>

26 
	#__√ed_time•ec


	)

27 
	~<time.h
>

29 
	~<bôs/mqueue.h
>

31 
__BEGIN_DECLS


40 
mqd_t
 
	$mq_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

41 
__THROW
 
	`__n⁄nuŒ
 ((1));

45 
	$mq_˛o£
 (
mqd_t
 
__mqdes
Ë
__THROW
;

48 
	$mq_gë©å
 (
mqd_t
 
__mqdes
, 
mq_©å
 *
__mq°©
)

49 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 
	$mq_£èâr
 (
mqd_t
 
__mqdes
,

54 c⁄° 
mq_©å
 *
__ª°ri˘
 
__mq°©
,

55 
mq_©å
 *
__ª°ri˘
 
__omq°©
)

56 
__THROW
 
	`__n⁄nuŒ
 ((2));

59 
	$mq_u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$mq_nŸify
 (
mqd_t
 
__mqdes
, c⁄° 
sigevít
 *
__nŸifiˇti⁄
)

64 
__THROW
;

68 
ssize_t
 
	$mq_ª˚ive
 (
mqd_t
 
__mqdes
, *
__msg_±r
, 
size_t
 
__msg_Àn
,

69 *
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

72 
	$mq_£nd
 (
mqd_t
 
__mqdes
, c⁄° *
__msg_±r
, 
size_t
 
__msg_Àn
,

73 
__msg_¥io
Ë
	`__n⁄nuŒ
 ((2));

75 #ifde‡
__USE_XOPEN2K


78 
ssize_t
 
	$mq_timedª˚ive
 (
mqd_t
 
__mqdes
, *
__ª°ri˘
 
__msg_±r
,

79 
size_t
 
__msg_Àn
,

80 *
__ª°ri˘
 
__msg_¥io
,

81 c⁄° 
time•ec
 *
__ª°ri˘
 
__abs_timeout
)

82 
	`__n⁄nuŒ
 ((2, 5));

86 
	$mq_timed£nd
 (
mqd_t
 
__mqdes
, c⁄° *
__msg_±r
,

87 
size_t
 
__msg_Àn
, 
__msg_¥io
,

88 c⁄° 
time•ec
 *
__abs_timeout
)

89 
	`__n⁄nuŒ
 ((2, 5));

93 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

94 && 
deföed
 
__va_¨g_∑ck_Àn


95 
	~<bôs/mqueue2.h
>

98 
__END_DECLS


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


31 
uöt32_t
 
	tö_addr_t
;

32 
	sö_addr


34 
ö_addr_t
 
	ms_addr
;

38 
	~<bôs/ö.h
>

43 
	mIPPROTO_IP
 = 0,

44 
	#IPPROTO_IP
 
IPPROTO_IP


	)

45 
	mIPPROTO_ICMP
 = 1,

46 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

47 
	mIPPROTO_IGMP
 = 2,

48 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

49 
	mIPPROTO_IPIP
 = 4,

50 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

51 
	mIPPROTO_TCP
 = 6,

52 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

53 
	mIPPROTO_EGP
 = 8,

54 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

55 
	mIPPROTO_PUP
 = 12,

56 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

57 
	mIPPROTO_UDP
 = 17,

58 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

59 
	mIPPROTO_IDP
 = 22,

60 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

61 
	mIPPROTO_TP
 = 29,

62 
	#IPPROTO_TP
 
IPPROTO_TP


	)

63 
	mIPPROTO_DCCP
 = 33,

64 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

65 
	mIPPROTO_IPV6
 = 41,

66 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

67 
	mIPPROTO_RSVP
 = 46,

68 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

69 
	mIPPROTO_GRE
 = 47,

70 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

71 
	mIPPROTO_ESP
 = 50,

72 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

73 
	mIPPROTO_AH
 = 51,

74 
	#IPPROTO_AH
 
IPPROTO_AH


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_BEETPH
 = 94,

78 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

79 
	mIPPROTO_ENCAP
 = 98,

80 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

81 
	mIPPROTO_PIM
 = 103,

82 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

83 
	mIPPROTO_COMP
 = 108,

84 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

85 
	mIPPROTO_SCTP
 = 132,

86 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

87 
	mIPPROTO_UDPLITE
 = 136,

88 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

89 
	mIPPROTO_MPLS
 = 137,

90 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

91 
	mIPPROTO_RAW
 = 255,

92 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

93 
	mIPPROTO_MAX


99 #i‡!
__USE_KERNEL_IPV6_DEFS


102 
	mIPPROTO_HOPOPTS
 = 0,

103 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

104 
	mIPPROTO_ROUTING
 = 43,

105 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

106 
	mIPPROTO_FRAGMENT
 = 44,

107 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

108 
	mIPPROTO_ICMPV6
 = 58,

109 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

110 
	mIPPROTO_NONE
 = 59,

111 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

112 
	mIPPROTO_DSTOPTS
 = 60,

113 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

114 
	mIPPROTO_MH
 = 135

115 
	#IPPROTO_MH
 
IPPROTO_MH


	)

120 
uöt16_t
 
	tö_p‹t_t
;

125 
	mIPPORT_ECHO
 = 7,

126 
	mIPPORT_DISCARD
 = 9,

127 
	mIPPORT_SYSTAT
 = 11,

128 
	mIPPORT_DAYTIME
 = 13,

129 
	mIPPORT_NETSTAT
 = 15,

130 
	mIPPORT_FTP
 = 21,

131 
	mIPPORT_TELNET
 = 23,

132 
	mIPPORT_SMTP
 = 25,

133 
	mIPPORT_TIMESERVER
 = 37,

134 
	mIPPORT_NAMESERVER
 = 42,

135 
	mIPPORT_WHOIS
 = 43,

136 
	mIPPORT_MTP
 = 57,

138 
	mIPPORT_TFTP
 = 69,

139 
	mIPPORT_RJE
 = 77,

140 
	mIPPORT_FINGER
 = 79,

141 
	mIPPORT_TTYLINK
 = 87,

142 
	mIPPORT_SUPDUP
 = 95,

145 
	mIPPORT_EXECSERVER
 = 512,

146 
	mIPPORT_LOGINSERVER
 = 513,

147 
	mIPPORT_CMDSERVER
 = 514,

148 
	mIPPORT_EFSSERVER
 = 520,

151 
	mIPPORT_BIFFUDP
 = 512,

152 
	mIPPORT_WHOSERVER
 = 513,

153 
	mIPPORT_ROUTESERVER
 = 520,

156 
	mIPPORT_RESERVED
 = 1024,

159 
	mIPPORT_USERRESERVED
 = 5000

167 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

168 
	#IN_CLASSA_NET
 0xff000000

	)

169 
	#IN_CLASSA_NSHIFT
 24

	)

170 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

171 
	#IN_CLASSA_MAX
 128

	)

173 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

174 
	#IN_CLASSB_NET
 0xffff0000

	)

175 
	#IN_CLASSB_NSHIFT
 16

	)

176 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

177 
	#IN_CLASSB_MAX
 65536

	)

179 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

180 
	#IN_CLASSC_NET
 0xffffff00

	)

181 
	#IN_CLASSC_NSHIFT
 8

	)

182 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

184 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

185 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

187 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

188 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

191 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

193 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

198 
	#IN_LOOPBACKNET
 127

	)

200 #i‚de‡
INADDR_LOOPBACK


201 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

205 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

206 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

207 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

208 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

210 #i‡!
__USE_KERNEL_IPV6_DEFS


212 
	sö6_addr


216 
uöt8_t
 
	m__u6_addr8
[16];

217 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


218 
uöt16_t
 
	m__u6_addr16
[8];

219 
uöt32_t
 
	m__u6_addr32
[4];

221 } 
	m__ö6_u
;

222 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

223 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


224 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

225 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

230 c⁄° 
ö6_addr
 
ö6addr_™y
;

231 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

232 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

233 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

235 
	#INET_ADDRSTRLEN
 16

	)

236 
	#INET6_ADDRSTRLEN
 46

	)

240 
	ssockaddr_ö


242 
__SOCKADDR_COMMON
 (
sö_
);

243 
ö_p‹t_t
 
	msö_p‹t
;

244 
ö_addr
 
	msö_addr
;

247 
	msö_zîo
[ (
sockaddr
) -

248 
__SOCKADDR_COMMON_SIZE
 -

249  (
ö_p‹t_t
) -

250  (
ö_addr
)];

253 #i‡!
__USE_KERNEL_IPV6_DEFS


255 
	ssockaddr_ö6


257 
__SOCKADDR_COMMON
 (
sö6_
);

258 
ö_p‹t_t
 
	msö6_p‹t
;

259 
uöt32_t
 
	msö6_Êowöfo
;

260 
ö6_addr
 
	msö6_addr
;

261 
uöt32_t
 
	msö6_sc›e_id
;

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


267 
	sù_mªq


270 
ö_addr
 
	mimr_mu…üddr
;

273 
ö_addr
 
	mimr_öãrÁ˚
;

276 
	sù_mªq_sour˚


279 
ö_addr
 
	mimr_mu…üddr
;

282 
ö_addr
 
	mimr_öãrÁ˚
;

285 
ö_addr
 
	mimr_sour˚addr
;

289 #i‡!
__USE_KERNEL_IPV6_DEFS


291 
	sùv6_mªq


294 
ö6_addr
 
	mùv6mr_mu…üddr
;

297 
	mùv6mr_öãrÁ˚
;

301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


303 
	sgroup_ªq


306 
uöt32_t
 
	mgr_öãrÁ˚
;

309 
sockaddr_°‹age
 
	mgr_group
;

312 
	sgroup_sour˚_ªq


315 
uöt32_t
 
	mg§_öãrÁ˚
;

318 
sockaddr_°‹age
 
	mg§_group
;

321 
sockaddr_°‹age
 
	mg§_sour˚
;

326 
	sù_msfûãr


329 
ö_addr
 
	mimsf_mu…üddr
;

332 
ö_addr
 
	mimsf_öãrÁ˚
;

335 
uöt32_t
 
	mimsf_fmode
;

338 
uöt32_t
 
	mimsf_num§c
;

340 
ö_addr
 
	mimsf_¶i°
[1];

343 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

344 -  (
ö_addr
) \

345 + (
num§c
Ë*  (
ö_addr
))

	)

347 
	sgroup_fûãr


350 
uöt32_t
 
	mgf_öãrÁ˚
;

353 
sockaddr_°‹age
 
	mgf_group
;

356 
uöt32_t
 
	mgf_fmode
;

359 
uöt32_t
 
	mgf_num§c
;

361 
sockaddr_°‹age
 
	mgf_¶i°
[1];

364 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

365 -  (
sockaddr_°‹age
) \

366 + ((
num§c
) \

367 *  (
sockaddr_°‹age
)))

	)

377 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

378 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

379 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

383 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

385 
	~<ídün.h
>

388 
	~<bôs/byãsw≠.h
>

390 #ifde‡
__OPTIMIZE__


394 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


397 
	#¡ohl
(
x
Ë(x)

	)

398 
	#¡ohs
(
x
Ë(x)

	)

399 
	#ht⁄l
(
x
Ë(x)

	)

400 
	#ht⁄s
(
x
Ë(x)

	)

402 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


403 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

404 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

405 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

406 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

411 #ifde‡
__GNUC__


412 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

413 (
__exãnsi⁄__
 \

414 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

415 
__a
->
s6_addr32
[0] == 0 \

416 && 
__a
->
s6_addr32
[1] == 0 \

417 && 
__a
->
s6_addr32
[2] == 0 \

418 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

420 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

421 (
__exãnsi⁄__
 \

422 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

423 
__a
->
s6_addr32
[0] == 0 \

424 && 
__a
->
s6_addr32
[1] == 0 \

425 && 
__a
->
s6_addr32
[2] == 0 \

426 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

428 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

429 (
__exãnsi⁄__
 \

430 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

431 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

433 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

436 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

438 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

439 (
__exãnsi⁄__
 \

440 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

441 
__a
->
s6_addr32
[0] == 0 \

442 && 
__a
->
s6_addr32
[1] == 0 \

443 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

445 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

446 (
__exãnsi⁄__
 \

447 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

448 
__a
->
s6_addr32
[0] == 0 \

449 && 
__a
->
s6_addr32
[1] == 0 \

450 && 
__a
->
s6_addr32
[2] == 0 \

451 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

453 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

454 (
__exãnsi⁄__
 \

455 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

456 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

457 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

458 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

459 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

460 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

462 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

463 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

466 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

468 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

469 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

472 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

474 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

475 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

476 =
	`ht⁄l
 (0x„800000))

	)

478 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

479 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

480 =
	`ht⁄l
 (0x„c00000))

	)

482 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

483 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

485 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

487 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

488 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

490 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

491 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

493 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

494 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

497 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

500 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


504 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

507 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

508 
__THROW
;

512 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

516 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

520 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

521 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

522 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

524 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

525 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

526 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

528 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

529 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

530 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

533 #ifde‡
__USE_GNU


534 
cmsghdr
;

536 #i‡!
__USE_KERNEL_IPV6_DEFS


538 
	sö6_pktöfo


540 
ö6_addr
 
ùi6_addr
;

541 
ùi6_ifödex
;

545 
	sù6_mtuöfo


547 
sockaddr_ö6
 
ù6m_addr
;

548 
uöt32_t
 
ù6m_mtu
;

553 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

554 
__THROW
 
__©åibuã_dïªˇãd__
;

555 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

556 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

558 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

559 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

560 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

561 
__mu…x
, 
__∂usy
)

562 
__THROW
 
__©åibuã_dïªˇãd__
;

563 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

564 
uöt8_t
 **
__çåp
)

565 
__THROW
 
__©åibuã_dïªˇãd__
;

566 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

567 
uöt8_t
 **
__çåp
, 
__ty≥
)

568 
__THROW
 
__©åibuã_dïªˇãd__
;

572 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

573 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

574 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

575 **
__d©abuÂ
Ë
__THROW
;

576 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

577 
__THROW
;

578 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

579 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

580 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

581 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

582 **
__d©abuÂ
Ë
__THROW
;

583 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

584 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

585 **
__d©abuÂ
Ë
__THROW
;

586 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

587 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

591 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

592 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

593 
__£gmíts
Ë
__THROW
;

594 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

595 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

596 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

597 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

598 
__THROW
;

604 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

605 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

607 
__THROW
;

610 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

611 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

612 
uöt32_t
 
__num§c
,

613 c⁄° 
ö_addr
 *
__¶i°
)

614 
__THROW
;

618 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

619 c⁄° 
sockaddr
 *
__group
,

620 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

621 
uöt32_t
 *
__num§c
,

622 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

625 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

626 c⁄° 
sockaddr
 *
__group
,

627 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

628 
uöt32_t
 
__num§c
,

629 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

632 
__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

115 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


118 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

121 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


127 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


128 #i‡
__WORDSIZE
 == 64

129 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

134 
	#PTHREAD_RWLOCK_INITIALIZER
 \

135 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

136 #ifde‡
__USE_GNU


137 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


138 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

142 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


143 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

144 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

145 0, 0, 0, 0 } }

	)

147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

148 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

149 0 } }

	)

159 
	mPTHREAD_INHERIT_SCHED
,

160 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

161 
	mPTHREAD_EXPLICIT_SCHED


162 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

169 
	mPTHREAD_SCOPE_SYSTEM
,

170 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

171 
	mPTHREAD_SCOPE_PROCESS


172 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

179 
	mPTHREAD_PROCESS_PRIVATE
,

180 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

181 
	mPTHREAD_PROCESS_SHARED


182 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

188 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

192 
	s_±hªad_˛ónup_buf„r


194 (*
	m__routöe
) (*);

195 *
	m__¨g
;

196 
	m__ˇn˚…y≥
;

197 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

203 
	mPTHREAD_CANCEL_ENABLE
,

204 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

205 
	mPTHREAD_CANCEL_DISABLE


206 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

210 
	mPTHREAD_CANCEL_DEFERRED
,

211 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

212 
	mPTHREAD_CANCEL_ASYNCHRONOUS


213 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

215 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

219 
	#PTHREAD_ONCE_INIT
 0

	)

222 #ifde‡
__USE_XOPEN2K


226 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

230 
__BEGIN_DECLS


235 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

236 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

237 *(*
__°¨t_routöe
) (*),

238 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

244 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

252 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

254 #ifde‡
__USE_GNU


257 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

265 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

266 c⁄° 
time•ec
 *
__ab°ime
);

273 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

277 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

280 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

281 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

297 *
__dëach°©e
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

302 
__dëach°©e
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

308 
size_t
 *
__gu¨dsize
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

313 
size_t
 
__gu¨dsize
)

314 
__THROW
 
	`__n⁄nuŒ
 ((1));

318 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

319 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

324 c⁄° 
sched_∑øm
 *
__ª°ri˘


325 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

328 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


329 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__öhîô
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

343 
__öhîô
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

348 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

349 *
__ª°ri˘
 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


358 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

365 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

366 *
__°ackaddr
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

370 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


371 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

378 
size_t
 
__°acksize
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1));

381 #ifde‡
__USE_XOPEN2K


383 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

384 **
__ª°ri˘
 
__°ackaddr
,

385 
size_t
 *
__ª°ri˘
 
__°acksize
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

391 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

392 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

395 #ifde‡
__USE_GNU


398 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

399 
size_t
 
__˝u£tsize
,

400 c⁄° 
˝u_£t_t
 *
__˝u£t
)

401 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

405 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

406 
size_t
 
__˝u£tsize
,

407 
˝u_£t_t
 *
__˝u£t
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

423 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

424 c⁄° 
sched_∑øm
 *
__∑øm
)

425 
__THROW
 
	`__n⁄nuŒ
 ((3));

428 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

429 *
__ª°ri˘
 
__pﬁicy
,

430 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

435 
__THROW
;

438 #ifde‡
__USE_GNU


440 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

441 
size_t
 
__buÊí
)

442 
__THROW
 
	`__n⁄nuŒ
 ((2));

445 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

446 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 #ifde‡
__USE_UNIX98


452 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

455 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

458 #ifde‡
__USE_GNU


463 
	$±hªad_yõld
 (Ë
__THROW
;

468 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

469 c⁄° 
˝u_£t_t
 *
__˝u£t
)

470 
__THROW
 
	`__n⁄nuŒ
 ((3));

473 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

474 
˝u_£t_t
 *
__˝u£t
)

475 
__THROW
 
	`__n⁄nuŒ
 ((3));

488 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

489 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

500 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

504 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

507 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

512 
	`±hªad_ã°ˇn˚l
 ();

521 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

522 
__mask_was_ßved
;

523 } 
__ˇn˚l_jmp_buf
[1];

524 *
__∑d
[4];

525 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

528 #i‚de‡
__˛ónup_f˘_©åibuã


529 
	#__˛ónup_f˘_©åibuã


	)

534 
	s__±hªad_˛ónup_‰ame


536 (*
__ˇn˚l_routöe
) (*);

537 *
__ˇn˚l_¨g
;

538 
__do_ô
;

539 
__ˇn˚l_ty≥
;

542 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


543 #ifde‡
__˝lu•lus


545 ˛as†
	c__±hªad_˛ónup_˛ass


547 (*
__ˇn˚l_routöe
) (*);

548 *
__ˇn˚l_¨g
;

549 
__do_ô
;

550 
__ˇn˚l_ty≥
;

552 
public
:

553 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

554 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

555 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

556 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

557 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

558 &
__ˇn˚l_ty≥
); 
	}
}

559 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

569 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

571 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

575 
	#±hªad_˛ónup_p›
(
execuã
) \

576 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

577 } 0)

	)

579 #ifde‡
__USE_GNU


583 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

585 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

586 
__˛‰ame
.
	`__de„r
 ()

	)

591 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

592 
__˛‰ame
.
	`__ª°‹e
 (); \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

601 
__exã∫_ölöe
 

602 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

604 i‡(
__‰ame
->
__do_ô
)

605 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

606 
	}
}

615 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

617 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

618 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

619 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

620 .
__do_ô
 = 1 };

	)

624 
	#±hªad_˛ónup_p›
(
execuã
) \

625 
__˛‰ame
.
__do_ô
 = (
execuã
); \

626 } 0)

	)

628 #ifde‡
__USE_GNU


632 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 }; \

638 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

639 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

644 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

646 
__˛‰ame
.
__do_ô
 = (
execuã
); \

647 } 0)

	)

658 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

660 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

661 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

662 *
__ˇn˚l_¨g
 = (
¨g
); \

663 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

664 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

665 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

667 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

668 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

672 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 dÿ{

	)

674 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

675 
__˛ónup_f˘_©åibuã
;

679 
	#±hªad_˛ónup_p›
(
execuã
) \

682 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

683 i‡(
execuã
) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 } 0)

	)

686 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

687 
__˛ónup_f˘_©åibuã
;

689 #ifde‡
__USE_GNU


693 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

695 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

696 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

697 *
__ˇn˚l_¨g
 = (
¨g
); \

698 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

699 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

700 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

707 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

708 dÿ{

	)

709 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

715 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

718 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

719 i‡(
execuã
) \

720 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

721 
	}
} 0)

	)

722 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

723 
__˛ónup_f˘_©åibuã
;

727 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

728 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

729 #i‚de‡
SHARED


730 
	`__©åibuã__
 ((
__wók__
))

736 
__jmp_buf_èg
;

737 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

743 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

744 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

745 
__THROW
 
	`__n⁄nuŒ
 ((1));

748 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

749 
__THROW
 
	`__n⁄nuŒ
 ((1));

752 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

753 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

759 #ifde‡
__USE_XOPEN2K


761 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

762 c⁄° 
time•ec
 *
__ª°ri˘


763 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

767 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

768 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

772 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

773 
__ª°ri˘
 
__muãx
,

774 *
__ª°ri˘
 
__¥io˚ûög
)

775 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

779 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

780 
__¥io˚ûög
,

781 *
__ª°ri˘
 
__ﬁd_˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

785 #ifde‡
__USE_XOPEN2K8


787 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 #ifde‡
__USE_GNU


790 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1));

804 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

809 
__ª°ri˘
 
__©å
,

810 *
__ª°ri˘
 
__psh¨ed
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

814 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

815 
__psh¨ed
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1));

818 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


820 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


821 
__©å
, *
__ª°ri˘
 
__köd
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

827 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1));

832 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

833 
__ª°ri˘
 
__©å
,

834 *
__ª°ri˘
 
__¥Ÿocﬁ
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

845 
__ª°ri˘
 
__©å
,

846 *
__ª°ri˘
 
__¥io˚ûög
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

850 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

851 
__¥io˚ûög
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1));

854 #ifde‡
__USE_XOPEN2K


856 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

857 *
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

861 *
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

867 
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifde‡
__USE_GNU


870 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

871 
__robu°√ss
)

872 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


884 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

887 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

892 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

896 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

898 #ifde‡
__USE_XOPEN2K


900 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

901 c⁄° 
time•ec
 *
__ª°ri˘


902 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

906 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

911 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2K


915 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

916 c⁄° 
time•ec
 *
__ª°ri˘


917 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

921 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

922 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

928 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1));

932 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

933 
__THROW
 
	`__n⁄nuŒ
 ((1));

936 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

937 
__ª°ri˘
 
__©å
,

938 *
__ª°ri˘
 
__psh¨ed
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

942 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

943 
__psh¨ed
)

944 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

948 
__ª°ri˘
 
__©å
,

949 *
__ª°ri˘
 
__¥ef
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

953 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

954 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

962 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

963 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

964 
__THROW
 
	`__n⁄nuŒ
 ((1));

967 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

968 
__THROW
 
	`__n⁄nuŒ
 ((1));

971 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

972 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

975 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

976 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

984 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

985 
	`__n⁄nuŒ
 ((1, 2));

994 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

995 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

996 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

997 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1));

1006 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1011 
__ª°ri˘
 
__©å
,

1012 *
__ª°ri˘
 
__psh¨ed
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1016 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1017 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1019 #ifde‡
__USE_XOPEN2K


1021 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1022 
__ª°ri˘
 
__©å
,

1023 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1027 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1028 
__˛ockid_t
 
__˛ock_id
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1033 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1));

1042 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1043 
__THROW
 
	`__n⁄nuŒ
 ((1));

1046 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1047 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1051 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1055 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1063 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1064 
__©å
, 
__cou¡
)

1065 
__THROW
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1069 
__THROW
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1077 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1));

1081 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1086 
__ª°ri˘
 
__©å
,

1087 *
__ª°ri˘
 
__psh¨ed
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1091 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1092 
__psh¨ed
)

1093 
__THROW
 
	`__n⁄nuŒ
 ((1));

1105 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1106 (*
__de°r_fun˘i⁄
) (*))

1107 
__THROW
 
	`__n⁄nuŒ
 ((1));

1110 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1116 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1117 c⁄° *
__poöãr
Ë
__THROW
 ;

1120 #ifde‡
__USE_XOPEN2K


1122 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1123 
__˛ockid_t
 *
__˛ock_id
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((2));

1139 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1140 (*
__∑ª¡
) (),

1141 (*
__chûd
Ë()Ë
__THROW
;

1144 #ifde‡
__USE_EXTERN_INLINES


1146 
__exã∫_ölöe
 

1147 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1149  
__thªad1
 =
__thªad2
;

1150 
	}
}

1153 
	g__END_DECLS


	@/usr/include/rpc/pmap_clnt.h

35 #i‚de‡
_RPC_PMAP_CLNT_H


36 
	#_RPC_PMAP_CLNT_H
 1

	)

38 
	~<„©uªs.h
>

39 
	~<Ωc/ty≥s.h
>

40 
	~<Ωc/xdr.h
>

41 
	~<Ωc/˛¡.h
>

43 
__BEGIN_DECLS


45 
	$boﬁ_t
 (*
	tªsu…¥oc_t
Ë(
	tˇddr_t
 
	t__ª•
, 
	tsockaddr_ö
 *
	t__øddr
);

69 
boﬁ_t
 
	$pm≠_£t
 (c⁄° 
u_l⁄g
 
__¥ogøm
, c⁄° u_l⁄g 
__vîs
,

70 
__¥Ÿocﬁ
, 
u_sh‹t
 
__p‹t
Ë
__THROW
;

71 
boﬁ_t
 
	$pm≠_un£t
 (c⁄° 
u_l⁄g
 
__¥ogøm
, c⁄° u_l⁄g 
__vîs
)

72 
__THROW
;

73 
pm≠li°
 *
	$pm≠_gëm≠s
 (
sockaddr_ö
 *
__addªss
Ë
__THROW
;

74 
˛¡_°©
 
	$pm≠_rmtˇŒ
 (
sockaddr_ö
 *
__addr
,

75 c⁄° 
u_l⁄g
 
__¥og
,

76 c⁄° 
u_l⁄g
 
__vîs
,

77 c⁄° 
u_l⁄g
 
__¥oc
,

78 
xdΩroc_t
 
__xdørgs
,

79 
ˇddr_t
 
__¨g•
, 
xdΩroc_t
 
__xdºes
,

80 
ˇddr_t
 
__ª•
, 
timevÆ
 
__tout
,

81 
u_l⁄g
 *
__p‹t_±r
Ë
__THROW
;

82 
˛¡_°©
 
	$˛¡_brﬂdˇ°
 (c⁄° 
u_l⁄g
 
__¥og
,

83 c⁄° 
u_l⁄g
 
__vîs
,

84 c⁄° 
u_l⁄g
 
__¥oc
, 
xdΩroc_t
 
__x¨gs
,

85 
ˇddr_t
 
__¨g•
, 
xdΩroc_t
 
__xªsu…s
,

86 
ˇddr_t
 
__ªsu…•
,

87 
ªsu…¥oc_t
 
__óchªsu…
Ë
__THROW
;

88 
u_sh‹t
 
	$pm≠_gëp‹t
 (
sockaddr_ö
 *
__addªss
,

89 c⁄° 
u_l⁄g
 
__¥ogøm
,

90 c⁄° 
u_l⁄g
 
__vîsi⁄
, 
u_öt
 
__¥Ÿocﬁ
)

91 
__THROW
;

93 
__END_DECLS


	@/usr/include/rpc/rpc.h

35 #i‚de‡
_RPC_RPC_H


36 
	#_RPC_RPC_H
 1

	)

38 
	~<Ωc/ty≥s.h
>

39 
	~<√töë/ö.h
>

42 
	~<Ωc/xdr.h
>

45 
	~<Ωc/auth.h
>

48 
	~<Ωc/˛¡.h
>

51 
	~<Ωc/Ωc_msg.h
>

52 
	~<Ωc/auth_unix.h
>

53 
	~<Ωc/auth_des.h
>

56 
	~<Ωc/svc.h
>

57 
	~<Ωc/svc_auth.h
>

65 
	~<Ωc/√tdb.h
>

67 
__BEGIN_DECLS


70 
fd_£t
 *
	$__Ωc_thªad_svc_fd£t
 (Ë
	`__©åibuã__
 ((
__c⁄°__
));

71 
	#svc_fd£t
 (*
	`__Ωc_thªad_svc_fd£t
 ())

	)

73 
Ωc_¸óãîr
 *
	$__Ωc_thªad_¸óãîr
 ()

74 
	`__©åibuã__
 ((
__c⁄°__
));

75 
	#gë_Ωc_¸óãîr
(Ë(*
	`__Ωc_thªad_¸óãîr
 ())

	)

81 #ifde‡
_RPC_MT_VARS


82 
	#Ωc_¸óãîr
 (*
	`__Ωc_thªad_¸óãîr
 ())

	)

85 
pﬁlfd
 **
	$__Ωc_thªad_svc_pﬁlfd
 ()

86 
	`__©åibuã__
 ((
__c⁄°__
));

87 
	#svc_pﬁlfd
 (*
	`__Ωc_thªad_svc_pﬁlfd
 ())

	)

89 *
	$__Ωc_thªad_svc_max_pﬁlfd
 (Ë
	`__©åibuã__
 ((
__c⁄°__
));

90 
	#svc_max_pﬁlfd
 (*
	`__Ωc_thªad_svc_max_pﬁlfd
 ())

	)

92 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 #ifde‡
__FAVOR_BSD


174 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_XOPEN


177 #ifde‡
__GNUC__


178 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

181 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

187 #ifde‡
__USE_BSD


194 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

197 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

200 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

203 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

207 #ifde‡
__USE_MISC


208 
	#NSIG
 
_NSIG


	)

211 #ifde‡
__USE_GNU


212 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

216 #ifde‡
__USE_BSD


217 
__sigh™dÀr_t
 
	tsig_t
;

220 #ifde‡
__USE_POSIX


223 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__USE_GNU


240 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

244 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

247 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

248 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

253 
	~<bôs/siga˘i⁄.h
>

256 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

257 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

264 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

267 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

268 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

271 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

278 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

279 
	`__n⁄nuŒ
 ((1, 2));

281 #ifde‡
__USE_POSIX199309


286 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

294 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

295 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

296 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

297 
	`__n⁄nuŒ
 ((1));

301 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

302 
__THROW
;

307 #ifde‡
__USE_BSD


311 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

312 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

315 
	ssigvec


317 
__sigh™dÀr_t
 
sv_h™dÀr
;

318 
sv_mask
;

320 
sv_Êags
;

321 
	#sv_⁄°ack
 
sv_Êags


	)

325 
	#SV_ONSTACK
 (1 << 0)

	)

326 
	#SV_INTERRUPT
 (1 << 1)

	)

327 
	#SV_RESETHAND
 (1 << 2)

	)

335 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

336 
sigvec
 *
__ovec
Ë
__THROW
;

340 
	~<bôs/sigc⁄ãxt.h
>

343 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


349 
	#__√ed_size_t


	)

350 
	~<°ddef.h
>

355 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

357 
	~<bôs/sig°ack.h
>

358 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


360 
	~<sys/uc⁄ãxt.h
>

366 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

367 
__THROW
 
__©åibuã_dïªˇãd__
;

371 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

372 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

376 #ifde‡
__USE_XOPEN_EXTENDED


380 
	$sighﬁd
 (
__sig
Ë
__THROW
;

383 
	$sigªl£
 (
__sig
Ë
__THROW
;

386 
	$sigign‹e
 (
__sig
Ë
__THROW
;

389 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

392 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


395 
	~<bôs/±hªadty≥s.h
>

396 
	~<bôs/sigthªad.h
>

403 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

405 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

409 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__a
;

422 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

423 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 
	$î™d48_r
 (
__xsubi
[3],

425 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

426 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

430 *
__ª°ri˘
 
__ªsu…
)

431 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

432 
	$ƒ™d48_r
 (
__xsubi
[3],

433 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

434 *
__ª°ri˘
 
__ªsu…
)

435 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

441 
	$jønd48_r
 (
__xsubi
[3],

442 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

443 *
__ª°ri˘
 
__ªsu…
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 
	$£ed48_r
 (
__£ed16v
[3],

451 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$lc⁄g48_r
 (
__∑øm
[7],

454 
dønd48_d©a
 *
__buf„r
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

461 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


462 
	#__mÆloc_™d_ˇŒoc_deföed


	)

463 
__BEGIN_NAMESPACE_STD


465 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

467 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

468 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


473 
__BEGIN_NAMESPACE_STD


479 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

480 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

482 
	$‰ì
 (*
__±r
Ë
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 
	$c‰ì
 (*
__±r
Ë
__THROW
;

490 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


491 
	~<Æloˇ.h
>

494 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

495 || 
deföed
 
__USE_BSD


497 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

500 #ifde‡
__USE_XOPEN2K


502 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

503 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

506 #ifde‡
__USE_ISOC11


508 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


522 #ifde‡
__˝lu•lus


523 "C++" 
	`©_quick_exô
 ((*
__func
) ())

524 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

526 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

535 
__THROW
 
	`__n⁄nuŒ
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

544 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


548 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

550 
__END_NAMESPACE_STD


552 #ifde‡
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

564 
__END_NAMESPACE_STD


566 #ifde‡
__USE_GNU


569 *
	$£cuª_gëív
 (c⁄° *
__«me
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

573 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


577 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

580 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


583 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

584 
__THROW
 
	`__n⁄nuŒ
 ((2));

587 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 #ifdef 
__USE_MISC


594 
	$˛óªnv
 (Ë
__THROW
;

598 #i‡
deföed
 
__USE_MISC
 \

599 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

605 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

609 || 
deföed
 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

760 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

761 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

762 #ifde‡
__USE_GNU


763 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

765 
	`__n⁄nuŒ
 ((1, 4));

770 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

771 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
__END_NAMESPACE_STD


774 #ifde‡
__USE_ISOC99


775 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

776 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 
div_t
 
	$div
 (
__numî
, 
__díom
)

785 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

787 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

793 
__díom
)

794 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__END_NAMESPACE_C99


799 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

800 || 
deföed
 
__USE_SVID


807 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

808 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

813 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

819 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

820 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

823 #ifde‡
__USE_MISC


825 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

828 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

838 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

839 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

840 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

845 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

846 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

847 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

862 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

863 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

866 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

870 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

871 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

874 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifde‡
__USE_SVID


884 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

888 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


895 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

896 *c⁄° *
__ª°ri˘
 
__tokís
,

897 **
__ª°ri˘
 
__vÆuï
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

902 #ifde‡
__USE_XOPEN


904 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2KXSI


912 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

915 #ifde‡
__USE_XOPEN


920 
	$gø¡±
 (
__fd
Ë
__THROW
;

924 
	$u∆ock±
 (
__fd
Ë
__THROW
;

929 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

932 #ifde‡
__USE_GNU


936 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

937 
__THROW
 
	`__n⁄nuŒ
 ((2));

940 
	`gë±
 ();

943 #ifde‡
__USE_BSD


947 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

951 
	~<bôs/°dlib-Êﬂt.h
>

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

32 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

33 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

36 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


40 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

41 
__THROW
 
__©åibuã_puª__
;

44 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

47 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

50 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


53 *
	`ödex
 (*
__s
, 
__c
)

54 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

55 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

56 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


59 
__exã∫_Æways_ölöe
 *

60 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


62  
	`__buûtö_ödex
 (
__s
, 
__c
);

65 
__exã∫_Æways_ölöe
 const *

66 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


68  
	`__buûtö_ödex
 (
__s
, 
__c
);

71 
	}
}

73 *
	$ödex
 (c⁄° *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


81 *
	`rödex
 (*
__s
, 
__c
)

82 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

83 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

84 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


87 
__exã∫_Æways_ölöe
 *

88 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


90  
	`__buûtö_rödex
 (
__s
, 
__c
);

93 
__exã∫_Æways_ölöe
 const *

94 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


96  
	`__buûtö_rödex
 (
__s
, 
__c
);

99 
	}
}

101 *
	$rödex
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


109 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

113 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

114 
__THROW
 
__©åibuã_puª__
;

117 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
;

120 #ifdef 
__USE_XOPEN2K8


124 
	~<xloˇÀ.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

131 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

132 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

133 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

136 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_SVID
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/msg.h

19 #i‚de‡
_SYS_MSG_H


20 
	#_SYS_MSG_H


	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<sys/ùc.h
>

31 
	~<bôs/msq.h
>

34 
	#__√ed_time_t


	)

35 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

42 #i‚de‡
__ssize_t_deföed


43 
__ssize_t
 
	tssize_t
;

44 
	#__ssize_t_deföed


	)

50 #ifde‡
__USE_GNU


52 
	smsgbuf


54 
__sysˇŒ_¶⁄g_t
 
	mmty≥
;

55 
	mmãxt
[1];

60 
__BEGIN_DECLS


63 
	$msg˘l
 (
__msqid
, 
__cmd
, 
msqid_ds
 *
__buf
Ë
__THROW
;

66 
	$msggë
 (
key_t
 
__key
, 
__msgÊg
Ë
__THROW
;

72 
ssize_t
 
	`msgrcv
 (
__msqid
, *
__msgp
, 
size_t
 
__msgsz
,

73 
__msgtyp
, 
__msgÊg
);

79 
	`msg¢d
 (
__msqid
, c⁄° *
__msgp
, 
size_t
 
__msgsz
,

80 
__msgÊg
);

82 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 
	#DEV_BSIZE
 512

	)

78 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

79 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

80 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

81 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

84 #i‚de‡
howm™y


85 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

87 #ifde‡
__GNUC__


88 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

89 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

90 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

92 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

94 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

97 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

98 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sem.h

18 #i‚de‡
_SYS_SEM_H


19 
	#_SYS_SEM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/£m.h
>

32 #ifde‡
__USE_GNU


33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

41 
	s£mbuf


43 
	m£m_num
;

44 
	m£m_›
;

45 
	m£m_Êg
;

49 
__BEGIN_DECLS


52 
	$£m˘l
 (
__£mid
, 
__£mnum
, 
__cmd
, ...Ë
__THROW
;

55 
	$£mgë
 (
key_t
 
__key
, 
__n£ms
, 
__£mÊg
Ë
__THROW
;

58 
	$£m›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
Ë
__THROW
;

60 #ifde‡
__USE_GNU


62 
	$£mtimed›
 (
__£mid
, 
£mbuf
 *
__s›s
, 
size_t
 
__ns›s
,

63 c⁄° 
time•ec
 *
__timeout
Ë
__THROW
;

66 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

30 #ifde‡
__USE_GNU


32 
	~<bôs/sig£t.h
>

39 
	~<bôs/sockë.h
>

41 #ifde‡
__USE_BSD


44 
	sosockaddr


46 
	mß_Ámûy
;

47 
	mß_d©a
[14];

55 
	mSHUT_RD
 = 0,

56 
	#SHUT_RD
 
SHUT_RD


	)

57 
	mSHUT_WR
,

58 
	#SHUT_WR
 
SHUT_WR


	)

59 
	mSHUT_RDWR


60 
	#SHUT_RDWR
 
SHUT_RDWR


	)

69 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


70 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

71 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

75 
	#__SOCKADDR_ALLTYPES
 \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


94 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

95 uni⁄ { 
	m__SOCKADDR_ALLTYPES


96 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

97 #unde‡
__SOCKADDR_ONETYPE


100 #ifde‡
__USE_GNU


102 
	smmsghdr


104 
msghdr
 
	mmsg_hdr
;

105 
	mmsg_Àn
;

114 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

120 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

121 
__fds
[2]Ë
__THROW
;

124 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

125 
__THROW
;

128 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

142 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

143 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

150 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

157 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

164 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

165 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

166 
sockÀn_t
 
__addr_Àn
);

175 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

176 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

177 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

185 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

186 
__Êags
);

188 #ifde‡
__USE_GNU


194 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

195 
__vÀn
, 
__Êags
);

203 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

205 #ifde‡
__USE_GNU


211 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

212 
__vÀn
, 
__Êags
,

213 c⁄° 
time•ec
 *
__tmo
);

220 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

221 *
__ª°ri˘
 
__›tvÆ
,

222 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

227 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

228 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

234 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

244 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

245 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

247 #ifde‡
__USE_GNU


252 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

253 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

262 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

265 #ifde‡
__USE_XOPEN2K


267 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

271 #ifde‡
__USE_MISC


275 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

280 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


281 
	~<bôs/sockë2.h
>

284 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

79 c⁄° 
timez⁄e
 *
__tz
)

80 
__THROW
;

86 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

87 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

92 
	e__ôimî_which


95 
ITIMER_REAL
 = 0,

96 
	#ITIMER_REAL
 
ITIMER_REAL


	)

98 
ITIMER_VIRTUAL
 = 1,

99 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

102 
ITIMER_PROF
 = 2

103 
	#ITIMER_PROF
 
ITIMER_PROF


	)

108 
	sôimîvÆ


111 
timevÆ
 
ô_öãrvÆ
;

113 
timevÆ
 
ô_vÆue
;

116 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


119 
__ôimî_which
 
	t__ôimî_which_t
;

121 
	t__ôimî_which_t
;

126 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

127 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

132 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

133 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

134 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

139 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

140 
__THROW
 
	`__n⁄nuŒ
 ((1));

142 #ifde‡
__USE_BSD


144 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

145 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_GNU


155 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

156 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

160 #ifde‡
__USE_BSD


163 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

164 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

165 
	#timîcmp
(
a
, 
b
, 
CMP
) \

166 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

167 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

168 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

169 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

171 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

172 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

173 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

175 ++(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 -= 1000000; \

178 
	}
} 0)

	)

179 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

181 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

182 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

183 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

184 --(
ªsu…
)->
tv_£c
; \

185 (
ªsu…
)->
tv_u£c
 += 1000000; \

187 } 0)

	)

190 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/wait.h

23 #i‚def 
_SYS_WAIT_H


24 
	#_SYS_WAIT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<sig«l.h
>

33 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

36 
	~<bôs/waôÊags.h
>

38 #ifdef 
__USE_BSD


43 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


44 
	#__WAIT_INT
(
°©us
) \

45 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

46 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

48 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

56 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


57 
	#__WAIT_STATUS
 *

	)

58 
	#__WAIT_STATUS_DEFN
 *

	)

63 
waô
 *
	m__u±r
;

64 *
	m__ùå
;

65 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

66 
	#__WAIT_STATUS_DEFN
 *

	)

71 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

72 
	#__WAIT_STATUS
 *

	)

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	~<bôs/waô°©us.h
>

80 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

86 #ifde‡
__WIFCONTINUED


87 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifdef 
__USE_BSD


92 
	#WCOREFLAG
 
__WCOREFLAG


	)

93 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

94 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

95 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

99 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


102 
	mP_ALL
,

103 
	mP_PID
,

104 
	mP_PGID


105 } 
	tidty≥_t
;

114 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

116 #ifdef 
__USE_BSD


118 
	#WAIT_ANY
 (-1Ë

	)

119 
	#WAIT_MYPGRP
 0

	)

137 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

139 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


140 #i‚de‡
__id_t_deföed


141 
	~<bôs/ty≥s.h
>

142 
__id_t
 
	tid_t
;

143 
	#__id_t_deföed


	)

146 
	#__√ed_sigöfo_t


	)

147 
	~<bôs/sigöfo.h
>

160 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

161 
__›ti⁄s
);

164 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


167 
	grußge
;

174 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

175 
rußge
 * 
__ußge
Ë
__THROWNL
;

178 #ifde‡
__USE_BSD


180 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

181 
rußge
 *
__ußge
Ë
__THROWNL
;

185 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VAL
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

36 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

40 
	~<ídün.h
>

42 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

44 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

51 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

52 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VALF
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7f800000UL }).
__d
)

	)

40 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

49 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

50 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

27 #ñi‡
__GNUC_PREREQ
(2,96)

28 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

31 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

33 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

34 #ifde‡
__GNUC__


35 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

36 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

38 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

39 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


32 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 \

33 || 
deföed
 
	g_UAPI_IPV6_H
 \

34 || 
deföed
 
	g_LINUX_IN6_H
 \

35 || 
deföed
 
	g_IPV6_H


39 
	#__USE_KERNEL_IPV6_DEFS
 1

	)

41 
	#__USE_KERNEL_IPV6_DEFS
 0

	)

47 
	#IP_OPTIONS
 4

	)

48 
	#IP_HDRINCL
 3

	)

49 
	#IP_TOS
 1

	)

50 
	#IP_TTL
 2

	)

51 
	#IP_RECVOPTS
 6

	)

53 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

54 
	#IP_RETOPTS
 7

	)

55 
	#IP_MULTICAST_IF
 32

	)

56 
	#IP_MULTICAST_TTL
 33

	)

57 
	#IP_MULTICAST_LOOP
 34

	)

58 
	#IP_ADD_MEMBERSHIP
 35

	)

59 
	#IP_DROP_MEMBERSHIP
 36

	)

60 
	#IP_UNBLOCK_SOURCE
 37

	)

61 
	#IP_BLOCK_SOURCE
 38

	)

62 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

63 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

64 
	#IP_MSFILTER
 41

	)

65 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


66 
	#MCAST_JOIN_GROUP
 42

	)

67 
	#MCAST_BLOCK_SOURCE
 43

	)

68 
	#MCAST_UNBLOCK_SOURCE
 44

	)

69 
	#MCAST_LEAVE_GROUP
 45

	)

70 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

71 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

72 
	#MCAST_MSFILTER
 48

	)

73 
	#IP_MULTICAST_ALL
 49

	)

74 
	#IP_UNICAST_IF
 50

	)

76 
	#MCAST_EXCLUDE
 0

	)

77 
	#MCAST_INCLUDE
 1

	)

80 
	#IP_ROUTER_ALERT
 5

	)

81 
	#IP_PKTINFO
 8

	)

82 
	#IP_PKTOPTIONS
 9

	)

83 
	#IP_PMTUDISC
 10

	)

84 
	#IP_MTU_DISCOVER
 10

	)

85 
	#IP_RECVERR
 11

	)

86 
	#IP_RECVTTL
 12

	)

87 
	#IP_RECVTOS
 13

	)

88 
	#IP_MTU
 14

	)

89 
	#IP_FREEBIND
 15

	)

90 
	#IP_IPSEC_POLICY
 16

	)

91 
	#IP_XFRM_POLICY
 17

	)

92 
	#IP_PASSSEC
 18

	)

93 
	#IP_TRANSPARENT
 19

	)

94 
	#IP_MULTICAST_ALL
 49

	)

97 
	#IP_ORIGDSTADDR
 20

	)

98 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

100 
	#IP_MINTTL
 21

	)

101 
	#IP_NODEFRAG
 22

	)

102 
	#IP_CHECKSUM
 23

	)

103 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

106 
	#IP_PMTUDISC_DONT
 0

	)

107 
	#IP_PMTUDISC_WANT
 1

	)

108 
	#IP_PMTUDISC_DO
 2

	)

109 
	#IP_PMTUDISC_PROBE
 3

	)

113 
	#IP_PMTUDISC_INTERFACE
 4

	)

115 
	#IP_PMTUDISC_OMIT
 5

	)

117 
	#IP_MULTICAST_IF
 32

	)

118 
	#IP_MULTICAST_TTL
 33

	)

119 
	#IP_MULTICAST_LOOP
 34

	)

120 
	#IP_ADD_MEMBERSHIP
 35

	)

121 
	#IP_DROP_MEMBERSHIP
 36

	)

122 
	#IP_UNBLOCK_SOURCE
 37

	)

123 
	#IP_BLOCK_SOURCE
 38

	)

124 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

125 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

126 
	#IP_MSFILTER
 41

	)

127 
	#MCAST_JOIN_GROUP
 42

	)

128 
	#MCAST_BLOCK_SOURCE
 43

	)

129 
	#MCAST_UNBLOCK_SOURCE
 44

	)

130 
	#MCAST_LEAVE_GROUP
 45

	)

131 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

132 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

133 
	#MCAST_MSFILTER
 48

	)

134 
	#IP_MULTICAST_ALL
 49

	)

135 
	#IP_UNICAST_IF
 50

	)

138 
	#SOL_IP
 0

	)

140 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

141 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

142 
	#IP_MAX_MEMBERSHIPS
 20

	)

144 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


148 
	sù_›ts


150 
ö_addr
 
	mù_d°
;

151 
	mù_›ts
[40];

155 
	sù_mªqn


157 
ö_addr
 
	mimr_mu…üddr
;

158 
ö_addr
 
	mimr_addªss
;

159 
	mimr_ifödex
;

163 
	sö_pktöfo


165 
	mùi_ifödex
;

166 
ö_addr
 
	mùi_•ec_d°
;

167 
ö_addr
 
	mùi_addr
;

174 
	#IPV6_ADDRFORM
 1

	)

175 
	#IPV6_2292PKTINFO
 2

	)

176 
	#IPV6_2292HOPOPTS
 3

	)

177 
	#IPV6_2292DSTOPTS
 4

	)

178 
	#IPV6_2292RTHDR
 5

	)

179 
	#IPV6_2292PKTOPTIONS
 6

	)

180 
	#IPV6_CHECKSUM
 7

	)

181 
	#IPV6_2292HOPLIMIT
 8

	)

183 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

185 
	#IPV6_NEXTHOP
 9

	)

186 
	#IPV6_AUTHHDR
 10

	)

187 
	#IPV6_UNICAST_HOPS
 16

	)

188 
	#IPV6_MULTICAST_IF
 17

	)

189 
	#IPV6_MULTICAST_HOPS
 18

	)

190 
	#IPV6_MULTICAST_LOOP
 19

	)

191 
	#IPV6_JOIN_GROUP
 20

	)

192 
	#IPV6_LEAVE_GROUP
 21

	)

193 
	#IPV6_ROUTER_ALERT
 22

	)

194 
	#IPV6_MTU_DISCOVER
 23

	)

195 
	#IPV6_MTU
 24

	)

196 
	#IPV6_RECVERR
 25

	)

197 
	#IPV6_V6ONLY
 26

	)

198 
	#IPV6_JOIN_ANYCAST
 27

	)

199 
	#IPV6_LEAVE_ANYCAST
 28

	)

200 
	#IPV6_IPSEC_POLICY
 34

	)

201 
	#IPV6_XFRM_POLICY
 35

	)

203 
	#IPV6_RECVPKTINFO
 49

	)

204 
	#IPV6_PKTINFO
 50

	)

205 
	#IPV6_RECVHOPLIMIT
 51

	)

206 
	#IPV6_HOPLIMIT
 52

	)

207 
	#IPV6_RECVHOPOPTS
 53

	)

208 
	#IPV6_HOPOPTS
 54

	)

209 
	#IPV6_RTHDRDSTOPTS
 55

	)

210 
	#IPV6_RECVRTHDR
 56

	)

211 
	#IPV6_RTHDR
 57

	)

212 
	#IPV6_RECVDSTOPTS
 58

	)

213 
	#IPV6_DSTOPTS
 59

	)

215 
	#IPV6_RECVTCLASS
 66

	)

216 
	#IPV6_TCLASS
 67

	)

219 #i‡!
__USE_KERNEL_IPV6_DEFS


220 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

221 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

223 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

224 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

227 
	#IPV6_PMTUDISC_DONT
 0

	)

228 
	#IPV6_PMTUDISC_WANT
 1

	)

229 
	#IPV6_PMTUDISC_DO
 2

	)

230 
	#IPV6_PMTUDISC_PROBE
 3

	)

231 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

232 
	#IPV6_PMTUDISC_OMIT
 5

	)

235 
	#SOL_IPV6
 41

	)

236 
	#SOL_ICMPV6
 58

	)

239 
	#IPV6_RTHDR_LOOSE
 0

	)

240 
	#IPV6_RTHDR_STRICT
 1

	)

242 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__unu£d1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__unu£d2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

255 && 
deföed
 
	g__exã∫_Æways_ölöe
)

257 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

259 #ifde‡
__USE_ISOC99


260 
__loˇl_signgam
 = 0;

261  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

263  
	`lgamma_r
 (
__d
, &
signgam
);

265 
	}
}

266 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

268 #ifde‡
__USE_ISOC99


269 
__loˇl_signgam
 = 0;

270  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

272  
	`lgammaf_r
 (
__d
, &
signgam
);

274 
	}
}

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

278 #ifde‡
__USE_ISOC99


279 
__loˇl_signgam
 = 0;

280  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

282  
	`lgammÆ_r
 (
__d
, &
signgam
);

284 
	}
}

288 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
) \

289 && 
deföed
 
	g__exã∫_Æways_ölöe
)

291 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

293 #ifde‡
__USE_ISOC99


294 
__loˇl_signgam
 = 0;

295  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

297  
	`lgamma_r
 (
__d
, &
signgam
);

299 
	}
}

300 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

302 #ifde‡
__USE_ISOC99


303 
__loˇl_signgam
 = 0;

304  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

306  
	`lgammaf_r
 (
__d
, &
signgam
);

308 
	}
}

309 #ifde‡
__MATH_DECLARE_LDOUBLE


310 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

312 #ifde‡
__USE_ISOC99


313 
__loˇl_signgam
 = 0;

314  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

316  
	`lgammÆ_r
 (
__d
, &
signgam
);

318 
	}
}

323 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

324 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

325 #ifde‡
__MATH_DECLARE_LDOUBLE


326 #ifde‡
__NO_LONG_DOUBLE_MATH


327 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

329 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

334 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

335 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

336 #ifde‡
__MATH_DECLARE_LDOUBLE


337 #ifde‡
__NO_LONG_DOUBLE_MATH


338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

340 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

344 #ifde‡
__USE_ISOC99


346 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

347 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

348 #ifde‡
__MATH_DECLARE_LDOUBLE


349 #ifde‡
__NO_LONG_DOUBLE_MATH


350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

352 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

358 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

359 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

360 #ifde‡
__MATH_DECLARE_LDOUBLE


361 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

365 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

366 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

367 #ifde‡
__MATH_DECLARE_LDOUBLE


368 #ifde‡
__NO_LONG_DOUBLE_MATH


369 
__REDIRECT_NTH
 (
powl
, (, ),

370 
__pow_föôe
);

372 
__REDIRECT_NTH
 (
powl
, (, ),

373 
__powl_föôe
);

378 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

379 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

380 #ifde‡
__MATH_DECLARE_LDOUBLE


381 #ifde‡
__NO_LONG_DOUBLE_MATH


382 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

383 
__ªmaödî_föôe
);

385 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

386 
__ªmaödîl_föôe
);

390 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


392 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

393 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

394 #ifde‡
__MATH_DECLARE_LDOUBLE


395 #ifde‡
__NO_LONG_DOUBLE_MATH


396 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

397 
__sˇlb_föôe
);

399 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

400 
__sˇlbl_föôe
);

406 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

407 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

408 #ifde‡
__MATH_DECLARE_LDOUBLE


409 #ifde‡
__NO_LONG_DOUBLE_MATH


410 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

412 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

417 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

418 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

419 #ifde‡
__MATH_DECLARE_LDOUBLE


420 #ifde‡
__NO_LONG_DOUBLE_MATH


421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

423 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

427 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


429 
__gamma_r_föôe
 (, *);

430 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

432 
__loˇl_signgam
 = 0;

433 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

434  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

435 
	}
}

436 
__gammaf_r_föôe
 (, *);

437 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

439 
__loˇl_signgam
 = 0;

440 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

441  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

442 
	}
}

443 #ifde‡
__MATH_DECLARE_LDOUBLE


444 
__gammÆ_r_föôe
 (, *);

445 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

447 
__loˇl_signgam
 = 0;

448 #ifde‡
__NO_LONG_DOUBLE_MATH


449 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

451 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

453  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

454 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

116 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

342 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__MATH_INLINE
 

202 
__NTH
 (
	$Œrötf
 (
__x
))

204 
__ªs
;

209 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

210  
__ªs
;

211 
	}
}

212 
__MATH_INLINE
 

213 
__NTH
 (
	$Œröt
 (
__x
))

215 
__ªs
;

220 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

221  
__ªs
;

222 
	}
}

225 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

226 && 
deföed
 
__SSE2_MATH__


228 
__MATH_INLINE
 

229 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

231 #ifde‡
__AVX__


232 
__ªs
;

233 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

234  
__ªs
;

236 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

237  
__x
;

239 
	}
}

240 
__MATH_INLINE
 

241 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

243 #ifde‡
__AVX__


244 
__ªs
;

245 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

246  
__ªs
;

248 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

249  
__x
;

251 
	}
}

254 
__MATH_INLINE
 

255 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

257 #ifde‡
__AVX__


258 
__ªs
;

259 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

260  
__ªs
;

262 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

263  
__x
;

265 
	}
}

266 
__MATH_INLINE
 

267 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

269 #ifde‡
__AVX__


270 
__ªs
;

271 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

272  
__ªs
;

274 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

275  
__x
;

277 
	}
}

280 
	g__END_NAMESPACE_C99


283 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


285 
__BEGIN_NAMESPACE_C99


288 
__MATH_INLINE
 

289 
__NTH
 (
	$röt
 (
__x
))

291 
__ªs
;

296 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

297  
__ªs
;

298 
	}
}

299 
__MATH_INLINE
 

300 
__NTH
 (
	$rötf
 (
__x
))

302 
__ªs
;

307 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

308  
__ªs
;

309 
	}
}

311 #ifde‡
__USE_ISOC99


313 
__MATH_INLINE
 

314 
__NTH
 (
	$√¨byöt
 (
__x
))

316 
__ªs
;

321 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

322  
__ªs
;

323 
	}
}

324 
__MATH_INLINE
 

325 
__NTH
 (
	$√¨byötf
 (
__x
))

327 
__ªs
;

332 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

333  
__ªs
;

334 
	}
}

337 
	g__END_NAMESPACE_C99


340 
__BEGIN_NAMESPACE_STD


342 
__MATH_INLINE
 

343 
__NTH
 (
	$˚û
 (
__x
))

345 
__ªs
;

346 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

347  
__ªs
;

348 
	}
}

349 
__END_NAMESPACE_STD


351 
__BEGIN_NAMESPACE_C99


352 
__MATH_INLINE
 

353 
__NTH
 (
	$˚ûf
 (
__x
))

355 
__ªs
;

356 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

357  
__ªs
;

358 
	}
}

359 
__END_NAMESPACE_C99


361 
__BEGIN_NAMESPACE_STD


363 
__MATH_INLINE
 

364 
__NTH
 (
	$Êo‹
 (
__x
))

366 
__ªs
;

367 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

368  
__ªs
;

369 
	}
}

370 
__END_NAMESPACE_STD


372 
__BEGIN_NAMESPACE_C99


373 
__MATH_INLINE
 

374 
__NTH
 (
	$Êo‹f
 (
__x
))

376 
__ªs
;

377 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

378  
__ªs
;

379 
	}
}

380 
	g__END_NAMESPACE_C99


385 #i‚de‡
__x86_64__


386 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

387 && 
deföed
 
	g__OPTIMIZE__
)

391 #unde‡
m©h_îrh™dlög


400 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


401 
	#__ölöe_m©h›
(
func
, 
›
) \

402 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

403 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

404 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

405 
	#__ölöe_m©h›NP
(
func
, 
›
) \

406 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

407 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›
(
func
, 
›
) \

411 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

412 
	#__ölöe_m©h›NP
(
func
, 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

416 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

417 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

418 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

422 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


423 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

424 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

425 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

426 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

427 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

428 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

429 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

438 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

439 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

440 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

442 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

443 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

445 
Êﬂt_ty≥
 
__ªsu…
; \

446 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

447  
__ªsu…
; \

448 }

	)

451 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


452 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

453 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

454 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

456 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

457 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

460 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

461 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

462 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

464 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

468 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

469 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

470 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

472 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

478 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

479 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

482 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

483 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

486 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

487 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

491 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

492 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

493 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

495 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

496 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

498 
code
; \

499 }

	)

502 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

503 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

504 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

506 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

507 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

509 
code
; \

510 }

	)

512 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

513 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

514 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

516 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

517 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

518 
Êﬂt_ty≥
 
¨g3
)) \

520 
code
; \

521 }

	)

525 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


529 #ifde‡
__FAST_MATH__


530 #ifde‡
__USE_GNU


531 
	#__söcos_code
 \

532 
__co§
; \

533 
__sör
; \

534 
__swtmp
; \

535 
__asm
 
__vﬁ©ûe__
 \

550 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

551 *
__söx
 = 
__sör
; \

552 *
__cosx
 = 
__co§


	)

554 
__MATH_INLINE
 

555 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

557 
__söcos_code
;

558 
	}
}

560 
__MATH_INLINE
 

561 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

563 
__söcos_code
;

564 
	}
}

566 
__MATH_INLINE
 

567 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

569 
__söcos_code
;

570 
	}
}

577 #i‡
__GNUC_PREREQ
 (3, 5)

578 
	#__expm1_code
 \

579 
__ãmp
; \

580 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

581  
__ãmp
 ? __ãm∞: 
__x


	)

583 
	#__expm1_code
 \

584 
__vÆue
; \

585 
__exp⁄ít
; \

586 
__ãmp
; \

587 
__asm
 
__vﬁ©ûe__
 \

596 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

597 
__asm
 
__vﬁ©ûe__
 \

599 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

600 
__ãmp
 -= 1.0; \

601 
__ãmp
 +
__vÆue
; \

602  
__ãmp
 ? __ãm∞: 
__x


	)

604 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

606 #i‡
	`__GNUC_PREREQ
 (3, 4)

607 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

609 
	#__exp_code
 \

610 
__vÆue
; \

611 
__exp⁄ít
; \

612 
__asm
 
__vﬁ©ûe__
 \

620 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

621 
__vÆue
 += 1.0; \

622 
__asm
 
__vﬁ©ûe__
 \

624 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

625  
__vÆue


	)

626 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

627 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

631 #i‡!
	`__GNUC_PREREQ
 (3, 5)

632 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

633 
__vÆue
; \

634 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

635 
__asm
 
__vﬁ©ûe__
 \

637 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

638  
__vÆue
)

643 #i‡
	`__GNUC_PREREQ
 (3, 4)

644 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

645  
	$__buûtö_©™2l
 (
__y
, 
__x
))

647 
	#__©™2_code
 \

648 
__vÆue
; \

649 
__asm
 
__vﬁ©ûe__
 \

651 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

652  
__vÆue


	)

653 #ifde‡
__FAST_MATH__


654 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

656 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

660 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

661 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

662 
__vÆue
; \

663 
__asm
 
__vﬁ©ûe__
 \

668 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

669  
__vÆue
)

673 #ifde‡
__FAST_MATH__


674 #i‡!
	`__GNUC_PREREQ
 (3,3)

675 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

676 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

677 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

679 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

683 #i‡
	`__GNUC_PREREQ
 (2, 8)

684 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

685 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


686 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

687 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

692 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

695 #ifde‡
__FAST_MATH__


696 #i‡!
	`__GNUC_PREREQ
 (3, 4)

698 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

700 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

702 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

705 #i‡!
	`__GNUC_PREREQ
 (3, 5)

706 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

708 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

709 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

712 #i‡!
	`__GNUC_PREREQ
 (3, 4)

713 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

717 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

718 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

719 { 
__xld
: 
__x
 
	}
}; \

720 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

721 
	g__n
.
	g__xi
[1] = 0x80000000; \

722 
	g__n
.
	g__xi
[0] = 0; \

723  
	g__n
.
	g__xld
)

726 #ifde‡
__FAST_MATH__


728 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

729 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

730  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

732 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

733 
__ex
 = 
	`__ex∂
 (
__x
); \

734  0.5 * (
__ex
 + 1.0 / __ex))

736 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

737 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

738  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

741 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

742 
__vÆue
; \

743 
__ign‹e
; \

744 
__cw
; \

745 
__cwtmp
; \

746 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

754 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

755 "=m" (
__cw
) \

756 : "0" (
__x
)); \

757  
__vÆue
)

759 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

760 
__vÆue
; \

761 
__ign‹e
; \

762 
__cw
; \

763 
__cwtmp
; \

764 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

772 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

773 "=m" (
__cw
) \

774 : "0" (
__x
)); \

775  
__vÆue
)

777 #ifde‡
__FAST_MATH__


778 
	#__ldexp_code
 \

779 
__vÆue
; \

780 
__asm
 
__vﬁ©ûe__
 \

782 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

783  
__vÆue


	)

785 
__MATH_INLINE
 

786 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

788 
__ldexp_code
;

789 
	}
}

794 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


796 #ifde‡
__FAST_MATH__


797 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

801 
	#__M_SQRT2
 1.41421356237309504880L

	)

803 #i‡!
	`__GNUC_PREREQ
 (3, 5)

804 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

805 
__vÆue
; \

806 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

807 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

809 
__asm
 
__vﬁ©ûe__
 \

813 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

814  
__vÆue
)

819 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

820 
__y
 = 
	`__Áb¶
 (
__x
); \

821  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

822 * 
	$__sgn1l
 (
__x
)))

824 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

825  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

827 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

828 
__y
 = 
	`__Áb¶
 (
__x
); \

829  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

832 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

833  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

835 #i‡!
	`__GNUC_PREREQ
 (3, 5)

836 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

837 
__vÆue
; \

838 
__junk
; \

839 
__asm
 
__vﬁ©ûe__
 \

841 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

842  
__vÆue
)

848 #ifde‡
__USE_ISOC99


849 #ifde‡
__FAST_MATH__


851 #i‡!
	`__GNUC_PREREQ
 (3, 5)

852 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

855 
__MATH_INLINE
 

856 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

858 
__ldexp_code
;

859 
	}
}

861 
__MATH_INLINE
 

862 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

864 
__ldexp_code
;

865 
	}
}

867 
__ölöe_m©h›NP
 (
röt
, "frndint")

870 
	#__Ãöt_code
 \

871 
__Ãöåes
; \

872 
__asm__
 
__vﬁ©ûe__
 \

874 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

875  
__Ãöåes


	)

876 
__MATH_INLINE
 

877 
__NTH
 (
	$Ãötf
 (
__x
))

879 
__Ãöt_code
;

880 
	}
}

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãöt
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöé
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 #unde‡
__Ãöt_code


893 
	#__Œröt_code
 \

894 
__Œröåes
; \

895 
__asm__
 
__vﬁ©ûe__
 \

897 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

898  
__Œröåes


	)

899 
__MATH_INLINE
 

900 
__NTH
 (
	$Œrötf
 (
__x
))

902 
__Œröt_code
;

903 
	}
}

904 
__MATH_INLINE
 

905 
__NTH
 (
	$Œröt
 (
__x
))

907 
__Œröt_code
;

908 
	}
}

909 
__MATH_INLINE
 

910 
__NTH
 (
	$Œröé
 (
__x
))

912 
__Œröt_code
;

913 
	}
}

914 #unde‡
__Œröt_code


919 #ifde‡
__USE_MISC


921 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

922 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

923 
__vÆue
; \

924 
__˛obbîed
; \

925 
__asm
 
__vﬁ©ûe__
 \

930 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

931  
__vÆue
)

936 
__MATH_INLINE
 

937 
__NTH
 (
	$__föôe
 (
__x
))

939  (
__exãnsi⁄__


940 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

942 
	}
}

947 #unde‡
__©™2_code


948 #ifde‡
__FAST_MATH__


949 #unde‡
__expm1_code


950 #unde‡
__exp_code


951 #unde‡
__söcos_code


958 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


959 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

960 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

961 
__vÆue
;

962 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

963 : "Ò" (
__vÆue
)

964 : "0" (
__x
), "u" (
__y
) : "st(1)");

965  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 
	#MAP_ANONYMOUS
 0x20

	)

53 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

54 
	#MAP_32BIT
 0x40

	)

58 #ifde‡
__USE_MISC


59 
	#MAP_GROWSDOWN
 0x00100

	)

60 
	#MAP_DENYWRITE
 0x00800

	)

61 
	#MAP_EXECUTABLE
 0x01000

	)

62 
	#MAP_LOCKED
 0x02000

	)

63 
	#MAP_NORESERVE
 0x04000

	)

64 
	#MAP_POPULATE
 0x08000

	)

65 
	#MAP_NONBLOCK
 0x10000

	)

66 
	#MAP_STACK
 0x20000

	)

67 
	#MAP_HUGETLB
 0x40000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HUGEPAGE
 14

	)

99 
	#MADV_NOHUGEPAGE
 15

	)

100 
	#MADV_DONTDUMP
 16

	)

102 
	#MADV_DODUMP
 17

	)

103 
	#MADV_HWPOISON
 100

	)

107 #ifde‡
__USE_XOPEN2K


108 
	#POSIX_MADV_NORMAL
 0

	)

109 
	#POSIX_MADV_RANDOM
 1

	)

110 
	#POSIX_MADV_SEQUENTIAL
 2

	)

111 
	#POSIX_MADV_WILLNEED
 3

	)

112 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/mqueue.h

18 #i‚de‡
_MQUEUE_H


22 
	~<bôs/ty≥s.h
>

24 
	tmqd_t
;

26 
	smq_©å


28 
__sysˇŒ_¶⁄g_t
 
	mmq_Êags
;

29 
__sysˇŒ_¶⁄g_t
 
	mmq_maxmsg
;

30 
__sysˇŒ_¶⁄g_t
 
	mmq_msgsize
;

31 
__sysˇŒ_¶⁄g_t
 
	mmq_curmsgs
;

32 
__sysˇŒ_¶⁄g_t
 
	m__∑d
[4];

	@/usr/include/bits/mqueue2.h

19 #i‚def 
_FCNTL_H


25 
mqd_t
 
	$mq_›í
 (c⁄° *
__«me
, 
__oÊag
, ...)

26 
__THROW
 
	`__n⁄nuŒ
 ((1));

27 
mqd_t
 
	$__mq_›í_2
 (c⁄° *
__«me
, 
__oÊag
)

28 
__THROW
 
	`__n⁄nuŒ
 ((1));

29 
mqd_t
 
	`__REDIRECT_NTH
 (
__mq_›í_Æüs
, (c⁄° *
__«me
,

30 
__oÊag
, ...), 
mq_›í
)

31 
	`__n⁄nuŒ
 ((1));

32 
	`__îr‹de˛
 (
__mq_›í_wr⁄g_numbî_of_¨gs
,

34 
	`__îr‹de˛
 (
__mq_›í_missög_mode_™d_©å
,

37 
__f‹tify_fun˘i⁄
 
mqd_t


38 
	`__NTH
 (
	$mq_›í
 (c⁄° *
__«me
, 
__oÊag
, ...))

40 i‡(
	`__va_¨g_∑ck_Àn
 () != 0 && __va_arg_pack_len () != 2)

41 
	`__mq_›í_wr⁄g_numbî_of_¨gs
 ();

43 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

45 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () == 0)

47 
	`__mq_›í_missög_mode_™d_©å
 ();

48  
	`__mq_›í_2
 (
__«me
, 
__oÊag
);

50  
	`__mq_›í_Æüs
 (
__«me
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

53 i‡(
	`__va_¨g_∑ck_Àn
 () == 0)

54  
	`__mq_›í_2
 (
__«me
, 
__oÊag
);

56  
	`__mq_›í_Æüs
 (
__«me
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 
	}
}

	@/usr/include/bits/msq.h

18 #i‚de‡
_SYS_MSG_H


22 
	~<bôs/ty≥s.h
>

25 
	#MSG_NOERROR
 010000

	)

26 #ifde‡
__USE_GNU


27 
	#MSG_EXCEPT
 020000

	)

31 
__sysˇŒ_ul⁄g_t
 
	tmsgqnum_t
;

32 
__sysˇŒ_ul⁄g_t
 
	tmsgÀn_t
;

36 
	smsqid_ds


38 
ùc_≥rm
 
	mmsg_≥rm
;

39 
__time_t
 
	mmsg_°ime
;

40 #i‚de‡
__x86_64__


41 
	m__unu£d1
;

43 
__time_t
 
	mmsg_πime
;

44 #i‚de‡
__x86_64__


45 
	m__unu£d2
;

47 
__time_t
 
	mmsg_˘ime
;

48 #i‚de‡
__x86_64__


49 
	m__unu£d3
;

51 
__sysˇŒ_ul⁄g_t
 
	m__msg_cbyãs
;

52 
msgqnum_t
 
	mmsg_qnum
;

53 
msgÀn_t
 
	mmsg_qbyãs
;

54 
__pid_t
 
	mmsg_l•id
;

55 
__pid_t
 
	mmsg_Ãpid
;

56 
__sysˇŒ_ul⁄g_t
 
	m__unu£d4
;

57 
__sysˇŒ_ul⁄g_t
 
	m__unu£d5
;

60 #ifde‡
__USE_MISC


62 
	#msg_cbyãs
 
__msg_cbyãs


	)

65 
	#MSG_STAT
 11

	)

66 
	#MSG_INFO
 12

	)

67 
	#MSG_STAT_ANY
 13

	)

70 
	smsgöfo


72 
	mmsgpoﬁ
;

73 
	mmsgm≠
;

74 
	mmsgmax
;

75 
	mmsgmnb
;

76 
	mmsgmni
;

77 
	mmsgssz
;

78 
	mmsgtql
;

79 
	mmsg£g
;

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


49 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

50 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 
	m__∑d1
;

188 
	m__∑d2
;

191 
	m__Êags
;

192 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

193 } 
	m__d©a
;

197 
	m__lock
;

198 
	m__ƒ_ªadîs
;

199 
	m__ªadîs_wakeup
;

200 
	m__wrôî_wakeup
;

201 
	m__ƒ_ªadîs_queued
;

202 
	m__ƒ_wrôîs_queued
;

205 
	m__Êags
;

206 
	m__sh¨ed
;

207 
	m__∑d1
;

208 
	m__∑d2
;

209 
	m__wrôî
;

210 } 
	m__d©a
;

212 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

213 
	m__Æign
;

214 } 
	t±hªad_rwlock_t
;

218 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

219 
	m__Æign
;

220 } 
	t±hªad_rwlock©å_t
;

224 #ifde‡
__USE_XOPEN2K


226 vﬁ©ûê
	t±hªad_•ölock_t
;

233 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

234 
	m__Æign
;

235 } 
	t±hªad_b¨rõr_t
;

239 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

240 
	m__Æign
;

241 } 
	t±hªad_b¨rõøâr_t
;

245 #i‚de‡
__x86_64__


247 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sem.h

18 #i‚de‡
_SYS_SEM_H


22 
	~<sys/ty≥s.h
>

25 
	#SEM_UNDO
 0x1000

	)

28 
	#GETPID
 11

	)

29 
	#GETVAL
 12

	)

30 
	#GETALL
 13

	)

31 
	#GETNCNT
 14

	)

32 
	#GETZCNT
 15

	)

33 
	#SETVAL
 16

	)

34 
	#SETALL
 17

	)

38 
	s£mid_ds


40 
ùc_≥rm
 
	m£m_≥rm
;

41 
__time_t
 
	m£m_Ÿime
;

42 
__sysˇŒ_ul⁄g_t
 
	m__unu£d1
;

43 
__time_t
 
	m£m_˘ime
;

44 
__sysˇŒ_ul⁄g_t
 
	m__unu£d2
;

45 
__sysˇŒ_ul⁄g_t
 
	m£m_n£ms
;

46 
__sysˇŒ_ul⁄g_t
 
	m__unu£d3
;

47 
__sysˇŒ_ul⁄g_t
 
	m__unu£d4
;

64 
	#_SEM_SEMUN_UNDEFINED
 1

	)

66 #ifde‡
__USE_MISC


69 
	#SEM_STAT
 18

	)

70 
	#SEM_INFO
 19

	)

71 
	#SEM_STAT_ANY
 20

	)

73 
	s£möfo


75 
	m£mm≠
;

76 
	m£mmni
;

77 
	m£mmns
;

78 
	m£mmnu
;

79 
	m£mm¶
;

80 
	m£m›m
;

81 
	m£mume
;

82 
	m£musz
;

83 
	m£mvmx
;

84 
	m£m´m
;

	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__unu£d1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__unu£d2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__unu£d3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__unu£d4
;

69 
__sysˇŒ_ul⁄g_t
 
__unu£d5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

77 
	#SHM_STAT_ANY
 15

	)

80 
	#SHM_DEST
 01000

	)

81 
	#SHM_LOCKED
 02000

	)

82 
	#SHM_HUGETLB
 04000

	)

83 
	#SHM_NORESERVE
 010000

	)

85 
	sshmöfo


87 
__sysˇŒ_ul⁄g_t
 
shmmax
;

88 
__sysˇŒ_ul⁄g_t
 
shmmö
;

89 
__sysˇŒ_ul⁄g_t
 
shmmni
;

90 
__sysˇŒ_ul⁄g_t
 
shm£g
;

91 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

92 
__sysˇŒ_ul⁄g_t
 
__unu£d1
;

93 
__sysˇŒ_ul⁄g_t
 
__unu£d2
;

94 
__sysˇŒ_ul⁄g_t
 
__unu£d3
;

95 
__sysˇŒ_ul⁄g_t
 
__unu£d4
;

98 
	sshm_öfo


100 
u£d_ids
;

101 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

102 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

103 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

105 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

110 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 } 
_sigÁu…
;

115 
si_b™d
;

116 
si_fd
;

117 } 
_sigpﬁl
;

122 *
_ˇŒ_addr
;

123 
_sysˇŒ
;

124 
_¨ch
;

125 } 
_sigsys
;

126 } 
_sifõlds
;

127 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

131 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

132 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

133 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

134 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

135 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

136 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

137 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

138 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

139 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

140 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

141 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

142 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

143 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

144 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

145 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

146 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

153 
SI_ASYNCNL
 = -60,

154 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

155 
SI_TKILL
 = -6,

156 
	#SI_TKILL
 
SI_TKILL


	)

157 
SI_SIGIO
,

158 
	#SI_SIGIO
 
SI_SIGIO


	)

159 
SI_ASYNCIO
,

160 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

161 
SI_MESGQ
,

162 
	#SI_MESGQ
 
SI_MESGQ


	)

163 
SI_TIMER
,

164 
	#SI_TIMER
 
SI_TIMER


	)

165 
SI_QUEUE
,

166 
	#SI_QUEUE
 
SI_QUEUE


	)

167 
SI_USER
,

168 
	#SI_USER
 
SI_USER


	)

169 
SI_KERNEL
 = 0x80

170 
	#SI_KERNEL
 
SI_KERNEL


	)

177 
ILL_ILLOPC
 = 1,

178 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

179 
ILL_ILLOPN
,

180 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

181 
ILL_ILLADR
,

182 
	#ILL_ILLADR
 
ILL_ILLADR


	)

183 
ILL_ILLTRP
,

184 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

185 
ILL_PRVOPC
,

186 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

187 
ILL_PRVREG
,

188 
	#ILL_PRVREG
 
ILL_PRVREG


	)

189 
ILL_COPROC
,

190 
	#ILL_COPROC
 
ILL_COPROC


	)

191 
ILL_BADSTK


192 
	#ILL_BADSTK
 
ILL_BADSTK


	)

198 
FPE_INTDIV
 = 1,

199 
	#FPE_INTDIV
 
FPE_INTDIV


	)

200 
FPE_INTOVF
,

201 
	#FPE_INTOVF
 
FPE_INTOVF


	)

202 
FPE_FLTDIV
,

203 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

204 
FPE_FLTOVF
,

205 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

206 
FPE_FLTUND
,

207 
	#FPE_FLTUND
 
FPE_FLTUND


	)

208 
FPE_FLTRES
,

209 
	#FPE_FLTRES
 
FPE_FLTRES


	)

210 
FPE_FLTINV
,

211 
	#FPE_FLTINV
 
FPE_FLTINV


	)

212 
FPE_FLTSUB


213 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

219 
SEGV_MAPERR
 = 1,

220 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

221 
SEGV_ACCERR


222 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

228 
BUS_ADRALN
 = 1,

229 
	#BUS_ADRALN
 
BUS_ADRALN


	)

230 
BUS_ADRERR
,

231 
	#BUS_ADRERR
 
BUS_ADRERR


	)

232 
BUS_OBJERR


233 
	#BUS_OBJERR
 
BUS_OBJERR


	)

239 
TRAP_BRKPT
 = 1,

240 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

241 
TRAP_TRACE


242 
	#TRAP_TRACE
 
TRAP_TRACE


	)

248 
CLD_EXITED
 = 1,

249 
	#CLD_EXITED
 
CLD_EXITED


	)

250 
CLD_KILLED
,

251 
	#CLD_KILLED
 
CLD_KILLED


	)

252 
CLD_DUMPED
,

253 
	#CLD_DUMPED
 
CLD_DUMPED


	)

254 
CLD_TRAPPED
,

255 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

256 
CLD_STOPPED
,

257 
	#CLD_STOPPED
 
CLD_STOPPED


	)

258 
CLD_CONTINUED


259 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

265 
POLL_IN
 = 1,

266 
	#POLL_IN
 
POLL_IN


	)

267 
POLL_OUT
,

268 
	#POLL_OUT
 
POLL_OUT


	)

269 
POLL_MSG
,

270 
	#POLL_MSG
 
POLL_MSG


	)

271 
POLL_ERR
,

272 
	#POLL_ERR
 
POLL_ERR


	)

273 
POLL_PRI
,

274 
	#POLL_PRI
 
POLL_PRI


	)

275 
POLL_HUP


276 
	#POLL_HUP
 
POLL_HUP


	)

279 #unde‡
__√ed_sigöfo_t


283 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

284 && !
deföed
 
__have_sigevít_t


285 
	#__have_sigevít_t
 1

	)

288 
	#__SIGEV_MAX_SIZE
 64

	)

289 #i‡
__WORDSIZE
 == 64

290 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

292 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

296 #i‚de‡
__have_±hªad_©å_t


297 
±hªad_©å_t
 
	t±hªad_©å_t
;

298 
	#__have_±hªad_©å_t
 1

	)

301 
	ssigevít


303 
sigvÆ_t
 
sigev_vÆue
;

304 
sigev_signo
;

305 
sigev_nŸify
;

309 
_∑d
[
__SIGEV_PAD_SIZE
];

313 
__pid_t
 
_tid
;

317 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

318 
±hªad_©å_t
 *
_©åibuã
;

319 } 
_sigev_thªad
;

320 } 
_sigev_un
;

321 } 
	tsigevít_t
;

324 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

325 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

330 
SIGEV_SIGNAL
 = 0,

331 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

332 
SIGEV_NONE
,

333 
	#SIGEV_NONE
 
SIGEV_NONE


	)

334 
SIGEV_THREAD
,

335 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

337 
SIGEV_THREAD_ID
 = 4

338 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‚de‡
_SYS_SOCKET_H


27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	~<sys/ty≥s.h
>

33 #i‚de‡
__sockÀn_t_deföed


34 
__sockÀn_t
 
	tsockÀn_t
;

35 
	#__sockÀn_t_deföed


	)

39 
	~<bôs/sockë_ty≥.h
>

42 
	#PF_UNSPEC
 0

	)

43 
	#PF_LOCAL
 1

	)

44 
	#PF_UNIX
 
PF_LOCAL


	)

45 
	#PF_FILE
 
PF_LOCAL


	)

46 
	#PF_INET
 2

	)

47 
	#PF_AX25
 3

	)

48 
	#PF_IPX
 4

	)

49 
	#PF_APPLETALK
 5

	)

50 
	#PF_NETROM
 6

	)

51 
	#PF_BRIDGE
 7

	)

52 
	#PF_ATMPVC
 8

	)

53 
	#PF_X25
 9

	)

54 
	#PF_INET6
 10

	)

55 
	#PF_ROSE
 11

	)

56 
	#PF_DEC√t
 12

	)

57 
	#PF_NETBEUI
 13

	)

58 
	#PF_SECURITY
 14

	)

59 
	#PF_KEY
 15

	)

60 
	#PF_NETLINK
 16

	)

61 
	#PF_ROUTE
 
PF_NETLINK


	)

62 
	#PF_PACKET
 17

	)

63 
	#PF_ASH
 18

	)

64 
	#PF_ECONET
 19

	)

65 
	#PF_ATMSVC
 20

	)

66 
	#PF_RDS
 21

	)

67 
	#PF_SNA
 22

	)

68 
	#PF_IRDA
 23

	)

69 
	#PF_PPPOX
 24

	)

70 
	#PF_WANPIPE
 25

	)

71 
	#PF_LLC
 26

	)

72 
	#PF_IB
 27

	)

73 
	#PF_MPLS
 28

	)

74 
	#PF_CAN
 29

	)

75 
	#PF_TIPC
 30

	)

76 
	#PF_BLUETOOTH
 31

	)

77 
	#PF_IUCV
 32

	)

78 
	#PF_RXRPC
 33

	)

79 
	#PF_ISDN
 34

	)

80 
	#PF_PHONET
 35

	)

81 
	#PF_IEEE802154
 36

	)

82 
	#PF_CAIF
 37

	)

83 
	#PF_ALG
 38

	)

84 
	#PF_NFC
 39

	)

85 
	#PF_VSOCK
 40

	)

86 
	#PF_MAX
 41

	)

89 
	#AF_UNSPEC
 
PF_UNSPEC


	)

90 
	#AF_LOCAL
 
PF_LOCAL


	)

91 
	#AF_UNIX
 
PF_UNIX


	)

92 
	#AF_FILE
 
PF_FILE


	)

93 
	#AF_INET
 
PF_INET


	)

94 
	#AF_AX25
 
PF_AX25


	)

95 
	#AF_IPX
 
PF_IPX


	)

96 
	#AF_APPLETALK
 
PF_APPLETALK


	)

97 
	#AF_NETROM
 
PF_NETROM


	)

98 
	#AF_BRIDGE
 
PF_BRIDGE


	)

99 
	#AF_ATMPVC
 
PF_ATMPVC


	)

100 
	#AF_X25
 
PF_X25


	)

101 
	#AF_INET6
 
PF_INET6


	)

102 
	#AF_ROSE
 
PF_ROSE


	)

103 
	#AF_DEC√t
 
PF_DEC√t


	)

104 
	#AF_NETBEUI
 
PF_NETBEUI


	)

105 
	#AF_SECURITY
 
PF_SECURITY


	)

106 
	#AF_KEY
 
PF_KEY


	)

107 
	#AF_NETLINK
 
PF_NETLINK


	)

108 
	#AF_ROUTE
 
PF_ROUTE


	)

109 
	#AF_PACKET
 
PF_PACKET


	)

110 
	#AF_ASH
 
PF_ASH


	)

111 
	#AF_ECONET
 
PF_ECONET


	)

112 
	#AF_ATMSVC
 
PF_ATMSVC


	)

113 
	#AF_RDS
 
PF_RDS


	)

114 
	#AF_SNA
 
PF_SNA


	)

115 
	#AF_IRDA
 
PF_IRDA


	)

116 
	#AF_PPPOX
 
PF_PPPOX


	)

117 
	#AF_WANPIPE
 
PF_WANPIPE


	)

118 
	#AF_LLC
 
PF_LLC


	)

119 
	#AF_IB
 
PF_IB


	)

120 
	#AF_MPLS
 
PF_MPLS


	)

121 
	#AF_CAN
 
PF_CAN


	)

122 
	#AF_TIPC
 
PF_TIPC


	)

123 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

124 
	#AF_IUCV
 
PF_IUCV


	)

125 
	#AF_RXRPC
 
PF_RXRPC


	)

126 
	#AF_ISDN
 
PF_ISDN


	)

127 
	#AF_PHONET
 
PF_PHONET


	)

128 
	#AF_IEEE802154
 
PF_IEEE802154


	)

129 
	#AF_CAIF
 
PF_CAIF


	)

130 
	#AF_ALG
 
PF_ALG


	)

131 
	#AF_NFC
 
PF_NFC


	)

132 
	#AF_VSOCK
 
PF_VSOCK


	)

133 
	#AF_MAX
 
PF_MAX


	)

139 
	#SOL_RAW
 255

	)

140 
	#SOL_DECNET
 261

	)

141 
	#SOL_X25
 262

	)

142 
	#SOL_PACKET
 263

	)

143 
	#SOL_ATM
 264

	)

144 
	#SOL_AAL
 265

	)

145 
	#SOL_IRDA
 266

	)

148 
	#SOMAXCONN
 128

	)

151 
	~<bôs/sockaddr.h
>

154 
	ssockaddr


156 
__SOCKADDR_COMMON
 (
ß_
);

157 
	mß_d©a
[14];

163 
	#__ss_Æig¡y≥
 

	)

164 
	#_SS_PADSIZE
 \

165 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

167 
	ssockaddr_°‹age


169 
__SOCKADDR_COMMON
 (
ss_
);

170 
	m__ss_∑ddög
[
_SS_PADSIZE
];

171 
__ss_Æig¡y≥
 
	m__ss_Æign
;

178 
	mMSG_OOB
 = 0x01,

179 
	#MSG_OOB
 
MSG_OOB


	)

180 
	mMSG_PEEK
 = 0x02,

181 
	#MSG_PEEK
 
MSG_PEEK


	)

182 
	mMSG_DONTROUTE
 = 0x04,

183 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

184 #ifde‡
__USE_GNU


186 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

187 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

189 
	mMSG_CTRUNC
 = 0x08,

190 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

191 
	mMSG_PROXY
 = 0x10,

192 
	#MSG_PROXY
 
MSG_PROXY


	)

193 
	mMSG_TRUNC
 = 0x20,

194 
	#MSG_TRUNC
 
MSG_TRUNC


	)

195 
	mMSG_DONTWAIT
 = 0x40,

196 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

197 
	mMSG_EOR
 = 0x80,

198 
	#MSG_EOR
 
MSG_EOR


	)

199 
	mMSG_WAITALL
 = 0x100,

200 
	#MSG_WAITALL
 
MSG_WAITALL


	)

201 
	mMSG_FIN
 = 0x200,

202 
	#MSG_FIN
 
MSG_FIN


	)

203 
	mMSG_SYN
 = 0x400,

204 
	#MSG_SYN
 
MSG_SYN


	)

205 
	mMSG_CONFIRM
 = 0x800,

206 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

207 
	mMSG_RST
 = 0x1000,

208 
	#MSG_RST
 
MSG_RST


	)

209 
	mMSG_ERRQUEUE
 = 0x2000,

210 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

211 
	mMSG_NOSIGNAL
 = 0x4000,

212 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

213 
	mMSG_MORE
 = 0x8000,

214 
	#MSG_MORE
 
MSG_MORE


	)

215 
	mMSG_WAITFORONE
 = 0x10000,

216 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

217 
	mMSG_FASTOPEN
 = 0x20000000,

218 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

220 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

223 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

229 
	smsghdr


231 *
	mmsg_«me
;

232 
sockÀn_t
 
	mmsg_«mñí
;

234 
iovec
 *
	mmsg_iov
;

235 
size_t
 
	mmsg_iovÀn
;

237 *
	mmsg_c⁄åﬁ
;

238 
size_t
 
	mmsg_c⁄åﬁÀn
;

243 
	mmsg_Êags
;

247 
	scmsghdr


249 
size_t
 
	mcmsg_Àn
;

254 
	mcmsg_Àvñ
;

255 
	mcmsg_ty≥
;

256 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

257 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

262 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

263 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

265 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

267 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

268 
	#CMSG_FIRSTHDR
(
mhdr
) \

269 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

270 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

271 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

272 & (
size_t
Ë~( (size_tË- 1))

	)

273 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

274 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

275 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

277 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

278 
cmsghdr
 *
__cmsg
Ë
__THROW
;

279 #ifde‡
__USE_EXTERN_INLINES


280 #i‚de‡
_EXTERN_INLINE


281 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

283 
_EXTERN_INLINE
 
cmsghdr
 *

284 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

286 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

288  (
cmsghdr
 *) 0;

290 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

291 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

292 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


293 + 
__mhdr
->
msg_c⁄åﬁÀn
)

294 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

295 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

297  (
cmsghdr
 *) 0;

298  
__cmsg
;

299 
	}
}

306 
	mSCM_RIGHTS
 = 0x01

307 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

308 #ifde‡
__USE_GNU


309 , 
	mSCM_CREDENTIALS
 = 0x02

310 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

314 #ifde‡
__USE_GNU


316 
	su¸ed


318 
pid_t
 
	mpid
;

319 
uid_t
 
	muid
;

320 
gid_t
 
	mgid
;

325 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


326 #i‚de‡
FIOGETOWN


327 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

329 #i‚de‡
FIOSETOWN


330 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

332 #i‚de‡
SIOCATMARK


333 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

335 #i‚de‡
SIOCGPGRP


336 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

338 #i‚de‡
SIOCGSTAMP


339 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

341 #i‚de‡
SIOCGSTAMPNS


342 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

344 #i‚de‡
SIOCSPGRP


345 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

350 
	~<asm/sockë.h
>

352 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


353 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


355 #unde‡
FIOGETOWN


357 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


359 #unde‡
FIOSETOWN


361 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


363 #unde‡
SIOCATMARK


365 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


367 #unde‡
SIOCGPGRP


369 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


371 #unde‡
SIOCGSTAMP


373 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


375 #unde‡
SIOCGSTAMPNS


377 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


379 #unde‡
SIOCSPGRP


384 
	slögî


386 
	ml_⁄off
;

387 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 17

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_Âos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

36 
	#_IO_size_t
 
size_t


	)

37 
	#_IO_ssize_t
 
__ssize_t


	)

38 
	#_IO_off_t
 
__off_t


	)

39 
	#_IO_off64_t
 
__off64_t


	)

40 
	#_IO_pid_t
 
__pid_t


	)

41 
	#_IO_uid_t
 
__uid_t


	)

42 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

43 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 
	#_IO_va_li°
 
_G_va_li°


	)

46 
	#_IO_wöt_t
 
wöt_t


	)

49 
	#__√ed___va_li°


	)

50 
	~<°d¨g.h
>

51 #ifde‡
__GNUC_VA_LIST


52 #unde‡
_IO_va_li°


53 
	#_IO_va_li°
 
__gnuc_va_li°


	)

56 #i‚de‡
__P


57 
	~<sys/cdefs.h
>

60 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #i‚de‡
EOF


63 
	#EOF
 (-1)

	)

65 #i‚de‡
NULL


66 #i‡
deföed
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

68 
	#NULL
 (
__nuŒ
)

	)

70 #i‡!
deföed
(
__˝lu•lus
)

71 
	#NULL
 ((*)0)

	)

73 
	#NULL
 (0)

	)

78 
	#_IOS_INPUT
 1

	)

79 
	#_IOS_OUTPUT
 2

	)

80 
	#_IOS_ATEND
 4

	)

81 
	#_IOS_APPEND
 8

	)

82 
	#_IOS_TRUNC
 16

	)

83 
	#_IOS_NOCREATE
 32

	)

84 
	#_IOS_NOREPLACE
 64

	)

85 
	#_IOS_BIN
 128

	)

93 
	#_IO_MAGIC
 0xFBAD0000

	)

94 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 
	#_IO_USER_BUF
 1

	)

97 
	#_IO_UNBUFFERED
 2

	)

98 
	#_IO_NO_READS
 4

	)

99 
	#_IO_NO_WRITES
 8

	)

100 
	#_IO_EOF_SEEN
 0x10

	)

101 
	#_IO_ERR_SEEN
 0x20

	)

102 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 
	#_IO_LINKED
 0x80

	)

104 
	#_IO_IN_BACKUP
 0x100

	)

105 
	#_IO_LINE_BUF
 0x200

	)

106 
	#_IO_TIED_PUT_GET
 0x400

	)

107 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 
	#_IO_IS_APPENDING
 0x1000

	)

109 
	#_IO_IS_FILEBUF
 0x2000

	)

110 
	#_IO_BAD_SEEN
 0x4000

	)

111 
	#_IO_USER_LOCK
 0x8000

	)

113 
	#_IO_FLAGS2_MMAP
 1

	)

114 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifde‡
_LIBC


116 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifde‡
_LIBC


120 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

148 #ifde‡
_IO_MTSAFE_IO


149 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

150 
	~<bôs/°dio-lock.h
>

155 
	t_IO_lock_t
;

161 
	s_IO_m¨kî
 {

162 
_IO_m¨kî
 *
	m_√xt
;

163 
_IO_FILE
 *
	m_sbuf
;

167 
	m_pos
;

169 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

170 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

171 
	mpublic
:

172 
°ªamm¨kî
(
°ªambuf
 *
sb
);

173 ~
°ªamm¨kî
();

174 
ßvög
(Ë{  
	m_•os
 == -2; }

175 
dñè
(
°ªamm¨kî
&);

176 
dñè
();

181 
	e__codecvt_ªsu…


183 
	m__codecvt_ok
,

184 
	m__codecvt_∑πül
,

185 
	m__codecvt_îr‹
,

186 
	m__codecvt_noc⁄v


189 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


192 
	s_IO_codecvt


194 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

195 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

196 
	m__mb°©e_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 *,

199 c⁄° 
	mwch¨_t
 **, *,

201 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

202 
	m__mb°©e_t
 *, *,

204 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

205 
	m__mb°©e_t
 *,

207 c⁄° **, 
	mwch¨_t
 *,

208 
	mwch¨_t
 *, wchar_t **);

209 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

211 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

212 c⁄° *, c⁄° *, 
	m_IO_size_t
);

213 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

215 
_IO_ic⁄v_t
 
	m__cd_ö
;

216 
_IO_ic⁄v_t
 
	m__cd_out
;

220 
	s_IO_wide_d©a


222 
wch¨_t
 *
	m_IO_ªad_±r
;

223 
wch¨_t
 *
	m_IO_ªad_íd
;

224 
wch¨_t
 *
	m_IO_ªad_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_ba£
;

226 
wch¨_t
 *
	m_IO_wrôe_±r
;

227 
wch¨_t
 *
	m_IO_wrôe_íd
;

228 
wch¨_t
 *
	m_IO_buf_ba£
;

229 
wch¨_t
 *
	m_IO_buf_íd
;

231 
wch¨_t
 *
	m_IO_ßve_ba£
;

232 
wch¨_t
 *
	m_IO_backup_ba£
;

234 
wch¨_t
 *
	m_IO_ßve_íd
;

236 
__mb°©e_t
 
	m_IO_°©e
;

237 
__mb°©e_t
 
	m_IO_œ°_°©e
;

238 
_IO_codecvt
 
	m_codecvt
;

240 
wch¨_t
 
	m_sh‹tbuf
[1];

242 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

246 
	s_IO_FILE
 {

247 
	m_Êags
;

248 
	#_IO_fûe_Êags
 
_Êags


	)

252 * 
	m_IO_ªad_±r
;

253 * 
	m_IO_ªad_íd
;

254 * 
	m_IO_ªad_ba£
;

255 * 
	m_IO_wrôe_ba£
;

256 * 
	m_IO_wrôe_±r
;

257 * 
	m_IO_wrôe_íd
;

258 * 
	m_IO_buf_ba£
;

259 * 
	m_IO_buf_íd
;

261 *
	m_IO_ßve_ba£
;

262 *
	m_IO_backup_ba£
;

263 *
	m_IO_ßve_íd
;

265 
_IO_m¨kî
 *
	m_m¨kîs
;

267 
_IO_FILE
 *
	m_chaö
;

269 
	m_fûío
;

271 
	m_blksize
;

273 
	m_Êags2
;

275 
_IO_off_t
 
	m_ﬁd_off£t
;

277 
	#__HAVE_COLUMN


	)

279 
	m_cur_cﬁumn
;

280 sig√d 
	m_vèbÀ_off£t
;

281 
	m_sh‹tbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifde‡
_IO_USE_OLD_IO_FILE


289 
	s_IO_FILE_com∂ëe


291 
_IO_FILE
 
	m_fûe
;

293 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_off£t
;

295 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


297 
_IO_codecvt
 *
	m_codecvt
;

298 
_IO_wide_d©a
 *
	m_wide_d©a
;

299 
_IO_FILE
 *
	m_‰ìªs_li°
;

300 *
	m_‰ìªs_buf
;

301 
size_t
 
	m_‰ìªs_size
;

303 *
	m__∑d1
;

304 *
	m__∑d2
;

305 *
	m__∑d3
;

306 *
	m__∑d4
;

307 
size_t
 
	m__∑d5
;

309 
	m_mode
;

311 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

315 #i‚de‡
__˝lu•lus


316 
_IO_FILE
 
	t_IO_FILE
;

319 
	g_IO_FILE_∂us
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

323 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

324 #i‚de‡
_LIBC


325 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

326 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

327 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

329 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

331 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

339 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

347 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

359 
	t__io_˛o£_‚
 (*
	t__cookõ
);

362 #ifde‡
_GNU_SOURCE


364 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

365 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

366 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

367 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

372 
__io_ªad_‚
 *
	mªad
;

373 
__io_wrôe_‚
 *
	mwrôe
;

374 
__io_£ek_‚
 *
	m£ek
;

375 
__io_˛o£_‚
 *
	m˛o£
;

376 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

377 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

379 
	g_IO_cookõ_fûe
;

382 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

383 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

387 #ifde‡
__˝lu•lus


391 
__undîÊow
 (
_IO_FILE
 *);

392 
__uÊow
 (
_IO_FILE
 *);

393 
__ovîÊow
 (
_IO_FILE
 *, );

394 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


395 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

397 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

400 #i‡ 
__GNUC__
 >= 3

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

403 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

406 
	#_IO_gëc_u∆ocked
(
_Â
) \

407 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

408 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

409 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

410 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

411 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

413 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

415 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

416 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

418 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


419 
	#_IO_gëwc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

421 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

422 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

423 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

424 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

425 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

426 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

427 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

428 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

429 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

432 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

433 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

435 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

436 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

437 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

440 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

443 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

444 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

446 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

450 #ifde‡
_IO_MTSAFE_IO


451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

454 
	#_IO_fu∆ockfûe
(
_Â
) \

455 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

457 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

458 
	#_IO_Êockfûe
(
_Â
Ë

	)

459 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

460 
	#_IO_·rylockfûe
(
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

462 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

465 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

466 
_IO_va_li°
, *
__ª°ri˘
);

467 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

468 
_IO_va_li°
);

469 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

470 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

472 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

473 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

475 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

477 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


478 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

479 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

480 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

481 #i‡
__GNUC__
 >= 2

484 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


485 
	~<shlib-com∑t.h
>

486 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

488 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

489 c⁄° 
_IO_°dö_u£d
;

490 
wók_exã∫
 (
_IO_°dö_u£d
);

493 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


494 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

498 
	#_IO_fwide
(
__Â
, 
__mode
) \

499 ({ 
__ªsu…
 = (
__mode
); \

500 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

502 i‡((
__Â
)->
_mode
 == 0) \

504 (
__Â
)->
_mode
 = -1; \

505 
__ªsu…
 = (
__Â
)->
_mode
; \

507 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

508 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

510 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

511 
__ªsu…
; })

	)

514 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

515 
_IO_va_li°
, *
__ª°ri˘
);

516 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

517 
_IO_va_li°
);

518 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

519 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

522 #ifde‡
__LDBL_COMPAT


523 
	~<bôs/libio-ldbl.h
>

526 #ifde‡
__˝lu•lus


	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

156 
	mKERN_PANIC_ON_WARN
=77,

164 
	mVM_UNUSED1
=1,

165 
	mVM_UNUSED2
=2,

166 
	mVM_UNUSED3
=3,

167 
	mVM_UNUSED4
=4,

168 
	mVM_OVERCOMMIT_MEMORY
=5,

169 
	mVM_UNUSED5
=6,

170 
	mVM_UNUSED7
=7,

171 
	mVM_UNUSED8
=8,

172 
	mVM_UNUSED9
=9,

173 
	mVM_PAGE_CLUSTER
=10,

174 
	mVM_DIRTY_BACKGROUND
=11,

175 
	mVM_DIRTY_RATIO
=12,

176 
	mVM_DIRTY_WB_CS
=13,

177 
	mVM_DIRTY_EXPIRE_CS
=14,

178 
	mVM_NR_PDFLUSH_THREADS
=15,

179 
	mVM_OVERCOMMIT_RATIO
=16,

180 
	mVM_PAGEBUF
=17,

181 
	mVM_HUGETLB_PAGES
=18,

182 
	mVM_SWAPPINESS
=19,

183 
	mVM_LOWMEM_RESERVE_RATIO
=20,

184 
	mVM_MIN_FREE_KBYTES
=21,

185 
	mVM_MAX_MAP_COUNT
=22,

186 
	mVM_LAPTOP_MODE
=23,

187 
	mVM_BLOCK_DUMP
=24,

188 
	mVM_HUGETLB_GROUP
=25,

189 
	mVM_VFS_CACHE_PRESSURE
=26,

190 
	mVM_LEGACY_VA_LAYOUT
=27,

191 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

192 
	mVM_DROP_PAGECACHE
=29,

193 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

194 
	mVM_ZONE_RECLAIM_MODE
=31,

195 
	mVM_MIN_UNMAPPED
=32,

196 
	mVM_PANIC_ON_OOM
=33,

197 
	mVM_VDSO_ENABLED
=34,

198 
	mVM_MIN_SLAB
=35,

205 
	mNET_CORE
=1,

206 
	mNET_ETHER
=2,

207 
	mNET_802
=3,

208 
	mNET_UNIX
=4,

209 
	mNET_IPV4
=5,

210 
	mNET_IPX
=6,

211 
	mNET_ATALK
=7,

212 
	mNET_NETROM
=8,

213 
	mNET_AX25
=9,

214 
	mNET_BRIDGE
=10,

215 
	mNET_ROSE
=11,

216 
	mNET_IPV6
=12,

217 
	mNET_X25
=13,

218 
	mNET_TR
=14,

219 
	mNET_DECNET
=15,

220 
	mNET_ECONET
=16,

221 
	mNET_SCTP
=17,

222 
	mNET_LLC
=18,

223 
	mNET_NETFILTER
=19,

224 
	mNET_DCCP
=20,

225 
	mNET_IRDA
=412,

231 
	mRANDOM_POOLSIZE
=1,

232 
	mRANDOM_ENTROPY_COUNT
=2,

233 
	mRANDOM_READ_THRESH
=3,

234 
	mRANDOM_WRITE_THRESH
=4,

235 
	mRANDOM_BOOT_ID
=5,

236 
	mRANDOM_UUID
=6

242 
	mPTY_MAX
=1,

243 
	mPTY_NR
=2

249 
	mBUS_ISA_MEM_BASE
=1,

250 
	mBUS_ISA_PORT_BASE
=2,

251 
	mBUS_ISA_PORT_SHIFT
=3

257 
	mNET_CORE_WMEM_MAX
=1,

258 
	mNET_CORE_RMEM_MAX
=2,

259 
	mNET_CORE_WMEM_DEFAULT
=3,

260 
	mNET_CORE_RMEM_DEFAULT
=4,

262 
	mNET_CORE_MAX_BACKLOG
=6,

263 
	mNET_CORE_FASTROUTE
=7,

264 
	mNET_CORE_MSG_COST
=8,

265 
	mNET_CORE_MSG_BURST
=9,

266 
	mNET_CORE_OPTMEM_MAX
=10,

267 
	mNET_CORE_HOT_LIST_LENGTH
=11,

268 
	mNET_CORE_DIVERT_VERSION
=12,

269 
	mNET_CORE_NO_CONG_THRESH
=13,

270 
	mNET_CORE_NO_CONG
=14,

271 
	mNET_CORE_LO_CONG
=15,

272 
	mNET_CORE_MOD_CONG
=16,

273 
	mNET_CORE_DEV_WEIGHT
=17,

274 
	mNET_CORE_SOMAXCONN
=18,

275 
	mNET_CORE_BUDGET
=19,

276 
	mNET_CORE_AEVENT_ETIME
=20,

277 
	mNET_CORE_AEVENT_RSEQTH
=21,

278 
	mNET_CORE_WARNINGS
=22,

289 
	mNET_UNIX_DESTROY_DELAY
=1,

290 
	mNET_UNIX_DELETE_DELAY
=2,

291 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

297 
	mNET_NF_CONNTRACK_MAX
=1,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

305 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

307 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

308 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

309 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

310 
	mNET_NF_CONNTRACK_BUCKETS
=14,

311 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

312 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

313 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

314 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

315 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

322 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

323 
	mNET_NF_CONNTRACK_COUNT
=27,

324 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

325 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

326 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

327 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

328 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

335 
	mNET_IPV4_FORWARD
=8,

336 
	mNET_IPV4_DYNADDR
=9,

338 
	mNET_IPV4_CONF
=16,

339 
	mNET_IPV4_NEIGH
=17,

340 
	mNET_IPV4_ROUTE
=18,

341 
	mNET_IPV4_FIB_HASH
=19,

342 
	mNET_IPV4_NETFILTER
=20,

344 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

345 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

346 
	mNET_IPV4_TCP_SACK
=35,

347 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

348 
	mNET_IPV4_DEFAULT_TTL
=37,

349 
	mNET_IPV4_AUTOCONFIG
=38,

350 
	mNET_IPV4_NO_PMTU_DISC
=39,

351 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

352 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

353 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

354 
	mNET_IPV4_IPFRAG_TIME
=43,

355 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

356 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

357 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

358 
	mNET_IPV4_TCP_RETRIES1
=47,

359 
	mNET_IPV4_TCP_RETRIES2
=48,

360 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

361 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

362 
	mNET_TCP_SYNCOOKIES
=51,

363 
	mNET_TCP_STDURG
=52,

364 
	mNET_TCP_RFC1337
=53,

365 
	mNET_TCP_SYN_TAILDROP
=54,

366 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

367 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

369 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

370 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

371 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

372 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

373 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

374 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

375 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

376 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

377 
	mNET_TCP_TW_RECYCLE
=66,

378 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

379 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

380 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

381 
	mNET_IPV4_INET_PEER_MINTTL
=70,

382 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

383 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

384 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

385 
	mNET_TCP_ORPHAN_RETRIES
=74,

386 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

387 
	mNET_TCP_SYNACK_RETRIES
=76,

388 
	mNET_TCP_MAX_ORPHANS
=77,

389 
	mNET_TCP_MAX_TW_BUCKETS
=78,

390 
	mNET_TCP_FACK
=79,

391 
	mNET_TCP_REORDERING
=80,

392 
	mNET_TCP_ECN
=81,

393 
	mNET_TCP_DSACK
=82,

394 
	mNET_TCP_MEM
=83,

395 
	mNET_TCP_WMEM
=84,

396 
	mNET_TCP_RMEM
=85,

397 
	mNET_TCP_APP_WIN
=86,

398 
	mNET_TCP_ADV_WIN_SCALE
=87,

399 
	mNET_IPV4_NONLOCAL_BIND
=88,

400 
	mNET_IPV4_ICMP_RATELIMIT
=89,

401 
	mNET_IPV4_ICMP_RATEMASK
=90,

402 
	mNET_TCP_TW_REUSE
=91,

403 
	mNET_TCP_FRTO
=92,

404 
	mNET_TCP_LOW_LATENCY
=93,

405 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

406 
	mNET_IPV4_IGMP_MAX_MSF
=96,

407 
	mNET_TCP_NO_METRICS_SAVE
=97,

408 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

409 
	mNET_TCP_MODERATE_RCVBUF
=106,

410 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

411 
	mNET_TCP_BIC_BETA
=108,

412 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

413 
	mNET_TCP_CONG_CONTROL
=110,

414 
	mNET_TCP_ABC
=111,

415 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

416 
	mNET_TCP_MTU_PROBING
=113,

417 
	mNET_TCP_BASE_MSS
=114,

418 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

419 
	mNET_TCP_DMA_COPYBREAK
=116,

420 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

421 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

422 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

423 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

424 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

425 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

426 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

427 
	mNET_TCP_MAX_SSTHRESH
=124,

428 
	mNET_TCP_FRTO_RESPONSE
=125,

432 
	mNET_IPV4_ROUTE_FLUSH
=1,

433 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

434 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

435 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

436 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

437 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

438 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

439 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

440 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

441 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

442 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

443 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

444 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

445 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

446 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

447 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

448 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

449 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

450 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

455 
	mNET_PROTO_CONF_ALL
=-2,

456 
	mNET_PROTO_CONF_DEFAULT
=-3

463 
	mNET_IPV4_CONF_FORWARDING
=1,

464 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

465 
	mNET_IPV4_CONF_PROXY_ARP
=3,

466 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

467 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

468 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

469 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

470 
	mNET_IPV4_CONF_RP_FILTER
=8,

471 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

472 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

473 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

474 
	mNET_IPV4_CONF_TAG
=12,

475 
	mNET_IPV4_CONF_ARPFILTER
=13,

476 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

477 
	mNET_IPV4_CONF_NOXFRM
=15,

478 
	mNET_IPV4_CONF_NOPOLICY
=16,

479 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

480 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

481 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

482 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

483 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

484 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

490 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

498 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

500 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

501 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

502 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

503 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

504 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

508 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

515 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

516 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

517 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

522 
	mNET_IPV6_CONF
=16,

523 
	mNET_IPV6_NEIGH
=17,

524 
	mNET_IPV6_ROUTE
=18,

525 
	mNET_IPV6_ICMP
=19,

526 
	mNET_IPV6_BINDV6ONLY
=20,

527 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

528 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

529 
	mNET_IPV6_IP6FRAG_TIME
=23,

530 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

531 
	mNET_IPV6_MLD_MAX_MSF
=25,

535 
	mNET_IPV6_ROUTE_FLUSH
=1,

536 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

537 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

538 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

539 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

540 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

541 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

542 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

543 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

544 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

548 
	mNET_IPV6_FORWARDING
=1,

549 
	mNET_IPV6_HOP_LIMIT
=2,

550 
	mNET_IPV6_MTU
=3,

551 
	mNET_IPV6_ACCEPT_RA
=4,

552 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

553 
	mNET_IPV6_AUTOCONF
=6,

554 
	mNET_IPV6_DAD_TRANSMITS
=7,

555 
	mNET_IPV6_RTR_SOLICITS
=8,

556 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

557 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

558 
	mNET_IPV6_USE_TEMPADDR
=11,

559 
	mNET_IPV6_TEMP_VALID_LFT
=12,

560 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

561 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

562 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

563 
	mNET_IPV6_MAX_ADDRESSES
=16,

564 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

565 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

566 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

567 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

568 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

569 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

570 
	mNET_IPV6_PROXY_NDP
=23,

571 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

572 
	m__NET_IPV6_MAX


577 
	mNET_IPV6_ICMP_RATELIMIT
=1

582 
	mNET_NEIGH_MCAST_SOLICIT
=1,

583 
	mNET_NEIGH_UCAST_SOLICIT
=2,

584 
	mNET_NEIGH_APP_SOLICIT
=3,

585 
	mNET_NEIGH_RETRANS_TIME
=4,

586 
	mNET_NEIGH_REACHABLE_TIME
=5,

587 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

588 
	mNET_NEIGH_GC_STALE_TIME
=7,

589 
	mNET_NEIGH_UNRES_QLEN
=8,

590 
	mNET_NEIGH_PROXY_QLEN
=9,

591 
	mNET_NEIGH_ANYCAST_DELAY
=10,

592 
	mNET_NEIGH_PROXY_DELAY
=11,

593 
	mNET_NEIGH_LOCKTIME
=12,

594 
	mNET_NEIGH_GC_INTERVAL
=13,

595 
	mNET_NEIGH_GC_THRESH1
=14,

596 
	mNET_NEIGH_GC_THRESH2
=15,

597 
	mNET_NEIGH_GC_THRESH3
=16,

598 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

599 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

604 
	mNET_DCCP_DEFAULT
=1,

609 
	mNET_IPX_PPROP_BROADCASTING
=1,

610 
	mNET_IPX_FORWARDING
=2

615 
	mNET_LLC2
=1,

616 
	mNET_LLC_STATION
=2,

621 
	mNET_LLC2_TIMEOUT
=1,

626 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_ACK_TIMEOUT
=1,

632 
	mNET_LLC2_P_TIMEOUT
=2,

633 
	mNET_LLC2_REJ_TIMEOUT
=3,

634 
	mNET_LLC2_BUSY_TIMEOUT
=4,

639 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

640 
	mNET_ATALK_AARP_TICK_TIME
=2,

641 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

642 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

648 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

649 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

650 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

651 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

652 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

653 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

654 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

655 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

656 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

657 
	mNET_NETROM_ROUTING_CONTROL
=10,

658 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

659 
	mNET_NETROM_RESET
=12

664 
	mNET_AX25_IP_DEFAULT_MODE
=1,

665 
	mNET_AX25_DEFAULT_MODE
=2,

666 
	mNET_AX25_BACKOFF_TYPE
=3,

667 
	mNET_AX25_CONNECT_MODE
=4,

668 
	mNET_AX25_STANDARD_WINDOW
=5,

669 
	mNET_AX25_EXTENDED_WINDOW
=6,

670 
	mNET_AX25_T1_TIMEOUT
=7,

671 
	mNET_AX25_T2_TIMEOUT
=8,

672 
	mNET_AX25_T3_TIMEOUT
=9,

673 
	mNET_AX25_IDLE_TIMEOUT
=10,

674 
	mNET_AX25_N2
=11,

675 
	mNET_AX25_PACLEN
=12,

676 
	mNET_AX25_PROTOCOL
=13,

677 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

682 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

683 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

684 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

685 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

686 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

687 
	mNET_ROSE_ROUTING_CONTROL
=6,

688 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

689 
	mNET_ROSE_MAX_VCS
=8,

690 
	mNET_ROSE_WINDOW_SIZE
=9,

691 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

696 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

697 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

698 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

699 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

700 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

701 
	mNET_X25_FORWARD
=6

707 
	mNET_TR_RIF_TIMEOUT
=1

712 
	mNET_DECNET_NODE_TYPE
 = 1,

713 
	mNET_DECNET_NODE_ADDRESS
 = 2,

714 
	mNET_DECNET_NODE_NAME
 = 3,

715 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

716 
	mNET_DECNET_TIME_WAIT
 = 5,

717 
	mNET_DECNET_DN_COUNT
 = 6,

718 
	mNET_DECNET_DI_COUNT
 = 7,

719 
	mNET_DECNET_DR_COUNT
 = 8,

720 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

721 
	mNET_DECNET_CONF
 = 10,

722 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

723 
	mNET_DECNET_MEM
 = 12,

724 
	mNET_DECNET_RMEM
 = 13,

725 
	mNET_DECNET_WMEM
 = 14,

726 
	mNET_DECNET_DEBUG_LEVEL
 = 255

731 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

732 
	mNET_DECNET_CONF_DDCMP
 = -3,

733 
	mNET_DECNET_CONF_PPP
 = -4,

734 
	mNET_DECNET_CONF_X25
 = -5,

735 
	mNET_DECNET_CONF_GRE
 = -6,

736 
	mNET_DECNET_CONF_ETHER
 = -7

743 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

744 
	mNET_DECNET_CONF_DEV_T1
 = 2,

745 
	mNET_DECNET_CONF_DEV_T2
 = 3,

746 
	mNET_DECNET_CONF_DEV_T3
 = 4,

747 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

748 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

749 
	mNET_DECNET_CONF_DEV_STATE
 = 7

754 
	mNET_SCTP_RTO_INITIAL
 = 1,

755 
	mNET_SCTP_RTO_MIN
 = 2,

756 
	mNET_SCTP_RTO_MAX
 = 3,

757 
	mNET_SCTP_RTO_ALPHA
 = 4,

758 
	mNET_SCTP_RTO_BETA
 = 5,

759 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

760 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

761 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

762 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

763 
	mNET_SCTP_HB_INTERVAL
 = 10,

764 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

765 
	mNET_SCTP_MAX_BURST
 = 12,

766 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

767 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

768 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

769 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

770 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

775 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

776 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

777 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

778 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

779 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

784 
	mNET_IRDA_DISCOVERY
=1,

785 
	mNET_IRDA_DEVNAME
=2,

786 
	mNET_IRDA_DEBUG
=3,

787 
	mNET_IRDA_FAST_POLL
=4,

788 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

789 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

790 
	mNET_IRDA_SLOT_TIMEOUT
=7,

791 
	mNET_IRDA_MAX_BAUD_RATE
=8,

792 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

793 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

794 
	mNET_IRDA_MAX_TX_WINDOW
=11,

795 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

796 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

797 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

804 
	mFS_NRINODE
=1,

805 
	mFS_STATINODE
=2,

806 
	mFS_MAXINODE
=3,

807 
	mFS_NRDQUOT
=4,

808 
	mFS_MAXDQUOT
=5,

809 
	mFS_NRFILE
=6,

810 
	mFS_MAXFILE
=7,

811 
	mFS_DENTRY
=8,

812 
	mFS_NRSUPER
=9,

813 
	mFS_MAXSUPER
=10,

814 
	mFS_OVERFLOWUID
=11,

815 
	mFS_OVERFLOWGID
=12,

816 
	mFS_LEASES
=13,

817 
	mFS_DIR_NOTIFY
=14,

818 
	mFS_LEASE_TIME
=15,

819 
	mFS_DQSTATS
=16,

820 
	mFS_XFS
=17,

821 
	mFS_AIO_NR
=18,

822 
	mFS_AIO_MAX_NR
=19,

823 
	mFS_INOTIFY
=20,

824 
	mFS_OCFS2
=988,

829 
	mFS_DQ_LOOKUPS
 = 1,

830 
	mFS_DQ_DROPS
 = 2,

831 
	mFS_DQ_READS
 = 3,

832 
	mFS_DQ_WRITES
 = 4,

833 
	mFS_DQ_CACHE_HITS
 = 5,

834 
	mFS_DQ_ALLOCATED
 = 6,

835 
	mFS_DQ_FREE
 = 7,

836 
	mFS_DQ_SYNCS
 = 8,

837 
	mFS_DQ_WARNINGS
 = 9,

844 
	mDEV_CDROM
=1,

845 
	mDEV_HWMON
=2,

846 
	mDEV_PARPORT
=3,

847 
	mDEV_RAID
=4,

848 
	mDEV_MAC_HID
=5,

849 
	mDEV_SCSI
=6,

850 
	mDEV_IPMI
=7,

855 
	mDEV_CDROM_INFO
=1,

856 
	mDEV_CDROM_AUTOCLOSE
=2,

857 
	mDEV_CDROM_AUTOEJECT
=3,

858 
	mDEV_CDROM_DEBUG
=4,

859 
	mDEV_CDROM_LOCK
=5,

860 
	mDEV_CDROM_CHECK_MEDIA
=6

865 
	mDEV_PARPORT_DEFAULT
=-3

870 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

871 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

876 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

877 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

882 
	mDEV_PARPORT_SPINTIME
=1,

883 
	mDEV_PARPORT_BASE_ADDR
=2,

884 
	mDEV_PARPORT_IRQ
=3,

885 
	mDEV_PARPORT_DMA
=4,

886 
	mDEV_PARPORT_MODES
=5,

887 
	mDEV_PARPORT_DEVICES
=6,

888 
	mDEV_PARPORT_AUTOPROBE
=16

893 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

898 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

903 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

904 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

905 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

906 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

907 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

908 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

913 
	mDEV_SCSI_LOGGING_LEVEL
=1,

918 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

924 
	mABI_DEFHANDLER_COFF
=1,

925 
	mABI_DEFHANDLER_ELF
=2,

926 
	mABI_DEFHANDLER_LCALL7
=3,

927 
	mABI_DEFHANDLER_LIBCSO
=4,

928 
	mABI_TRACE
=5,

929 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/rpc/auth.h

38 #i‚de‡
_RPC_AUTH_H


40 
	#_RPC_AUTH_H
 1

	)

41 
	~<„©uªs.h
>

42 
	~<Ωc/xdr.h
>

44 
	g__BEGIN_DECLS


46 
	#MAX_AUTH_BYTES
 400

	)

47 
	#MAXNETNAMELEN
 255

	)

52 
	eauth_°©
 {

53 
	mAUTH_OK
=0,

57 
	mAUTH_BADCRED
=1,

58 
	mAUTH_REJECTEDCRED
=2,

59 
	mAUTH_BADVERF
=3,

60 
	mAUTH_REJECTEDVERF
=4,

61 
	mAUTH_TOOWEAK
=5,

65 
	mAUTH_INVALIDRESP
=6,

66 
	mAUTH_FAILED
=7

69 
	udes_block
 {

71 
u_öt32_t
 
	mhigh
;

72 
u_öt32_t
 
	mlow
;

73 } 
	mkey
;

74 
	mc
[8];

76 
des_block
 
	tdes_block
;

77 
boﬁ_t
 
	$xdr_des_block
 (
XDR
 *
__xdrs
, 
des_block
 *
__blkp
Ë
__THROW
;

82 
	s›aque_auth
 {

83 
íum_t
 
ﬂ_Êav‹
;

84 
ˇddr_t
 
ﬂ_ba£
;

85 
u_öt
 
ﬂ_Àngth
;

91 
AUTH
 
	tAUTH
;

92 
	sAUTH
 {

93 
›aque_auth
 
ah_¸ed
;

94 
›aque_auth
 
ah_vîf
;

95 
des_block
 
ah_key
;

96 
	sauth_›s
 {

97 (*
ah_√xtvîf
Ë(
AUTH
 *);

98 (*
ah_m¨shÆ
Ë(
AUTH
 *, 
XDR
 *);

99 (*
ah_vÆid©e
Ë(
AUTH
 *, 
›aque_auth
 *);

101 (*
ah_ª‰esh
Ë(
AUTH
 *);

102 (*
ah_de°roy
Ë(
AUTH
 *);

103 } *
ah_›s
;

104 
ˇddr_t
 
ah_¥iv©e
;

116 
	#AUTH_NEXTVERF
(
auth
) \

117 ((*((
auth
)->
ah_›s
->
ah_√xtvîf
))◊uth))

	)

118 
	#auth_√xtvîf
(
auth
) \

119 ((*((
auth
)->
ah_›s
->
ah_√xtvîf
))◊uth))

	)

121 
	#AUTH_MARSHALL
(
auth
, 
xdrs
) \

122 ((*((
auth
)->
ah_›s
->
ah_m¨shÆ
))◊uth, 
xdrs
))

	)

123 
	#auth_m¨shÆl
(
auth
, 
xdrs
) \

124 ((*((
auth
)->
ah_›s
->
ah_m¨shÆ
))◊uth, 
xdrs
))

	)

126 
	#AUTH_VALIDATE
(
auth
, 
vîÂ
) \

127 ((*((
auth
)->
ah_›s
->
ah_vÆid©e
))(◊uth), 
vîÂ
))

	)

128 
	#auth_vÆid©e
(
auth
, 
vîÂ
) \

129 ((*((
auth
)->
ah_›s
->
ah_vÆid©e
))(◊uth), 
vîÂ
))

	)

131 
	#AUTH_REFRESH
(
auth
) \

132 ((*((
auth
)->
ah_›s
->
ah_ª‰esh
))◊uth))

	)

133 
	#auth_ª‰esh
(
auth
) \

134 ((*((
auth
)->
ah_›s
->
ah_ª‰esh
))◊uth))

	)

136 
	#AUTH_DESTROY
(
auth
) \

137 ((*((
auth
)->
ah_›s
->
ah_de°roy
))◊uth))

	)

138 
	#auth_de°roy
(
auth
) \

139 ((*((
auth
)->
ah_›s
->
ah_de°roy
))◊uth))

	)

142 
›aque_auth
 
_nuŒ_auth
;

158 
AUTH
 *
	`authunix_¸óã
 (*
__mach«me
, 
__uid_t
 
__uid
, 
__gid_t
 
__gid
,

159 
__Àn
, 
__gid_t
 *
__aup_gids
);

160 
AUTH
 *
	`authunix_¸óã_deÁu…
 ();

161 
AUTH
 *
	$authn⁄e_¸óã
 (Ë
__THROW
;

162 
AUTH
 *
	$authdes_¸óã
 (c⁄° *
__£rvî«me
, 
u_öt
 
__wödow
,

163 
sockaddr
 *
__synˇddr
, 
des_block
 *
__ckey
)

164 
__THROW
;

165 
AUTH
 *
	$authdes_pk_¸óã
 (c⁄° *, 
√tobj
 *, 
u_öt
,

166 
sockaddr
 *, 
des_block
 *Ë
__THROW
;

169 
	#AUTH_NONE
 0

	)

170 
	#AUTH_NULL
 0

	)

171 
	#AUTH_SYS
 1

	)

172 
	#AUTH_UNIX
 
AUTH_SYS


	)

173 
	#AUTH_SHORT
 2

	)

174 
	#AUTH_DES
 3

	)

175 
	#AUTH_DH
 
AUTH_DES


	)

176 
	#AUTH_KERB
 4

	)

182 
	$gë√äame
 (*Ë
__THROW
;

183 
	$ho°2√äame
 (*, c⁄° *, c⁄° *Ë
__THROW
;

184 
	$u£r2√äame
 (*, c⁄° 
uid_t
, c⁄° *Ë
__THROW
;

185 
	$√äame2u£r
 (c⁄° *, 
uid_t
 *, 
gid_t
 *, *, gid_t *)

186 
__THROW
;

187 
	$√äame2ho°
 (c⁄° *, *, c⁄° Ë
__THROW
;

194 
	`key_de¸y±£ssi⁄
 (*, 
des_block
 *);

195 
	`key_de¸y±£ssi⁄_pk
 (*, 
√tobj
 *, 
des_block
 *);

196 
	`key_í¸y±£ssi⁄
 (*, 
des_block
 *);

197 
	`key_í¸y±£ssi⁄_pk
 (*, 
√tobj
 *, 
des_block
 *);

198 
	`key_gídes
 (
des_block
 *);

199 
	`key_£t£¸ë
 (*);

200 
	`key_£¸ëkey_is_£t
 ();

201 
	`key_gë_c⁄v
 (*, 
des_block
 *);

206 
boﬁ_t
 
	$xdr_›aque_auth
 (
XDR
 *, 
›aque_auth
 *Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/rpc/auth_des.h

18 #i‚de‡
_RPC_AUTH_DES_H


19 
	#_RPC_AUTH_DES_H
 1

	)

21 
	~<sys/cdefs.h
>

22 
	~<Ωc/auth.h
>

24 
__BEGIN_DECLS


27 
	eauthdes_«meköd


29 
	mADN_FULLNAME
,

30 
	mADN_NICKNAME


35 
	sauthdes_fuŒ«me


37 *
	m«me
;

38 
des_block
 
	mkey
;

39 
uöt32_t
 
	mwödow
;

43 
	sauthdes_¸ed


45 
authdes_«meköd
 
	madc_«meköd
;

46 
authdes_fuŒ«me
 
	madc_fuŒ«me
;

47 
uöt32_t
 
	madc_nick«me
;

51 
	sΩc_timevÆ


53 
uöt32_t
 
	mtv_£c
;

54 
uöt32_t
 
	mtv_u£c
;

58 
	sauthdes_vîf


62 
Ωc_timevÆ
 
	madv_˘ime
;

63 
des_block
 
	madv_xtime
;

65 
	madv_time_u
;

66 
uöt32_t
 
	madv_öt_u
;

74 
	#adv_time°amp
 
adv_time_u
.
adv_˘ime


	)

75 
	#adv_xtime°amp
 
adv_time_u
.
adv_xtime


	)

76 
	#adv_wövîf
 
adv_öt_u


	)

83 
	#adv_timevîf
 
adv_time_u
.
adv_˘ime


	)

84 
	#adv_xtimevîf
 
adv_time_u
.
adv_xtime


	)

85 
	#adv_nick«me
 
adv_öt_u


	)

88 
	$authdes_gëu¸ed
 (c⁄° 
authdes_¸ed
 * 
__adc
,

89 
uid_t
 * 
__uid
, 
gid_t
 * 
__gid
,

90 *
__grou∂í
, 
gid_t
 * 
__groups
Ë
__THROW
;

95 
	$gëpublickey
 (c⁄° *
__«me
, *
__key
Ë
__THROW
;

102 
	$gë£¸ëkey
 (c⁄° *
__«me
, *
__key
,

103 c⁄° *
__∑sswd
Ë
__THROW
;

105 
	$πime
 (
sockaddr_ö
 *
__addΩ
, 
Ωc_timevÆ
 *
__timï
,

106 
Ωc_timevÆ
 *
__timeout
Ë
__THROW
;

108 
__END_DECLS


	@/usr/include/rpc/auth_unix.h

41 #i‚de‡
_RPC_AUTH_UNIX_H


42 
	#_RPC_AUTH_UNIX_H
 1

	)

44 
	~<„©uªs.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<Ωc/ty≥s.h
>

47 
	~<Ωc/auth.h
>

48 
	~<Ωc/xdr.h
>

50 
	g__BEGIN_DECLS


53 
	#MAX_MACHINE_NAME
 255

	)

56 
	#NGRPS
 16

	)

61 
	sauthunix_∑rms


63 
u_l⁄g
 
	maup_time
;

64 *
	maup_mach«me
;

65 
__uid_t
 
	maup_uid
;

66 
__gid_t
 
	maup_gid
;

67 
u_öt
 
	maup_Àn
;

68 
__gid_t
 *
	maup_gids
;

71 
boﬁ_t
 
	$xdr_authunix_∑rms
 (
XDR
 *
__xdrs
, 
authunix_∑rms
 *
__p
)

72 
__THROW
;

79 
	ssh‹t_h™d_vîf


81 
›aque_auth
 
√w_¸ed
;

84 
__END_DECLS


	@/usr/include/rpc/clnt.h

34 #i‚de‡
_RPC_CLNT_H


35 
	#_RPC_CLNT_H
 1

	)

37 
	~<„©uªs.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<Ωc/ty≥s.h
>

40 
	~<Ωc/auth.h
>

41 
	~<sys/un.h
>

43 
__BEGIN_DECLS


50 
	e˛¡_°©
 {

51 
	mRPC_SUCCESS
=0,

55 
	mRPC_CANTENCODEARGS
=1,

56 
	mRPC_CANTDECODERES
=2,

57 
	mRPC_CANTSEND
=3,

58 
	mRPC_CANTRECV
=4,

59 
	mRPC_TIMEDOUT
=5,

63 
	mRPC_VERSMISMATCH
=6,

64 
	mRPC_AUTHERROR
=7,

65 
	mRPC_PROGUNAVAIL
=8,

66 
	mRPC_PROGVERSMISMATCH
=9,

67 
	mRPC_PROCUNAVAIL
=10,

68 
	mRPC_CANTDECODEARGS
=11,

69 
	mRPC_SYSTEMERROR
=12,

70 
	mRPC_NOBROADCAST
 = 21,

74 
	mRPC_UNKNOWNHOST
=13,

75 
	mRPC_UNKNOWNPROTO
=17,

76 
	mRPC_UNKNOWNADDR
 = 19,

81 
	mRPC_RPCBFAILURE
=14,

82 
	#RPC_PMAPFAILURE
 
RPC_RPCBFAILURE


	)

83 
	mRPC_PROGNOTREGISTERED
=15,

84 
	mRPC_N2AXLATEFAILURE
 = 22,

88 
	mRPC_FAILED
=16,

89 
	mRPC_INTR
=18,

90 
	mRPC_TLIERROR
=20,

91 
	mRPC_UDERROR
=23,

95 
	mRPC_INPROGRESS
 = 24,

96 
	mRPC_STALERACHANDLE
 = 25

103 
	sΩc_îr
 {

104 
˛¡_°©
 
	mª_°©us
;

106 
	mRE_î∫o
;

107 
auth_°©
 
	mRE_why
;

109 
u_l⁄g
 
	mlow
;

110 
u_l⁄g
 
	mhigh
;

111 } 
	mRE_vîs
;

113 
	ms1
;

114 
	ms2
;

115 } 
	mRE_lb
;

116 } 
	mru
;

117 
	#ª_î∫o
 
ru
.
RE_î∫o


	)

118 
	#ª_why
 
ru
.
RE_why


	)

119 
	#ª_vîs
 
ru
.
RE_vîs


	)

120 
	#ª_lb
 
ru
.
RE_lb


	)

129 
CLIENT
 
	tCLIENT
;

130 
	sCLIENT
 {

131 
AUTH
 *
	m˛_auth
;

132 
	s˛¡_›s
 {

133 
˛¡_°©
 (*
˛_ˇŒ
Ë(
	mCLIENT
 *, 
	mu_l⁄g
, 
	mxdΩroc_t
, 
	mˇddr_t
, xdrproc_t,

134 
	mˇddr_t
, 
	mtimevÆ
);

136 (*
	m˛_ab‹t
) ();

137 (*
	m˛_gëîr
Ë(
	mCLIENT
 *, 
	mΩc_îr
 *);

139 
boﬁ_t
 (*
˛_‰ìªs
Ë(
	mCLIENT
 *, 
	mxdΩroc_t
, 
	mˇddr_t
);

141 (*
	m˛_de°roy
Ë(
	mCLIENT
 *);

142 
boﬁ_t
 (*
˛_c⁄åﬁ
Ë(
	mCLIENT
 *, , *);

144 } *
	m˛_›s
;

145 
ˇddr_t
 
	m˛_¥iv©e
;

167 
	#CLNT_CALL
(
rh
, 
¥oc
, 
x¨gs
, 
¨g•
, 
xªs
, 
ª•
, 
£cs
) \

168 ((*(
rh
)->
˛_›s
->
˛_ˇŒ
)‘h, 
¥oc
, 
x¨gs
, 
¨g•
, 
xªs
, 
ª•
, 
£cs
))

	)

169 
	#˛¡_ˇŒ
(
rh
, 
¥oc
, 
x¨gs
, 
¨g•
, 
xªs
, 
ª•
, 
£cs
) \

170 ((*(
rh
)->
˛_›s
->
˛_ˇŒ
)‘h, 
¥oc
, 
x¨gs
, 
¨g•
, 
xªs
, 
ª•
, 
£cs
))

	)

177 
	#CLNT_ABORT
(
rh
Ë((*‘h)->
˛_›s
->
˛_ab‹t
)‘h))

	)

178 
	#˛¡_ab‹t
(
rh
Ë((*‘h)->
˛_›s
->
˛_ab‹t
)‘h))

	)

185 
	#CLNT_GETERR
(
rh
,
îΩ
Ë((*‘h)->
˛_›s
->
˛_gëîr
)‘h,Éºp))

	)

186 
	#˛¡_gëîr
(
rh
,
îΩ
Ë((*‘h)->
˛_›s
->
˛_gëîr
)‘h,Éºp))

	)

196 
	#CLNT_FREERES
(
rh
,
xªs
,
ª•
Ë((*‘h)->
˛_›s
->
˛_‰ìªs
)‘h,xªs,ª•))

	)

197 
	#˛¡_‰ìªs
(
rh
,
xªs
,
ª•
Ë((*‘h)->
˛_›s
->
˛_‰ìªs
)‘h,xªs,ª•))

	)

206 
	#CLNT_CONTROL
(
˛
,
rq
,
ö
Ë((*(˛)->
˛_›s
->
˛_c⁄åﬁ
)(˛,rq,ö))

	)

207 
	#˛¡_c⁄åﬁ
(
˛
,
rq
,
ö
Ë((*(˛)->
˛_›s
->
˛_c⁄åﬁ
)(˛,rq,ö))

	)

216 
	#CLSET_TIMEOUT
 1

	)

217 
	#CLGET_TIMEOUT
 2

	)

218 
	#CLGET_SERVER_ADDR
 3

	)

219 
	#CLGET_FD
 6

	)

220 
	#CLGET_SVC_ADDR
 7

	)

221 
	#CLSET_FD_CLOSE
 8

	)

222 
	#CLSET_FD_NCLOSE
 9

	)

223 
	#CLGET_XID
 10

	)

224 
	#CLSET_XID
 11

	)

225 
	#CLGET_VERS
 12

	)

226 
	#CLSET_VERS
 13

	)

227 
	#CLGET_PROG
 14

	)

228 
	#CLSET_PROG
 15

	)

229 
	#CLSET_SVC_ADDR
 16

	)

230 
	#CLSET_PUSH_TIMOD
 17

	)

231 
	#CLSET_POP_TIMOD
 18

	)

235 
	#CLSET_RETRY_TIMEOUT
 4

	)

236 
	#CLGET_RETRY_TIMEOUT
 5

	)

243 
	#CLNT_DESTROY
(
rh
Ë((*‘h)->
˛_›s
->
˛_de°roy
)‘h))

	)

244 
	#˛¡_de°roy
(
rh
Ë((*‘h)->
˛_›s
->
˛_de°roy
)‘h))

	)

253 
	#RPCTEST_PROGRAM
 ((
u_l⁄g
)1)

	)

254 
	#RPCTEST_VERSION
 ((
u_l⁄g
)1)

	)

255 
	#RPCTEST_NULL_PROC
 ((
u_l⁄g
)2)

	)

256 
	#RPCTEST_NULL_BATCH_PROC
 ((
u_l⁄g
)3)

	)

262 
	#NULLPROC
 ((
u_l⁄g
)0)

	)

277 
CLIENT
 *
	$˛¡øw_¸óã
 (c⁄° 
u_l⁄g
 
__¥og
, c⁄° u_l⁄g 
__vîs
)

278 
__THROW
;

291 
CLIENT
 *
	$˛¡_¸óã
 (c⁄° *
__ho°
, c⁄° 
u_l⁄g
 
__¥og
,

292 c⁄° 
u_l⁄g
 
__vîs
, c⁄° *
__¥Ÿ
)

293 
__THROW
;

307 
CLIENT
 *
	$˛¡t˝_¸óã
 (
sockaddr_ö
 *
__øddr
, 
u_l⁄g
 
__¥og
,

308 
u_l⁄g
 
__vîsi⁄
, *
__sockp
, 
u_öt
 
__£ndsz
,

309 
u_öt
 
__ªcvsz
Ë
__THROW
;

332 
CLIENT
 *
	$˛¡udp_¸óã
 (
sockaddr_ö
 *
__øddr
, 
u_l⁄g
 
__¥ogøm
,

333 
u_l⁄g
 
__vîsi⁄
, 
timevÆ
 
__waô_ª£nd
,

334 *
__sockp
Ë
__THROW
;

335 
CLIENT
 *
	$˛¡udp_buf¸óã
 (
sockaddr_ö
 *
__øddr
,

336 
u_l⁄g
 
__¥ogøm
, u_l⁄g 
__vîsi⁄
,

337 
timevÆ
 
__waô_ª£nd
, *
__sockp
,

338 
u_öt
 
__£ndsz
, u_öà
__ªcvsz
Ë
__THROW
;

354 
CLIENT
 *
	$˛¡unix_¸óã
 (
sockaddr_un
 *
__øddr
, 
u_l⁄g
 
__¥ogøm
,

355 
u_l⁄g
 
__vîsi⁄
, *
__sockp
,

356 
u_öt
 
__£ndsz
, u_öà
__ªcvsz
Ë
__THROW
;

359 
	$ˇŒΩc
 (c⁄° *
__ho°
, c⁄° 
u_l⁄g
 
__¥ognum
,

360 c⁄° 
u_l⁄g
 
__vî¢um
, c⁄° u_l⁄g 
__¥o˙um
,

361 c⁄° 
xdΩroc_t
 
__ö¥oc
, c⁄° *
__ö
,

362 c⁄° 
xdΩroc_t
 
__ouçroc
, *
__out
Ë
__THROW
;

363 
	$_Ωc_dèbÀsize
 (Ë
__THROW
;

368 
	`˛¡_p¸óãîr‹
 (c⁄° *
__msg
);

369 *
	$˛¡_•¸óãîr‹
(c⁄° *
__msg
Ë
__THROW
;

374 
	`˛¡_≥ºno
 (
˛¡_°©
 
__num
);

379 
	`˛¡_≥º‹
 (
CLIENT
 *
__˛¡
, c⁄° *
__msg
);

381 *
	$˛¡_•îr‹
 (
CLIENT
 *
__˛¡
, c⁄° *
__msg
Ë
__THROW
;

387 
	sΩc_¸óãîr
 {

388 
˛¡_°©
 
cf_°©
;

389 
Ωc_îr
 
cf_îr‹
;

392 
Ωc_¸óãîr
Ñpc_createerr;

399 *
	$˛¡_•î∫o
 (
˛¡_°©
 
__num
Ë
__THROW
;

404 
	$gëΩ˝‹t
 (c⁄° * 
__ho°
, 
u_l⁄g
 
__¥ognum
,

405 
u_l⁄g
 
__vî¢um
, 
u_öt
 
__¥Ÿo
Ë
__THROW
;

411 
	$gë_myaddªss
 (
sockaddr_ö
 *Ë
__THROW
;

413 
	#UDPMSGSIZE
 8800

	)

414 
	#RPCSMALLMSGSIZE
 400

	)

416 
__END_DECLS


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/rpc/rpc_msg.h

35 #i‚de‡
_RPC_MSG_H


36 
	#_RPC_MSG_H
 1

	)

38 
	~<sys/cdefs.h
>

40 
	~<Ωc/xdr.h
>

41 
	~<Ωc/˛¡.h
>

43 
	#RPC_MSG_VERSION
 ((
u_l⁄g
Ë2)

	)

44 
	#RPC_SERVICE_PORT
 ((
u_sh‹t
Ë2048)

	)

46 
__BEGIN_DECLS


54 
	emsg_ty≥
 {

55 
	mCALL
=0,

56 
	mREPLY
=1

59 
	eª∂y_°©
 {

60 
	mMSG_ACCEPTED
=0,

61 
	mMSG_DENIED
=1

64 
	eac˚±_°©
 {

65 
	mSUCCESS
=0,

66 
	mPROG_UNAVAIL
=1,

67 
	mPROG_MISMATCH
=2,

68 
	mPROC_UNAVAIL
=3,

69 
	mGARBAGE_ARGS
=4,

70 
	mSYSTEM_ERR
=5

73 
	eªje˘_°©
 {

74 
	mRPC_MISMATCH
=0,

75 
	mAUTH_ERROR
=1

87 
	sac˚±ed_ª∂y
 {

88 
›aque_auth
 
	m¨_vîf
;

89 
ac˚±_°©
 
	m¨_°©
;

92 
u_l⁄g
 
	mlow
;

93 
u_l⁄g
 
	mhigh
;

94 } 
	mAR_vîsi⁄s
;

96 
ˇddr_t
 
	mwhîe
;

97 
xdΩroc_t
 
	m¥oc
;

98 } 
	mAR_ªsu…s
;

100 } 
	mru
;

101 
	#¨_ªsu…s
 
ru
.
AR_ªsu…s


	)

102 
	#¨_vîs
 
ru
.
AR_vîsi⁄s


	)

108 
	sªje˘ed_ª∂y
 {

109 
ªje˘_°©
 
	mrj_°©
;

112 
u_l⁄g
 
	mlow
;

113 
u_l⁄g
 
	mhigh
;

114 } 
	mRJ_vîsi⁄s
;

115 
auth_°©
 
	mRJ_why
;

116 } 
	mru
;

117 
	#rj_vîs
 
ru
.
RJ_vîsi⁄s


	)

118 
	#rj_why
 
ru
.
RJ_why


	)

124 
	sª∂y_body
 {

125 
ª∂y_°©
 
	mΩ_°©
;

127 
ac˚±ed_ª∂y
 
	mRP_¨
;

128 
ªje˘ed_ª∂y
 
	mRP_dr
;

129 } 
	mru
;

130 
	#Ω_a˝t
 
ru
.
RP_¨


	)

131 
	#Ω_rj˘
 
ru
.
RP_dr


	)

137 
	sˇŒ_body
 {

138 
u_l⁄g
 
	mcb_Ωcvîs
;

139 
u_l⁄g
 
	mcb_¥og
;

140 
u_l⁄g
 
	mcb_vîs
;

141 
u_l⁄g
 
	mcb_¥oc
;

142 
›aque_auth
 
	mcb_¸ed
;

143 
›aque_auth
 
	mcb_vîf
;

149 
	sΩc_msg
 {

150 
u_l⁄g
 
	mrm_xid
;

151 
msg_ty≥
 
	mrm_dúe˘i⁄
;

153 
ˇŒ_body
 
	mRM_cmb
;

154 
ª∂y_body
 
	mRM_rmb
;

155 } 
	mru
;

156 
	#rm_ˇŒ
 
ru
.
RM_cmb


	)

157 
	#rm_ª∂y
 
ru
.
RM_rmb


	)

159 
	#a˝ãd_Ωly
 
ru
.
RM_rmb
.ru.
RP_¨


	)

160 
	#rj˘ed_Ωly
 
ru
.
RM_rmb
.ru.
RP_dr


	)

169 
boﬁ_t
 
	$xdr_ˇŒmsg
 (
XDR
 *
__xdrs
, 
Ωc_msg
 *
__cmsg
Ë
__THROW
;

177 
boﬁ_t
 
	$xdr_ˇŒhdr
 (
XDR
 *
__xdrs
, 
Ωc_msg
 *
__cmsg
Ë
__THROW
;

185 
boﬁ_t
 
	$xdr_ª∂ymsg
 (
XDR
 *
__xdrs
, 
Ωc_msg
 *
__rmsg
Ë
__THROW
;

193 
	$_£ãº_ª∂y
 (
Ωc_msg
 *
__msg
, 
Ωc_îr
 *
__îr‹
)

194 
__THROW
;

196 
__END_DECLS


	@/usr/include/rpc/svc.h

51 #i‚de‡
_RPC_SVC_H


52 
	#_RPC_SVC_H
 1

	)

54 
	~<„©uªs.h
>

55 
	~<Ωc/Ωc_msg.h
>

57 
__BEGIN_DECLS


81 
	ex¥t_°©
 {

82 
	mXPRT_DIED
,

83 
	mXPRT_MOREREQS
,

84 
	mXPRT_IDLE


90 
SVCXPRT
 
	tSVCXPRT
;

91 
	sSVCXPRT
 {

92 
	mxp_sock
;

93 
u_sh‹t
 
	mxp_p‹t
;

94 c⁄° 
	sxp_›s
 {

95 
boﬁ_t
 (*
xp_ªcv
Ë(
SVCXPRT
 *
	m__x¥t
, 
Ωc_msg
 *
	m__msg
);

97 
x¥t_°©
 (*
xp_°©
Ë(
SVCXPRT
 *
	m__x¥t
);

99 
boﬁ_t
 (*
xp_gë¨gs
Ë(
SVCXPRT
 *
	m__x¥t
, 
xdΩroc_t
 
	m__xdr_¨gs
,

100 
ˇddr_t
 
	m__¨gs_±r
);

101 
boﬁ_t
 (*
xp_ª∂y
Ë(
SVCXPRT
 *
	m__x¥t
, 
Ωc_msg
 *
	m__msg
);

103 
boﬁ_t
 (*
xp_‰ì¨gs
Ë(
SVCXPRT
 *
	m__x¥t
, 
xdΩroc_t
 
	m__xdr_¨gs
,

104 
ˇddr_t
 
	m__¨gs_±r
);

106 (*
	mxp_de°roy
Ë(
SVCXPRT
 *
	m__x¥t
);

108 } *
	mxp_›s
;

109 
	mxp_addæí
;

110 
sockaddr_ö
 
	mxp_øddr
;

111 
›aque_auth
 
	mxp_vîf
;

112 
ˇddr_t
 
	mxp_p1
;

113 
ˇddr_t
 
	mxp_p2
;

114 
	mxp_∑d
 [256];

120 
	#svc_gëˇŒî
(
x
Ë(&(x)->
xp_øddr
)

	)

130 
	#SVC_RECV
(
x¥t
, 
msg
) \

131 (*(
x¥t
)->
xp_›s
->
xp_ªcv
)((x¥t), (
msg
))

	)

132 
	#svc_ªcv
(
x¥t
, 
msg
) \

133 (*(
x¥t
)->
xp_›s
->
xp_ªcv
)((x¥t), (
msg
))

	)

135 
	#SVC_STAT
(
x¥t
) \

136 (*(
x¥t
)->
xp_›s
->
xp_°©
)(x¥t)

	)

137 
	#svc_°©
(
x¥t
) \

138 (*(
x¥t
)->
xp_›s
->
xp_°©
)(x¥t)

	)

140 
	#SVC_GETARGS
(
x¥t
, 
x¨gs
, 
¨g•
) \

141 (*(
x¥t
)->
xp_›s
->
xp_gë¨gs
)((x¥t), (
x¨gs
), (
¨g•
))

	)

142 
	#svc_gë¨gs
(
x¥t
, 
x¨gs
, 
¨g•
) \

143 (*(
x¥t
)->
xp_›s
->
xp_gë¨gs
)((x¥t), (
x¨gs
), (
¨g•
))

	)

145 
	#SVC_REPLY
(
x¥t
, 
msg
) \

146 (*(
x¥t
)->
xp_›s
->
xp_ª∂y
Ë((x¥t), (
msg
))

	)

147 
	#svc_ª∂y
(
x¥t
, 
msg
) \

148 (*(
x¥t
)->
xp_›s
->
xp_ª∂y
Ë((x¥t), (
msg
))

	)

150 
	#SVC_FREEARGS
(
x¥t
, 
x¨gs
, 
¨g•
) \

151 (*(
x¥t
)->
xp_›s
->
xp_‰ì¨gs
)((x¥t), (
x¨gs
), (
¨g•
))

	)

152 
	#svc_‰ì¨gs
(
x¥t
, 
x¨gs
, 
¨g•
) \

153 (*(
x¥t
)->
xp_›s
->
xp_‰ì¨gs
)((x¥t), (
x¨gs
), (
¨g•
))

	)

155 
	#SVC_DESTROY
(
x¥t
) \

156 (*(
x¥t
)->
xp_›s
->
xp_de°roy
)(x¥t)

	)

157 
	#svc_de°roy
(
x¥t
) \

158 (*(
x¥t
)->
xp_›s
->
xp_de°roy
)(x¥t)

	)

164 
	ssvc_ªq
 {

165 
Ω˝rog_t
 
	mrq_¥og
;

166 
Ωcvîs_t
 
	mrq_vîs
;

167 
Ω˝roc_t
 
	mrq_¥oc
;

168 
›aque_auth
 
	mrq_¸ed
;

169 
ˇddr_t
 
	mrq_˛¡¸ed
;

170 
SVCXPRT
 *
	mrq_x¥t
;

173 #i‚de‡
__DISPATCH_FN_T


174 
	#__DISPATCH_FN_T


	)

175 (*
	t__di•©ch_‚_t
Ë(
	tsvc_ªq
*, 
	tSVCXPRT
*);

188 
boﬁ_t
 
	$svc_ªgi°î
 (
SVCXPRT
 *
__x¥t
, 
Ω˝rog_t
 
__¥og
,

189 
Ωcvîs_t
 
__vîs
, 
__di•©ch_‚_t
 
__di•©ch
,

190 
Ω˝rŸ_t
 
__¥Ÿocﬁ
Ë
__THROW
;

199 
	$svc_uƒegi°î
 (
Ω˝rog_t
 
__¥og
, 
Ωcvîs_t
 
__vîs
Ë
__THROW
;

207 
	$x¥t_ªgi°î
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

215 
	$x¥t_uƒegi°î
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

244 
boﬁ_t
 
	$svc_£ndª∂y
 (
SVCXPRT
 *
__x¥t
, 
xdΩroc_t
 
__xdr_ªsu…s
,

245 
ˇddr_t
 
__xdr_loˇti⁄
Ë
__THROW
;

247 
	$sv˚º_decode
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

249 
	$sv˚º_wókauth
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

251 
	$sv˚º_n›roc
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

253 
	$sv˚º_¥ogvîs
 (
SVCXPRT
 *
__x¥t
, 
Ωcvîs_t
 
__low_vîs
,

254 
Ωcvîs_t
 
__high_vîs
Ë
__THROW
;

256 
	$sv˚º_auth
 (
SVCXPRT
 *
__x¥t
, 
auth_°©
 
__why
Ë
__THROW
;

258 
	$sv˚º_n›rog
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

260 
	$sv˚º_sy°emîr
 (
SVCXPRT
 *
__x¥t
Ë
__THROW
;

278 
pﬁlfd
 *
svc_pﬁlfd
;

279 
svc_max_pﬁlfd
;

280 
fd_£t
 
svc_fd£t
;

281 
	#svc_fds
 
svc_fd£t
.
fds_bôs
[0]

	)

287 
	$svc_gëªq
 (
__rdfds
Ë
__THROW
;

288 
	$svc_gëªq_comm⁄
 (c⁄° 
__fd
Ë
__THROW
;

289 
	$svc_gëªq£t
 (
fd_£t
 *
__ªadfds
Ë
__THROW
;

290 
	$svc_gëªq_pﬁl
 (
pﬁlfd
 *, c⁄° Ë
__THROW
;

291 
	$svc_exô
 (Ë
__THROW
;

292 
	$svc_run
 (Ë
__THROW
;

297 
	#RPC_ANYSOCK
 -1

	)

306 
SVCXPRT
 *
	$sv¸aw_¸óã
 (Ë
__THROW
;

311 
SVCXPRT
 *
	$svcudp_¸óã
 (
__sock
Ë
__THROW
;

312 
SVCXPRT
 *
	$svcudp_buf¸óã
 (
__sock
, 
u_öt
 
__£ndsz
, u_öà
__ªcvsz
)

313 
__THROW
;

318 
SVCXPRT
 *
	$sv˘˝_¸óã
 (
__sock
, 
u_öt
 
__£ndsize
, u_öà
__ªcvsize
)

319 
__THROW
;

324 
SVCXPRT
 *
	$svcfd_¸óã
 (
__sock
, 
u_öt
 
__£ndsize
, u_öà
__ªcvsize
)

325 
__THROW
;

330 
SVCXPRT
 *
	$svcunix_¸óã
 (
__sock
, 
u_öt
 
__£ndsize
, u_öà
__ªcvsize
,

331 *
__∑th
Ë
__THROW
;

334 
__END_DECLS


	@/usr/include/rpc/svc_auth.h

34 #i‚de‡
_RPC_SVC_AUTH_H


35 
	#_RPC_SVC_AUTH_H
 1

	)

37 
	~<„©uªs.h
>

38 
	~<Ωc/svc.h
>

40 
__BEGIN_DECLS


45 
auth_°©
 
	$_authítiˇã
 (
svc_ªq
 *
__rq°
,

46 
Ωc_msg
 *
__msg
Ë
__THROW
;

48 
__END_DECLS


	@/usr/include/rpc/types.h

34 #i‚de‡
_RPC_TYPES_H


35 
	#_RPC_TYPES_H
 1

	)

37 
	tboﬁ_t
;

38 
	tíum_t
;

40 
	tΩ˝rog_t
;

41 
	tΩcvîs_t
;

42 
	tΩ˝roc_t
;

43 
	tΩ˝rŸ_t
;

44 
	tΩ˝‹t_t
;

46 
	#__d⁄tˇª__
 -1

	)

48 #i‚de‡
FALSE


49 
	#FALSE
 (0)

	)

52 #i‚de‡
TRUE


53 
	#TRUE
 (1)

	)

56 #i‚de‡
NULL


57 
	#NULL
 0

	)

60 
	~<°dlib.h
>

61 
	#mem_Æloc
(
bsize
Ë
	`mÆloc
(bsize)

	)

66 
	#mem_‰ì
(
±r
, 
bsize
Ë
	`‰ì
’å)

	)

68 #i‚de‡
makedev


69 
	~<sys/ty≥s.h
>

72 #i‚de‡
__u_ch¨_deföed


73 
__u_ch¨
 
	tu_ch¨
;

74 
__u_sh‹t
 
	tu_sh‹t
;

75 
__u_öt
 
	tu_öt
;

76 
__u_l⁄g
 
	tu_l⁄g
;

77 
__quad_t
 
	tquad_t
;

78 
__u_quad_t
 
	tu_quad_t
;

79 
__fsid_t
 
	tfsid_t
;

80 
	#__u_ch¨_deföed


	)

82 #i‚de‡
__daddr_t_deföed


83 
__daddr_t
 
	tdaddr_t
;

84 
__ˇddr_t
 
	tˇddr_t
;

85 
	#__daddr_t_deföed


	)

88 
	~<sys/time.h
>

89 
	~<sys/∑øm.h
>

91 
	~<√töë/ö.h
>

93 #i‚de‡
INADDR_LOOPBACK


94 
	#INADDR_LOOPBACK
 (
u_l⁄g
)0x7F000001

	)

96 #i‚de‡
MAXHOSTNAMELEN


97 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/rpc/xdr.h

34 #i‚de‡
_RPC_XDR_H


35 
	#_RPC_XDR_H
 1

	)

37 
	~<„©uªs.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<Ωc/ty≥s.h
>

42 
	~<°dio.h
>

44 
__BEGIN_DECLS


81 
	exdr_›
 {

82 
	mXDR_ENCODE
 = 0,

83 
	mXDR_DECODE
 = 1,

84 
	mXDR_FREE
 = 2

90 
	#BYTES_PER_XDR_UNIT
 (4)

	)

97 
	#RNDUP
(
x
Ë(((xË+ 
BYTES_PER_XDR_UNIT
 - 1Ë& ~(BYTES_PER_XDR_UNIT - 1))

	)

99 
	#RNDUP
(
x
Ë((((xË+ 
BYTES_PER_XDR_UNIT
 - 1) / BYTES_PER_XDR_UNIT) \

100 * 
BYTES_PER_XDR_UNIT
)

	)

109 
XDR
 
	tXDR
;

110 
	sXDR


112 
xdr_›
 
	mx_›
;

113 
	sxdr_›s


115 
boﬁ_t
 (*
x_gël⁄g
Ë(
XDR
 *
	m__xdrs
, *
	m__Õ
);

117 
boﬁ_t
 (*
x_pué⁄g
Ë(
XDR
 *
	m__xdrs
, c⁄° *
	m__Õ
);

119 
boﬁ_t
 (*
x_gëbyãs
Ë(
XDR
 *
	m__xdrs
, 
ˇddr_t
 
	m__addr
, 
u_öt
 
	m__Àn
);

121 
boﬁ_t
 (*
x_putbyãs
Ë(
XDR
 *
	m__xdrs
, c⁄° *
	m__addr
, 
u_öt
 
	m__Àn
);

123 
u_öt
 (*
x_gëpo°n
Ë(c⁄° 
XDR
 *
	m__xdrs
);

125 
boﬁ_t
 (*
x_£ço°n
Ë(
XDR
 *
	m__xdrs
, 
u_öt
 
	m__pos
);

127 
	möt32_t
 *(*
	mx_ölöe
Ë(
XDR
 *
	m__xdrs
, 
u_öt
 
	m__Àn
);

129 (*
	mx_de°roy
Ë(
XDR
 *
	m__xdrs
);

131 
boﬁ_t
 (*
x_gëöt32
Ë(
XDR
 *
	m__xdrs
, 
öt32_t
 *
	m__ù
);

133 
boﬁ_t
 (*
x_putöt32
Ë(
XDR
 *
	m__xdrs
, c⁄° 
öt32_t
 *
	m__ù
);

136 *
	mx_›s
;

137 
ˇddr_t
 
	mx_public
;

138 
ˇddr_t
 
	mx_¥iv©e
;

139 
ˇddr_t
 
	mx_ba£
;

140 
u_öt
 
	mx_h™dy
;

152 
	$boﬁ_t
 (*
	txdΩroc_t
Ë(
	tXDR
 *, *,...);

165 
	#XDR_GETINT32
(
xdrs
, 
öt32p
) \

166 (*(
xdrs
)->
x_›s
->
x_gëöt32
)(xdrs, 
öt32p
)

	)

167 
	#xdr_gëöt32
(
xdrs
, 
öt32p
) \

168 (*(
xdrs
)->
x_›s
->
x_gëöt32
)(xdrs, 
öt32p
)

	)

170 
	#XDR_PUTINT32
(
xdrs
, 
öt32p
) \

171 (*(
xdrs
)->
x_›s
->
x_putöt32
)(xdrs, 
öt32p
)

	)

172 
	#xdr_putöt32
(
xdrs
, 
öt32p
) \

173 (*(
xdrs
)->
x_›s
->
x_putöt32
)(xdrs, 
öt32p
)

	)

175 
	#XDR_GETLONG
(
xdrs
, 
l⁄gp
) \

176 (*(
xdrs
)->
x_›s
->
x_gël⁄g
)(xdrs, 
l⁄gp
)

	)

177 
	#xdr_gël⁄g
(
xdrs
, 
l⁄gp
) \

178 (*(
xdrs
)->
x_›s
->
x_gël⁄g
)(xdrs, 
l⁄gp
)

	)

180 
	#XDR_PUTLONG
(
xdrs
, 
l⁄gp
) \

181 (*(
xdrs
)->
x_›s
->
x_pué⁄g
)(xdrs, 
l⁄gp
)

	)

182 
	#xdr_pué⁄g
(
xdrs
, 
l⁄gp
) \

183 (*(
xdrs
)->
x_›s
->
x_pué⁄g
)(xdrs, 
l⁄gp
)

	)

185 
	#XDR_GETBYTES
(
xdrs
, 
addr
, 
Àn
) \

186 (*(
xdrs
)->
x_›s
->
x_gëbyãs
)(xdrs, 
addr
, 
Àn
)

	)

187 
	#xdr_gëbyãs
(
xdrs
, 
addr
, 
Àn
) \

188 (*(
xdrs
)->
x_›s
->
x_gëbyãs
)(xdrs, 
addr
, 
Àn
)

	)

190 
	#XDR_PUTBYTES
(
xdrs
, 
addr
, 
Àn
) \

191 (*(
xdrs
)->
x_›s
->
x_putbyãs
)(xdrs, 
addr
, 
Àn
)

	)

192 
	#xdr_putbyãs
(
xdrs
, 
addr
, 
Àn
) \

193 (*(
xdrs
)->
x_›s
->
x_putbyãs
)(xdrs, 
addr
, 
Àn
)

	)

195 
	#XDR_GETPOS
(
xdrs
) \

196 (*(
xdrs
)->
x_›s
->
x_gëpo°n
)(xdrs)

	)

197 
	#xdr_gëpos
(
xdrs
) \

198 (*(
xdrs
)->
x_›s
->
x_gëpo°n
)(xdrs)

	)

200 
	#XDR_SETPOS
(
xdrs
, 
pos
) \

201 (*(
xdrs
)->
x_›s
->
x_£ço°n
)(xdrs, 
pos
)

	)

202 
	#xdr_£ços
(
xdrs
, 
pos
) \

203 (*(
xdrs
)->
x_›s
->
x_£ço°n
)(xdrs, 
pos
)

	)

205 
	#XDR_INLINE
(
xdrs
, 
Àn
) \

206 (*(
xdrs
)->
x_›s
->
x_ölöe
)(xdrs, 
Àn
)

	)

207 
	#xdr_ölöe
(
xdrs
, 
Àn
) \

208 (*(
xdrs
)->
x_›s
->
x_ölöe
)(xdrs, 
Àn
)

	)

210 
	#XDR_DESTROY
(
xdrs
) \

212 i‡((
xdrs
)->
x_›s
->
x_de°roy
) \

213 (*(
xdrs
)->
x_›s
->
x_de°roy
)(xdrs); \

214 
	}
} 0)

	)

215 
	#xdr_de°roy
(
xdrs
) \

217 i‡((
xdrs
)->
x_›s
->
x_de°roy
) \

218 (*(
xdrs
)->
x_›s
->
x_de°roy
)(xdrs); \

219 } 0)

	)

231 
	#NULL_xdΩroc_t
 ((
xdΩroc_t
)0)

	)

232 
	sxdr_dis¸im


234 
	mvÆue
;

235 
xdΩroc_t
 
	m¥oc
;

254 
	#IXDR_GET_INT32
(
buf
Ë((
öt32_t
)
	`¡ohl
((
uöt32_t
)*(buf)++))

	)

255 
	#IXDR_PUT_INT32
(
buf
, 
v
Ë(*(buf)++ = (
öt32_t
)
	`ht⁄l
((
uöt32_t
)(v)))

	)

256 
	#IXDR_GET_U_INT32
(
buf
Ë((
uöt32_t
)
	`IXDR_GET_INT32
(buf))

	)

257 
	#IXDR_PUT_U_INT32
(
buf
, 
v
Ë
	`IXDR_PUT_INT32
(buf, (
öt32_t
)(v))

	)

263 
	#IXDR_GET_LONG
(
buf
Ë(()
	`IXDR_GET_U_INT32
(buf))

	)

264 
	#IXDR_PUT_LONG
(
buf
, 
v
Ë(()
	`IXDR_PUT_INT32
(buf, ()(v)))

	)

265 
	#IXDR_GET_U_LONG
(
buf
Ë((
u_l⁄g
)
	`IXDR_GET_LONG
(buf))

	)

266 
	#IXDR_PUT_U_LONG
(
buf
, 
v
Ë
	`IXDR_PUT_LONG
(buf, ()(v))

	)

269 
	#IXDR_GET_BOOL
(
buf
Ë((
boﬁ_t
)
	`IXDR_GET_LONG
(buf))

	)

270 
	#IXDR_GET_ENUM
(
buf
, 
t
Ë(—)
	`IXDR_GET_LONG
(buf))

	)

271 
	#IXDR_GET_SHORT
(
buf
Ë(()
	`IXDR_GET_LONG
(buf))

	)

272 
	#IXDR_GET_U_SHORT
(
buf
Ë((
u_sh‹t
)
	`IXDR_GET_LONG
(buf))

	)

274 
	#IXDR_PUT_BOOL
(
buf
, 
v
Ë
	`IXDR_PUT_LONG
(buf, ()(v))

	)

275 
	#IXDR_PUT_ENUM
(
buf
, 
v
Ë
	`IXDR_PUT_LONG
(buf, ()(v))

	)

276 
	#IXDR_PUT_SHORT
(
buf
, 
v
Ë
	`IXDR_PUT_LONG
(buf, ()(v))

	)

277 
	#IXDR_PUT_U_SHORT
(
buf
, 
v
Ë
	`IXDR_PUT_LONG
(buf, ()(v))

	)

285 
boﬁ_t
 
	$xdr_void
 (Ë
__THROW
;

286 
boﬁ_t
 
	$xdr_sh‹t
 (
XDR
 *
__xdrs
, *
__•
Ë
__THROW
;

287 
boﬁ_t
 
	$xdr_u_sh‹t
 (
XDR
 *
__xdrs
, 
u_sh‹t
 *
__u•
Ë
__THROW
;

288 
boﬁ_t
 
	$xdr_öt
 (
XDR
 *
__xdrs
, *
__ù
Ë
__THROW
;

289 
boﬁ_t
 
	$xdr_u_öt
 (
XDR
 *
__xdrs
, 
u_öt
 *
__up
Ë
__THROW
;

290 
boﬁ_t
 
	$xdr_l⁄g
 (
XDR
 *
__xdrs
, *
__Õ
Ë
__THROW
;

291 
boﬁ_t
 
	$xdr_u_l⁄g
 (
XDR
 *
__xdrs
, 
u_l⁄g
 *
__uÕ
Ë
__THROW
;

292 
boﬁ_t
 
	$xdr_hy≥r
 (
XDR
 *
__xdrs
, 
quad_t
 *
__Œp
Ë
__THROW
;

293 
boﬁ_t
 
	$xdr_u_hy≥r
 (
XDR
 *
__xdrs
, 
u_quad_t
 *
__uŒp
Ë
__THROW
;

294 
boﬁ_t
 
	$xdr_l⁄gl⁄g_t
 (
XDR
 *
__xdrs
, 
quad_t
 *
__Œp
Ë
__THROW
;

295 
boﬁ_t
 
	$xdr_u_l⁄gl⁄g_t
 (
XDR
 *
__xdrs
, 
u_quad_t
 *
__uŒp
Ë
__THROW
;

296 
boﬁ_t
 
	$xdr_öt8_t
 (
XDR
 *
__xdrs
, 
öt8_t
 *
__ù
Ë
__THROW
;

297 
boﬁ_t
 
	$xdr_uöt8_t
 (
XDR
 *
__xdrs
, 
uöt8_t
 *
__up
Ë
__THROW
;

298 
boﬁ_t
 
	$xdr_öt16_t
 (
XDR
 *
__xdrs
, 
öt16_t
 *
__ù
Ë
__THROW
;

299 
boﬁ_t
 
	$xdr_uöt16_t
 (
XDR
 *
__xdrs
, 
uöt16_t
 *
__up
Ë
__THROW
;

300 
boﬁ_t
 
	$xdr_öt32_t
 (
XDR
 *
__xdrs
, 
öt32_t
 *
__ù
Ë
__THROW
;

301 
boﬁ_t
 
	$xdr_uöt32_t
 (
XDR
 *
__xdrs
, 
uöt32_t
 *
__up
Ë
__THROW
;

302 
boﬁ_t
 
	$xdr_öt64_t
 (
XDR
 *
__xdrs
, 
öt64_t
 *
__ù
Ë
__THROW
;

303 
boﬁ_t
 
	$xdr_uöt64_t
 (
XDR
 *
__xdrs
, 
uöt64_t
 *
__up
Ë
__THROW
;

304 
boﬁ_t
 
	$xdr_quad_t
 (
XDR
 *
__xdrs
, 
quad_t
 *
__ù
Ë
__THROW
;

305 
boﬁ_t
 
	$xdr_u_quad_t
 (
XDR
 *
__xdrs
, 
u_quad_t
 *
__up
Ë
__THROW
;

306 
boﬁ_t
 
	$xdr_boﬁ
 (
XDR
 *
__xdrs
, 
boﬁ_t
 *
__bp
Ë
__THROW
;

307 
boﬁ_t
 
	$xdr_íum
 (
XDR
 *
__xdrs
, 
íum_t
 *
__ï
Ë
__THROW
;

308 
boﬁ_t
 
	$xdr_¨øy
 (
XDR
 * 
_xdrs
, 
ˇddr_t
 *
__addΩ
, 
u_öt
 *
__sizï
,

309 
u_öt
 
__maxsize
, u_öà
__ñsize
, 
xdΩroc_t
 
__ñ¥oc
)

310 
__THROW
;

311 
boﬁ_t
 
	$xdr_byãs
 (
XDR
 *
__xdrs
, **
__˝p
, 
u_öt
 *
__sizï
,

312 
u_öt
 
__maxsize
Ë
__THROW
;

313 
boﬁ_t
 
	$xdr_›aque
 (
XDR
 *
__xdrs
, 
ˇddr_t
 
__˝
, 
u_öt
 
__˙t
Ë
__THROW
;

314 
boﬁ_t
 
	$xdr_°rög
 (
XDR
 *
__xdrs
, **
__˝p
, 
u_öt
 
__maxsize
Ë
__THROW
;

315 
boﬁ_t
 
	$xdr_uni⁄
 (
XDR
 *
__xdrs
, 
íum_t
 *
__dscmp
, *
__u≈
,

316 c⁄° 
xdr_dis¸im
 *
__choi˚s
,

317 
xdΩroc_t
 
__dÁu…
Ë
__THROW
;

318 
boﬁ_t
 
	$xdr_ch¨
 (
XDR
 *
__xdrs
, *
__˝
Ë
__THROW
;

319 
boﬁ_t
 
	$xdr_u_ch¨
 (
XDR
 *
__xdrs
, 
u_ch¨
 *
__˝
Ë
__THROW
;

320 
boﬁ_t
 
	$xdr_ve˘‹
 (
XDR
 *
__xdrs
, *
__ba£p
, 
u_öt
 
__√Àm
,

321 
u_öt
 
__ñemsize
, 
xdΩroc_t
 
__xdr_ñem
Ë
__THROW
;

322 
boﬁ_t
 
	$xdr_Êﬂt
 (
XDR
 *
__xdrs
, *
__Â
Ë
__THROW
;

323 
boﬁ_t
 
	$xdr_doubÀ
 (
XDR
 *
__xdrs
, *
__dp
Ë
__THROW
;

324 
boﬁ_t
 
	$xdr_ª„ªn˚
 (
XDR
 *
__xdrs
, 
ˇddr_t
 *
__xµ
, 
u_öt
 
__size
,

325 
xdΩroc_t
 
__¥oc
Ë
__THROW
;

326 
boﬁ_t
 
	$xdr_poöãr
 (
XDR
 *
__xdrs
, **
__objµ
,

327 
u_öt
 
__obj_size
, 
xdΩroc_t
 
__xdr_obj
Ë
__THROW
;

328 
boﬁ_t
 
	$xdr_wøp°rög
 (
XDR
 *
__xdrs
, **
__˝p
Ë
__THROW
;

329 
u_l⁄g
 
	$xdr_sizeof
 (
xdΩroc_t
, *Ë
__THROW
;

335 
	#MAX_NETOBJ_SZ
 1024

	)

336 
	s√tobj


338 
u_öt
 
n_Àn
;

339 *
n_byãs
;

341 
√tobj
 
	t√tobj
;

342 
boﬁ_t
 
	$xdr_√tobj
 (
XDR
 *
__xdrs
, 
√tobj
 *
__≈
Ë
__THROW
;

350 
	$xdrmem_¸óã
 (
XDR
 *
__xdrs
, c⁄° 
ˇddr_t
 
__addr
,

351 
u_öt
 
__size
, 
xdr_›
 
__x›
Ë
__THROW
;

354 
	$xdr°dio_¸óã
 (
XDR
 *
__xdrs
, 
FILE
 *
__fûe
, 
xdr_›
 
__x›
)

355 
__THROW
;

358 
	`xdºec_¸óã
 (
XDR
 *
__xdrs
, 
u_öt
 
__£ndsize
,

359 
u_öt
 
__ªcvsize
, 
ˇddr_t
 
__t˝_h™dÀ
,

360 (*
__ªadô
) (*, *, ),

361 (*
__wrôeô
Ë(*, *, )Ë
__THROW
;

364 
boﬁ_t
 
	$xdºec_ído‰ec‹d
 (
XDR
 *
__xdrs
, 
boﬁ_t
 
__£ndnow
Ë
__THROW
;

367 
boﬁ_t
 
	$xdºec_skùªc‹d
 (
XDR
 *
__xdrs
Ë
__THROW
;

370 
boﬁ_t
 
	$xdºec_eof
 (
XDR
 *
__xdrs
Ë
__THROW
;

373 
	$xdr_‰ì
 (
xdΩroc_t
 
__¥oc
, *
__objp
Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

283 
	#INT8_C
(
c
Ë
	)
c

284 
	#INT16_C
(
c
Ë
	)
c

285 
	#INT32_C
(
c
Ë
	)
c

286 #i‡
__WORDSIZE
 == 64

287 
	#INT64_C
(
c
Ë¯## 
L


	)

289 
	#INT64_C
(
c
Ë¯## 
LL


	)

293 
	#UINT8_C
(
c
Ë
	)
c

294 
	#UINT16_C
(
c
Ë
	)
c

295 
	#UINT32_C
(
c
Ë¯## 
U


	)

296 #i‡
__WORDSIZE
 == 64

297 
	#UINT64_C
(
c
Ë¯## 
UL


	)

299 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#INTMAX_C
(
c
Ë¯## 
L


	)

305 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

307 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

308 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_FILE_OFFSET64


132 #ifde‡
__USE_GNU


133 
	#F_OFD_GETLK
 36

	)

134 
	#F_OFD_SETLK
 37

	)

135 
	#F_OFD_SETLKW
 38

	)

139 #ifde‡
__USE_LARGEFILE64


140 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

143 #ifde‡
__USE_XOPEN2K8


144 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

145 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

146 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

149 #ifde‡
__USE_GNU


150 
	#O_DIRECT
 
__O_DIRECT


	)

151 
	#O_NOATIME
 
__O_NOATIME


	)

152 
	#O_PATH
 
__O_PATH


	)

153 
	#O_TMPFILE
 
__O_TMPFILE


	)

159 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


160 
	#O_DSYNC
 
__O_DSYNC


	)

161 #i‡
deföed
 
__O_RSYNC


162 
	#O_RSYNC
 
__O_RSYNC


	)

164 
	#O_RSYNC
 
O_SYNC


	)

169 
	#F_DUPFD
 0

	)

170 
	#F_GETFD
 1

	)

171 
	#F_SETFD
 2

	)

172 
	#F_GETFL
 3

	)

173 
	#F_SETFL
 4

	)

175 #i‚de‡
__F_SETOWN


176 
	#__F_SETOWN
 8

	)

177 
	#__F_GETOWN
 9

	)

180 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


181 
	#F_SETOWN
 
__F_SETOWN


	)

182 
	#F_GETOWN
 
__F_GETOWN


	)

185 #i‚de‡
__F_SETSIG


186 
	#__F_SETSIG
 10

	)

187 
	#__F_GETSIG
 11

	)

189 #i‚de‡
__F_SETOWN_EX


190 
	#__F_SETOWN_EX
 15

	)

191 
	#__F_GETOWN_EX
 16

	)

194 #ifde‡
__USE_GNU


195 
	#F_SETSIG
 
__F_SETSIG


	)

196 
	#F_GETSIG
 
__F_GETSIG


	)

197 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

198 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

201 #ifde‡
__USE_GNU


202 
	#F_SETLEASE
 1024

	)

203 
	#F_GETLEASE
 1025

	)

204 
	#F_NOTIFY
 1026

	)

205 
	#F_SETPIPE_SZ
 1031

	)

206 
	#F_GETPIPE_SZ
 1032

	)

208 #ifde‡
__USE_XOPEN2K8


209 
	#F_DUPFD_CLOEXEC
 1030

	)

214 
	#FD_CLOEXEC
 1

	)

216 #i‚de‡
F_RDLCK


218 
	#F_RDLCK
 0

	)

219 
	#F_WRLCK
 1

	)

220 
	#F_UNLCK
 2

	)

225 #i‚de‡
F_EXLCK


226 
	#F_EXLCK
 4

	)

227 
	#F_SHLCK
 8

	)

230 #ifde‡
__USE_BSD


232 
	#LOCK_SH
 1

	)

233 
	#LOCK_EX
 2

	)

234 
	#LOCK_NB
 4

	)

236 
	#LOCK_UN
 8

	)

239 #ifde‡
__USE_GNU


240 
	#LOCK_MAND
 32

	)

241 
	#LOCK_READ
 64

	)

242 
	#LOCK_WRITE
 128

	)

243 
	#LOCK_RW
 192

	)

246 #ifde‡
__USE_GNU


248 
	#DN_ACCESS
 0x00000001

	)

249 
	#DN_MODIFY
 0x00000002

	)

250 
	#DN_CREATE
 0x00000004

	)

251 
	#DN_DELETE
 0x00000008

	)

252 
	#DN_RENAME
 0x00000010

	)

253 
	#DN_ATTRIB
 0x00000020

	)

254 
	#DN_MULTISHOT
 0x80000000

	)

258 #ifde‡
__USE_GNU


260 
	e__pid_ty≥


262 
	mF_OWNER_TID
 = 0,

263 
	mF_OWNER_PID
,

264 
	mF_OWNER_PGRP
,

265 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


269 
	sf_ow√r_ex


271 
__pid_ty≥
 
	mty≥
;

272 
__pid_t
 
	mpid
;

278 #ifdef 
__USE_BSD


279 
	#FAPPEND
 
O_APPEND


	)

280 
	#FFSYNC
 
O_FSYNC


	)

281 
	#FASYNC
 
O_ASYNC


	)

282 
	#FNONBLOCK
 
O_NONBLOCK


	)

283 
	#FNDELAY
 
O_NDELAY


	)

286 #i‚de‡
__POSIX_FADV_DONTNEED


287 
	#__POSIX_FADV_DONTNEED
 4

	)

288 
	#__POSIX_FADV_NOREUSE
 5

	)

291 #ifde‡
__USE_XOPEN2K


292 
	#POSIX_FADV_NORMAL
 0

	)

293 
	#POSIX_FADV_RANDOM
 1

	)

294 
	#POSIX_FADV_SEQUENTIAL
 2

	)

295 
	#POSIX_FADV_WILLNEED
 3

	)

296 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

297 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

301 #ifde‡
__USE_GNU


303 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

306 
	#SYNC_FILE_RANGE_WRITE
 2

	)

309 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

314 
	#SPLICE_F_MOVE
 1

	)

315 
	#SPLICE_F_NONBLOCK
 2

	)

318 
	#SPLICE_F_MORE
 4

	)

319 
	#SPLICE_F_GIFT
 8

	)

323 
	~<löux/ÁŒoc.h
>

327 
	sfûe_h™dÀ


329 
	mh™dÀ_byãs
;

330 
	mh™dÀ_ty≥
;

332 
	mf_h™dÀ
[0];

336 
	#MAX_HANDLE_SZ
 128

	)

339 
	g__BEGIN_DECLS


341 #ifde‡
__USE_GNU


344 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

345 
__THROW
;

352 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

353 
__Êags
);

360 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

361 
size_t
 
__cou¡
, 
__Êags
);

367 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

368 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

369 
__Êags
);

375 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

376 
__Êags
);

382 #i‚de‡
__USE_FILE_OFFSET64


383 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

387 
__off64_t
 
__Àn
),

388 
ÁŒoˇã64
);

390 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

393 #ifde‡
__USE_LARGEFILE64


394 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

395 
__off64_t
 
__Àn
);

400 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

401 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

402 
__Êags
Ë
__THROW
;

408 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

409 
__Êags
);

413 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && 
	tIS_IN
 (
	tlibc
)

48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_BSD


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_BSD


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_BSD


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

144 #i‡
__GNUC_PREREQ
 (4,3)

145 
	#__w¨nde˛
(
«me
, 
msg
) \

146 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

147 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

148 
	#__îr‹de˛
(
«me
, 
msg
) \

149 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

151 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

152 
	#__w¨«âr
(
msg
)

	)

153 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 #i‡
__GNUC_PREREQ
 (2,97)

159 
	#__Êex¨r
 []

	)

161 #ifde‡
__GNUC__


162 
	#__Êex¨r
 [0]

	)

164 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

165 
	#__Êex¨r
 []

	)

168 
	#__Êex¨r
 [1]

	)

184 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

186 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

187 #ifde‡
__˝lu•lus


188 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

189 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

190 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

191 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

198 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

199 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

212 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

213 
	#__©åibuã__
(
xyz
Ë

	)

219 #i‡
__GNUC_PREREQ
 (2,96)

220 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

222 
	#__©åibuã_mÆloc__


	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 
	~<bôs/w‹dsize.h
>

394 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


395 
	#__LDBL_COMPAT
 1

	)

396 #ifde‡
__REDIRECT


397 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

398 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

399 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

400 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

401 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

402 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

403 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

404 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

405 
	#__LDBL_REDIR_DECL
(
«me
) \

406 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

407 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

409 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

410 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

413 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


414 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

415 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

416 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

417 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

418 
	#__LDBL_REDIR_DECL
(
«me
)

	)

419 #ifde‡
__REDIRECT


420 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

422 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/un.h

18 #i‚def 
_SYS_UN_H


19 
	#_SYS_UN_H
 1

	)

21 
	~<sys/cdefs.h
>

24 
	~<bôs/sockaddr.h
>

26 
__BEGIN_DECLS


29 
	ssockaddr_un


31 
__SOCKADDR_COMMON
 (
sun_
);

32 
	msun_∑th
[108];

36 #ifde‡
__USE_MISC


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
	g__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SCM_TIMESTAMPING_PKTINFO
 58

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

28 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

42 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

59 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

56 #i‚de‡
_IOC_NONE


57 
	#_IOC_NONE
 0U

	)

60 #i‚de‡
_IOC_WRITE


61 
	#_IOC_WRITE
 1U

	)

64 #i‚de‡
_IOC_READ


65 
	#_IOC_READ
 2U

	)

68 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

69 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

70 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

71 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

72 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

74 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

82 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

83 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

84 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

85 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

87 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

88 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

91 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

92 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

93 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

94 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

98 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

99 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

100 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

101 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

102 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
620
14077
bench/bw_door.c
bench/bw_pipe.c
bench/bw_pxmsg.c
bench/bw_sunrpc_client.c
bench/bw_sunrpc_server.c
bench/bw_svmsg.c
bench/incr_fcntl1.c
bench/incr_fcntl5.c
bench/incr_pxmutex0.c
bench/incr_pxmutex1.c
bench/incr_pxmutex5.c
bench/incr_pxsem1.c
bench/incr_pxsem2.c
bench/incr_pxsem5.c
bench/incr_pxsem6.c
bench/incr_pxsem7.c
bench/incr_pxsem8.c
bench/incr_pxsem9.c
bench/incr_rwlock1.c
bench/incr_rwlock2.c
bench/incr_rwlock5.c
bench/incr_svsem1.c
bench/incr_svsem2.c
bench/incr_svsem5.c
bench/incr_svsem6.c
bench/lat_door.c
bench/lat_pipe.c
bench/lat_pxmsg.c
bench/lat_signal.c
bench/lat_sigqueue.c
bench/lat_sigwait.c
bench/lat_sunrpc.h
bench/lat_sunrpc_client.c
bench/lat_sunrpc_server.c
bench/lat_svmsg.c
bench/test1.c
bench/unpipc.h
config.h
doors/client1.c
doors/client2.c
doors/client3.c
doors/client4.c
doors/client5.c
doors/client6.c
doors/client7.c
doors/client8.c
doors/client9.c
doors/clientfd1.c
doors/clientintr1.c
doors/clientintr2.c
doors/clientintr3.c
doors/clientintr4.c
doors/clientunref1.c
doors/clientunref2.c
doors/doorinfo.c
doors/server1.c
doors/server2.c
doors/server3.c
doors/server4.c
doors/server5.c
doors/server6.c
doors/server7.c
doors/server8.c
doors/server9.c
doors/serverfd1.c
doors/serverintr1.c
doors/serverintr2.c
doors/serverintr3.c
doors/serverintr4.c
doors/serverunref1.c
doors/serverunref2.c
doors/sqrtproc.h
doors/squareproc.h
doors/tclient1.c
doors/tserver1.c
doors/unpipc.h
fifocliserv/fifo.h
fifocliserv/mainclient.c
fifocliserv/mainserver.c
fifocliserv/unpipc.h
lib/daemon_inetd.c
lib/daemon_init.c
lib/error.c
lib/gf_time.c
lib/isfdtype.c
lib/lock_reg.c
lib/lock_test.c
lib/my_shm.c
lib/pselect.c
lib/px_ipc_name.c
lib/readable_timeo.c
lib/readline.c
lib/readn.c
lib/set_concurrency.c
lib/set_nonblock.c
lib/signal.c
lib/signal_intr.c
lib/signal_rt.c
lib/signal_rt_intr.c
lib/sleep_us.c
lib/snprintf.c
lib/timing.c
lib/tv_sub.c
lib/unpipc.h
lib/wrapdoor.c
lib/wrappthread.c
lib/wrapstdio.c
lib/wrapsunrpc.c
lib/wrapunix.c
lib/writable_timeo.c
lib/writen.c
lock/lockfcntl.c
lock/locklink.c
lock/lockmain.c
lock/lockmainubuf.c
lock/locknone.c
lock/lockopen.c
lock/lockopen2.c
lock/lockpxsem.c
lock/locksvsem.c
lock/locksvsemrace1.c
lock/loopmain.c
lock/loopmainnonb.c
lock/onedaemon.c
lock/test1.c
lock/test2.c
lock/test3.c
lock/test4.c
lock/unpipc.h
mutex/prodcons1.c
mutex/prodcons2.c
mutex/prodcons3.c
mutex/prodcons4.c
mutex/prodcons5.c
mutex/prodcons6.c
mutex/prodcons7.c
mutex/test1.c
mutex/test2.c
mutex/test3.c
mutex/test4.c
mutex/unpipc.h
my_pxmsg_mmap/mq_close.c
my_pxmsg_mmap/mq_getattr.c
my_pxmsg_mmap/mq_notify.c
my_pxmsg_mmap/mq_open.c
my_pxmsg_mmap/mq_receive.c
my_pxmsg_mmap/mq_send.c
my_pxmsg_mmap/mq_setattr.c
my_pxmsg_mmap/mq_unlink.c
my_pxmsg_mmap/mqcreate.c
my_pxmsg_mmap/mqgetattr.c
my_pxmsg_mmap/mqnotify1.c
my_pxmsg_mmap/mqreceive.c
my_pxmsg_mmap/mqsend.c
my_pxmsg_mmap/mqueue.h
my_pxmsg_mmap/mqunlink.c
my_pxmsg_mmap/new/mymq_receive.c
my_pxmsg_mmap/test1.c
my_pxmsg_mmap/test2.c
my_pxmsg_mmap/testmq.c
my_pxmsg_mmap/unpipc.h
my_pxsem_fifo/prodcons1.c
my_pxsem_fifo/sem_close.c
my_pxsem_fifo/sem_open.c
my_pxsem_fifo/sem_post.c
my_pxsem_fifo/sem_unlink.c
my_pxsem_fifo/sem_wait.c
my_pxsem_fifo/semaphore.h
my_pxsem_fifo/testeintr.c
my_pxsem_fifo/unpipc.h
my_pxsem_mmap/prodcons1.c
my_pxsem_mmap/sem_close.c
my_pxsem_mmap/sem_getvalue.c
my_pxsem_mmap/sem_open.c
my_pxsem_mmap/sem_post.c
my_pxsem_mmap/sem_trywait.c
my_pxsem_mmap/sem_unlink.c
my_pxsem_mmap/sem_wait.c
my_pxsem_mmap/semaphore.h
my_pxsem_mmap/testeintr.c
my_pxsem_mmap/testsem.c
my_pxsem_mmap/unpipc.h
my_pxsem_svsem/prodcons1.c
my_pxsem_svsem/sem_close.c
my_pxsem_svsem/sem_getvalue.c
my_pxsem_svsem/sem_open.c
my_pxsem_svsem/sem_post.c
my_pxsem_svsem/sem_trywait.c
my_pxsem_svsem/sem_unlink.c
my_pxsem_svsem/sem_wait.c
my_pxsem_svsem/semaphore.h
my_pxsem_svsem/testeintr.c
my_pxsem_svsem/testsem.c
my_pxsem_svsem/unpipc.h
my_rwlock/incr_rwlock1.c
my_rwlock/pthread_rwlock.h
my_rwlock/pthread_rwlock_destroy.c
my_rwlock/pthread_rwlock_init.c
my_rwlock/pthread_rwlock_rdlock.c
my_rwlock/pthread_rwlock_tryrdlock.c
my_rwlock/pthread_rwlock_trywrlock.c
my_rwlock/pthread_rwlock_unlock.c
my_rwlock/pthread_rwlock_wrlock.c
my_rwlock/test1.c
my_rwlock/testcancel.c
my_rwlock/unpipc.h
my_rwlock_cancel/incr_rwlock1.c
my_rwlock_cancel/pthread_rwlock.h
my_rwlock_cancel/pthread_rwlock_destroy.c
my_rwlock_cancel/pthread_rwlock_init.c
my_rwlock_cancel/pthread_rwlock_rdlock.c
my_rwlock_cancel/pthread_rwlock_tryrdlock.c
my_rwlock_cancel/pthread_rwlock_trywrlock.c
my_rwlock_cancel/pthread_rwlock_unlock.c
my_rwlock_cancel/pthread_rwlock_wrlock.c
my_rwlock_cancel/test1.c
my_rwlock_cancel/testcancel.c
my_rwlock_cancel/unpipc.h
pipe/client.c
pipe/client_main.c
pipe/fduplex.c
pipe/fifo.h
pipe/mainfifo.c
pipe/mainpipe.c
pipe/mainpopen.c
pipe/pipeconf.c
pipe/server.c
pipe/server_main.c
pipe/test1.c
pipe/test2.c
pipe/unpipc.h
pipemesg/client.c
pipemesg/mainfifo.c
pipemesg/mainpipe.c
pipemesg/mesg.h
pipemesg/mesg_recv.c
pipemesg/mesg_send.c
pipemesg/server.c
pipemesg/unpipc.h
pxmsg/mqcreate.c
pxmsg/mqcreate1.c
pxmsg/mqgetattr.c
pxmsg/mqnotify3.c
pxmsg/mqnotifysig1.c
pxmsg/mqnotifysig2.c
pxmsg/mqnotifysig3.c
pxmsg/mqnotifysig4.c
pxmsg/mqnotifysig5.c
pxmsg/mqnotifythread1.c
pxmsg/mqreceive.c
pxmsg/mqsend.c
pxmsg/mqsysconf.c
pxmsg/mqunlink.c
pxmsg/test1.c
pxmsg/unpipc.h
pxsem/deadlock.c
pxsem/mycat1.c
pxsem/mycat2.c
pxsem/prodcons1.c
pxsem/prodcons2.c
pxsem/prodcons3.c
pxsem/prodcons4.c
pxsem/semcreate.c
pxsem/semgetvalue.c
pxsem/sempost.c
pxsem/semsysconf.c
pxsem/semunlink.c
pxsem/semwait.c
pxsem/testeintr.c
pxsem/unpipc.h
pxshm/client1.c
pxshm/client2.c
pxshm/cliserv2.h
pxshm/server1.c
pxshm/server2.c
pxshm/shmcreate.c
pxshm/shmread.c
pxshm/shmunlink.c
pxshm/shmwrite.c
pxshm/test1.c
pxshm/test2.c
pxshm/test3.c
pxshm/unpipc.h
rtsignals/test1.c
rtsignals/test2.c
rtsignals/test3.c
rtsignals/unpipc.h
shm/incr1.c
shm/incr2.c
shm/incr2private.c
shm/incr3.c
shm/incr_dev_zero.c
shm/incr_map_anon.c
shm/svmsgread.c
shm/test1.c
shm/test2.c
shm/test3.c
shm/unpipc.h
sparc-sun-solaris2.6/config.h
sunrpc/square1/client.c
sunrpc/square1/server.c
sunrpc/square1/square.h
sunrpc/square1/square_clnt.c
sunrpc/square1/square_svc.c
sunrpc/square1/square_xdr.c
sunrpc/square1/unpipc.h
sunrpc/square10/client.c
sunrpc/square10/server.c
sunrpc/square10/unpipc.h
sunrpc/square2/client.c
sunrpc/square2/server.c
sunrpc/square2/square.h
sunrpc/square2/square_clnt.c
sunrpc/square2/square_svc.c
sunrpc/square2/square_xdr.c
sunrpc/square2/unpipc.h
sunrpc/square3.org/client.c
sunrpc/square3.org/server.c
sunrpc/square3.org/square.h
sunrpc/square3.org/unpipc.h
sunrpc/square3/client.c
sunrpc/square3/server.c
sunrpc/square3/square.h
sunrpc/square3/square_client.c
sunrpc/square3/square_clnt.c
sunrpc/square3/square_server.c
sunrpc/square3/square_svc.c
sunrpc/square3/square_xdr.c
sunrpc/square3/unpipc.h
sunrpc/square4/client.c
sunrpc/square4/server.c
sunrpc/square4/square.h
sunrpc/square4/square_client.c
sunrpc/square4/square_clnt.c
sunrpc/square4/square_server.c
sunrpc/square4/square_svc.c
sunrpc/square4/square_xdr.c
sunrpc/square4/unpipc.h
sunrpc/square5/client.c
sunrpc/square5/server.c
sunrpc/square5/square.h
sunrpc/square5/square_clnt.c
sunrpc/square5/square_svc.c
sunrpc/square5/square_xdr.c
sunrpc/square5/unpipc.h
sunrpc/square6/client.c
sunrpc/square6/server.c
sunrpc/square6/unpipc.h
sunrpc/square7/client.c
sunrpc/square7/server.c
sunrpc/square7/unpipc.h
sunrpc/square8/client.c
sunrpc/square8/server.c
sunrpc/square8/unpipc.h
sunrpc/square9/client.c
sunrpc/square9/server.c
sunrpc/square9/unpipc.h
sunrpc/test1/main.c
sunrpc/test1/nullargs.h
sunrpc/test1/unpipc.h
sunrpc/xdr1/data.save.h
sunrpc/xdr1/example.c
sunrpc/xdr1/opt1.c
sunrpc/xdr1/opt1.h
sunrpc/xdr1/opt1.save.h
sunrpc/xdr1/opt1z.c
sunrpc/xdr1/opt2.c
sunrpc/xdr1/opt2.h
sunrpc/xdr1/opt2.save.h
sunrpc/xdr1/opt2z.c
sunrpc/xdr1/read.c
sunrpc/xdr1/test1.h
sunrpc/xdr1/unpipc.h
sunrpc/xdr1/write.c
svipc/ftok.c
svipc/ftok1.c
svipc/unpipc.h
svmsg/ctl.c
svmsg/limits.c
svmsg/msgcreate.c
svmsg/msgrcv.c
svmsg/msgrcvid.c
svmsg/msgrmid.c
svmsg/msgsnd.c
svmsg/slot.c
svmsg/slotseq.c
svmsg/testumask.c
svmsg/twoqueues.c
svmsg/unpipc.h
svmsgcliserv/client.c
svmsgcliserv/client_main.c
svmsgcliserv/mesg.h
svmsgcliserv/mesg_recv.c
svmsgcliserv/mesg_send.c
svmsgcliserv/server.c
svmsgcliserv/server_main.c
svmsgcliserv/svmsg.h
svmsgcliserv/unpipc.h
svmsgmpx1q/client.c
svmsgmpx1q/client_main.c
svmsgmpx1q/mesg.h
svmsgmpx1q/mesg_recv.c
svmsgmpx1q/mesg_send.c
svmsgmpx1q/server.c
svmsgmpx1q/server_main.c
svmsgmpx1q/svmsg.h
svmsgmpx1q/unpipc.h
svmsgmpxnq/client.c
svmsgmpxnq/client_main.c
svmsgmpxnq/mesg.h
svmsgmpxnq/mesg_recv.c
svmsgmpxnq/mesg_send.c
svmsgmpxnq/server.c
svmsgmpxnq/server_main.c
svmsgmpxnq/sigchldwaitpid.c
svmsgmpxnq/svmsg.h
svmsgmpxnq/unpipc.h
svsem/initval.c
svsem/limits.c
svsem/semcreate.c
svsem/semgetvalues.c
svsem/semops.c
svsem/semopsid.c
svsem/semrmid.c
svsem/semsetvalues.c
svsem/unpipc.h
svshm/limits.c
svshm/shmget.c
svshm/shmread.c
svshm/shmreadid.c
svshm/shmrmid.c
svshm/shmwrite.c
svshm/unpipc.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/mqueue.h
/usr/include/netinet/in.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/rpc/pmap_clnt.h
/usr/include/rpc/rpc.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/msg.h
/usr/include/sys/param.h
/usr/include/sys/select.h
/usr/include/sys/sem.h
/usr/include/sys/shm.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/mqueue.h
/usr/include/bits/mqueue2.h
/usr/include/bits/msq.h
/usr/include/bits/nan.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sem.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/sysctl.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/sysctl.h
/usr/include/rpc/auth.h
/usr/include/rpc/auth_des.h
/usr/include/rpc/auth_unix.h
/usr/include/rpc/clnt.h
/usr/include/rpc/netdb.h
/usr/include/rpc/rpc_msg.h
/usr/include/rpc/svc.h
/usr/include/rpc/svc_auth.h
/usr/include/rpc/types.h
/usr/include/rpc/xdr.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/sys/poll.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/sched.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/un.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/falloc.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/ioctl.h
/usr/include/linux/stddef.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/ioctl.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
